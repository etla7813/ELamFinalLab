
ELamLabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af48  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b0  0800b0f8  0800b0f8  0000c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3a8  0800c3a8  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3a8  0800c3a8  0000d3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3b0  0800c3b0  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b0  0800c3b0  0000d3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3b4  0800c3b4  0000d3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c3b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          00025eb4  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025f34  20025f34  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108bf  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031cc  00000000  00000000  0001e96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00021b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbd  00000000  00000000  00022ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c29  00000000  00000000  00023695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168e8  00000000  00000000  0004a2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e06c2  00000000  00000000  00060ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141268  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049a4  00000000  00000000  001412ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00145c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b0e0 	.word	0x0800b0e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800b0e0 	.word	0x0800b0e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db0b      	blt.n	80005ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f003 021f 	and.w	r2, r3, #31
 80005a8:	4907      	ldr	r1, [pc, #28]	@ (80005c8 <__NVIC_EnableIRQ+0x38>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	095b      	lsrs	r3, r3, #5
 80005b0:	2001      	movs	r0, #1
 80005b2:	fa00 f202 	lsl.w	r2, r0, r2
 80005b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100

080005cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db12      	blt.n	8000604 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	490a      	ldr	r1, [pc, #40]	@ (8000610 <__NVIC_DisableIRQ+0x44>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	3320      	adds	r3, #32
 80005f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fe:	f3bf 8f6f 	isb	sy
}
 8000602:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100

08000614 <gameRun>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void gameRun()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	game_Run();
 8000618:	f004 fb60 	bl	8004cdc <game_Run>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <ApplicationInit>:
void ApplicationInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000624:	f009 fcf4 	bl	800a010 <initialise_monitor_handles>
    LTCD__Init();
 8000628:	f004 fd36 	bl	8005098 <LTCD__Init>
    LTCD_Layer_Init(0);
 800062c:	2000      	movs	r0, #0
 800062e:	f004 fcf3 	bl	8005018 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000632:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000636:	2000      	movs	r0, #0
 8000638:	f004 fe3e 	bl	80052b8 <LCD_Clear>

    RNGInit();
 800063c:	f004 ff78 	bl	8005530 <RNGInit>
    buttonInterruptMode();
 8000640:	f004 fbe6 	bl	8004e10 <buttonInterruptMode>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000644:	f004 ff3e 	bl	80054c4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <ApplicationInit+0x38>)
 800064a:	2201      	movs	r2, #1
 800064c:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 800064e:	f000 f805 	bl	800065c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000009c 	.word	0x2000009c

0800065c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000674:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000676:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800067a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006a6:	f006 fb47 	bl	8006d38 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006aa:	2028      	movs	r0, #40	@ 0x28
 80006ac:	f006 faf5 	bl	8006c9a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006b2:	4a06      	ldr	r2, [pc, #24]	@ (80006cc <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006b4:	601a      	str	r2, [r3, #0]

}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	200000a4 	.word	0x200000a4
 80006cc:	0600000f 	.word	0x0600000f

080006d0 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006d6:	2028      	movs	r0, #40	@ 0x28
 80006d8:	f006 faed 	bl	8006cb6 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006dc:	2300      	movs	r3, #0
 80006de:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80006e0:	4b36      	ldr	r3, [pc, #216]	@ (80007bc <EXTI15_10_IRQHandler+0xec>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80006e6:	e006      	b.n	80006f6 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80006e8:	204c      	movs	r0, #76	@ 0x4c
 80006ea:	f005 fe04 	bl	80062f6 <STMPE811_Read>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b32      	ldr	r3, [pc, #200]	@ (80007bc <EXTI15_10_IRQHandler+0xec>)
 80006f4:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80006f6:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <EXTI15_10_IRQHandler+0xec>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f4      	beq.n	80006e8 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80006fe:	200a      	movs	r0, #10
 8000700:	f004 fef6 	bl	80054f0 <ReadRegisterFromTouchModule>
 8000704:	4603      	mov	r3, r0
 8000706:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000708:	2100      	movs	r1, #0
 800070a:	200a      	movs	r0, #10
 800070c:	f004 fefe 	bl	800550c <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000710:	200b      	movs	r0, #11
 8000712:	f004 feed 	bl	80054f0 <ReadRegisterFromTouchModule>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <EXTI15_10_IRQHandler+0xf0>)
 800071c:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800071e:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <EXTI15_10_IRQHandler+0xf0>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	4619      	mov	r1, r3
 800072c:	200b      	movs	r0, #11
 800072e:	f004 feed 	bl	800550c <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000732:	2040      	movs	r0, #64	@ 0x40
 8000734:	f004 fedc 	bl	80054f0 <ReadRegisterFromTouchModule>
 8000738:	4603      	mov	r3, r0
 800073a:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 800073c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	da01      	bge.n	8000748 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d012      	beq.n	8000774 <EXTI15_10_IRQHandler+0xa4>
	{
		printf("\nPressed");
 800074e:	481d      	ldr	r0, [pc, #116]	@ (80007c4 <EXTI15_10_IRQHandler+0xf4>)
 8000750:	f009 fdfa 	bl	800a348 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 8000754:	481c      	ldr	r0, [pc, #112]	@ (80007c8 <EXTI15_10_IRQHandler+0xf8>)
 8000756:	f004 fec0 	bl	80054da <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <EXTI15_10_IRQHandler+0xf8>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <EXTI15_10_IRQHandler+0xf8>)
 8000762:	885b      	ldrh	r3, [r3, #2]
 8000764:	461a      	mov	r2, r3
 8000766:	4819      	ldr	r0, [pc, #100]	@ (80007cc <EXTI15_10_IRQHandler+0xfc>)
 8000768:	f009 fdee 	bl	800a348 <iprintf>
		addSchedulerEvent(START_GAME);
 800076c:	2001      	movs	r0, #1
 800076e:	f004 ff0f 	bl	8005590 <addSchedulerEvent>
 8000772:	e002      	b.n	800077a <EXTI15_10_IRQHandler+0xaa>

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 8000774:	4816      	ldr	r0, [pc, #88]	@ (80007d0 <EXTI15_10_IRQHandler+0x100>)
 8000776:	f009 fe4f 	bl	800a418 <puts>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800077a:	2101      	movs	r1, #1
 800077c:	204b      	movs	r0, #75	@ 0x4b
 800077e:	f005 fdcb 	bl	8006318 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000782:	2100      	movs	r1, #0
 8000784:	204b      	movs	r0, #75	@ 0x4b
 8000786:	f005 fdc7 	bl	8006318 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	4619      	mov	r1, r3
 800078e:	200a      	movs	r0, #10
 8000790:	f004 febc 	bl	800550c <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000794:	2103      	movs	r1, #3
 8000796:	480f      	ldr	r0, [pc, #60]	@ (80007d4 <EXTI15_10_IRQHandler+0x104>)
 8000798:	f006 fab6 	bl	8006d08 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800079c:	2028      	movs	r0, #40	@ 0x28
 800079e:	f006 faa4 	bl	8006cea <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a2:	2028      	movs	r0, #40	@ 0x28
 80007a4:	f006 fa79 	bl	8006c9a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80007a8:	797b      	ldrb	r3, [r7, #5]
 80007aa:	4619      	mov	r1, r3
 80007ac:	200b      	movs	r0, #11
 80007ae:	f004 fead 	bl	800550c <WriteDataToTouchModule>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000b0 	.word	0x200000b0
 80007c0:	200000ac 	.word	0x200000ac
 80007c4:	0800b11c 	.word	0x0800b11c
 80007c8:	2000009c 	.word	0x2000009c
 80007cc:	0800b128 	.word	0x0800b128
 80007d0:	0800b13c 	.word	0x0800b13c
 80007d4:	200000a4 	.word	0x200000a4

080007d8 <EXTI0_IRQHandler>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

extern uint16_t rotation;
void EXTI0_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(EXTI0_IRQn);
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff fef5 	bl	80005cc <__NVIC_DisableIRQ>
	rotation++;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <EXTI0_IRQHandler+0x2c>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <EXTI0_IRQHandler+0x2c>)
 80007ec:	801a      	strh	r2, [r3, #0]
	block_rotate();
 80007ee:	f002 fc11 	bl	8003014 <block_rotate>
	EXTI_ClearPendingBit(EXTI0_IRQn);
 80007f2:	2006      	movs	r0, #6
 80007f4:	f004 fb30 	bl	8004e58 <EXTI_ClearPendingBit>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff fec9 	bl	8000590 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000

08000808 <DrawBlock>:
uint16_t time_elapsed=0;

uint16_t gameEnd = 0;

void DrawBlock(uint16_t x, uint16_t y, uint16_t color)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	807b      	strh	r3, [r7, #2]
	//input is array coordinates
	//convert to pixel coords
	//draw cube with pixel coordinates
	//add back grid lines
	uint16_t xpos = 24*x; uint16_t ypos = 24*y;
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	461a      	mov	r2, r3
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	81bb      	strh	r3, [r7, #12]
 8000826:	88bb      	ldrh	r3, [r7, #4]
 8000828:	461a      	mov	r2, r3
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	817b      	strh	r3, [r7, #10]
	for(int16_t i = xpos; i < xpos + xgrid; i++)
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	e00b      	b.n	8000850 <DrawBlock+0x48>
	{
		LCD_Draw_Vertical_Line(i, ypos, ygrid, color);
 8000838:	89f8      	ldrh	r0, [r7, #14]
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	8979      	ldrh	r1, [r7, #10]
 800083e:	2218      	movs	r2, #24
 8000840:	f004 fca6 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(int16_t i = xpos; i < xpos + xgrid; i++)
 8000844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000848:	b29b      	uxth	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	b29b      	uxth	r3, r3
 800084e:	81fb      	strh	r3, [r7, #14]
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	f103 0217 	add.w	r2, r3, #23
 8000856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800085a:	429a      	cmp	r2, r3
 800085c:	daec      	bge.n	8000838 <DrawBlock+0x30>
	}
	LCD_Draw_Vertical_Line(xpos,ypos,ygrid, LCD_COLOR_WHITE);
 800085e:	8979      	ldrh	r1, [r7, #10]
 8000860:	89b8      	ldrh	r0, [r7, #12]
 8000862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000866:	2218      	movs	r2, #24
 8000868:	f004 fc92 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(xpos,ypos,xgrid, LCD_COLOR_WHITE);
 800086c:	8979      	ldrh	r1, [r7, #10]
 800086e:	89b8      	ldrh	r0, [r7, #12]
 8000870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000874:	2218      	movs	r2, #24
 8000876:	f004 fcb2 	bl	80051de <LCD_Draw_Horizontal_Line>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <spawn_square>:

void spawn_square(int16_t x, int16_t y, uint16_t color)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	80fb      	strh	r3, [r7, #6]
 800088c:	460b      	mov	r3, r1
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	807b      	strh	r3, [r7, #2]
	//block 1
	for(uint16_t i = x; i < x + xgrid ; i++)
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	81fb      	strh	r3, [r7, #14]
 8000898:	e008      	b.n	80008ac <spawn_square+0x2a>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 800089a:	88b9      	ldrh	r1, [r7, #4]
 800089c:	887b      	ldrh	r3, [r7, #2]
 800089e:	89f8      	ldrh	r0, [r7, #14]
 80008a0:	2218      	movs	r2, #24
 80008a2:	f004 fc75 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + xgrid ; i++)
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	3301      	adds	r3, #1
 80008aa:	81fb      	strh	r3, [r7, #14]
 80008ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b0:	f103 0217 	add.w	r2, r3, #23
 80008b4:	89fb      	ldrh	r3, [r7, #14]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	daef      	bge.n	800089a <spawn_square+0x18>
	}
	LCD_Draw_Vertical_Line(x,y,ygrid, LCD_COLOR_WHITE);
 80008ba:	88f8      	ldrh	r0, [r7, #6]
 80008bc:	88b9      	ldrh	r1, [r7, #4]
 80008be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c2:	2218      	movs	r2, #24
 80008c4:	f004 fc64 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,xgrid, LCD_COLOR_WHITE);
 80008c8:	88f8      	ldrh	r0, [r7, #6]
 80008ca:	88b9      	ldrh	r1, [r7, #4]
 80008cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008d0:	2218      	movs	r2, #24
 80008d2:	f004 fc84 	bl	80051de <LCD_Draw_Horizontal_Line>
	//block 2
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	3318      	adds	r3, #24
 80008da:	81bb      	strh	r3, [r7, #12]
 80008dc:	e008      	b.n	80008f0 <spawn_square+0x6e>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 80008de:	88b9      	ldrh	r1, [r7, #4]
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	89b8      	ldrh	r0, [r7, #12]
 80008e4:	2218      	movs	r2, #24
 80008e6:	f004 fc53 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	81bb      	strh	r3, [r7, #12]
 80008f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f4:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80008f8:	89bb      	ldrh	r3, [r7, #12]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	daef      	bge.n	80008de <spawn_square+0x5c>
	}
	LCD_Draw_Vertical_Line(x+xgrid,y,ygrid, LCD_COLOR_WHITE);
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	3318      	adds	r3, #24
 8000902:	b298      	uxth	r0, r3
 8000904:	88b9      	ldrh	r1, [r7, #4]
 8000906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800090a:	2218      	movs	r2, #24
 800090c:	f004 fc40 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y,xgrid, LCD_COLOR_WHITE);
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	3318      	adds	r3, #24
 8000914:	b298      	uxth	r0, r3
 8000916:	88b9      	ldrh	r1, [r7, #4]
 8000918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091c:	2218      	movs	r2, #24
 800091e:	f004 fc5e 	bl	80051de <LCD_Draw_Horizontal_Line>
	//block 3
	for(uint16_t i = x; i < x + xgrid ; i++)
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	817b      	strh	r3, [r7, #10]
 8000926:	e00a      	b.n	800093e <spawn_square+0xbc>
	{
		LCD_Draw_Vertical_Line(i, y+ygrid, ygrid, color);
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	3318      	adds	r3, #24
 800092c:	b299      	uxth	r1, r3
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	8978      	ldrh	r0, [r7, #10]
 8000932:	2218      	movs	r2, #24
 8000934:	f004 fc2c 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + xgrid ; i++)
 8000938:	897b      	ldrh	r3, [r7, #10]
 800093a:	3301      	adds	r3, #1
 800093c:	817b      	strh	r3, [r7, #10]
 800093e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000942:	f103 0217 	add.w	r2, r3, #23
 8000946:	897b      	ldrh	r3, [r7, #10]
 8000948:	429a      	cmp	r2, r3
 800094a:	daed      	bge.n	8000928 <spawn_square+0xa6>
	}
	LCD_Draw_Vertical_Line(x,y+ygrid,ygrid, LCD_COLOR_WHITE);
 800094c:	88f8      	ldrh	r0, [r7, #6]
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	3318      	adds	r3, #24
 8000952:	b299      	uxth	r1, r3
 8000954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000958:	2218      	movs	r2, #24
 800095a:	f004 fc19 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid,xgrid, LCD_COLOR_WHITE);
 800095e:	88f8      	ldrh	r0, [r7, #6]
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	3318      	adds	r3, #24
 8000964:	b299      	uxth	r1, r3
 8000966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096a:	2218      	movs	r2, #24
 800096c:	f004 fc37 	bl	80051de <LCD_Draw_Horizontal_Line>

	//block 4
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	3318      	adds	r3, #24
 8000974:	813b      	strh	r3, [r7, #8]
 8000976:	e00a      	b.n	800098e <spawn_square+0x10c>
	{
		LCD_Draw_Vertical_Line(i, y+ygrid, ygrid, color);
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	3318      	adds	r3, #24
 800097c:	b299      	uxth	r1, r3
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	8938      	ldrh	r0, [r7, #8]
 8000982:	2218      	movs	r2, #24
 8000984:	f004 fc04 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 8000988:	893b      	ldrh	r3, [r7, #8]
 800098a:	3301      	adds	r3, #1
 800098c:	813b      	strh	r3, [r7, #8]
 800098e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000992:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000996:	893b      	ldrh	r3, [r7, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	daed      	bge.n	8000978 <spawn_square+0xf6>
	}
	LCD_Draw_Vertical_Line(x+xgrid,y+ygrid,ygrid, LCD_COLOR_WHITE);
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	3318      	adds	r3, #24
 80009a0:	b298      	uxth	r0, r3
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	3318      	adds	r3, #24
 80009a6:	b299      	uxth	r1, r3
 80009a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ac:	2218      	movs	r2, #24
 80009ae:	f004 fbef 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y+ygrid,xgrid, LCD_COLOR_WHITE);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	3318      	adds	r3, #24
 80009b6:	b298      	uxth	r0, r3
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	3318      	adds	r3, #24
 80009bc:	b299      	uxth	r1, r3
 80009be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c2:	2218      	movs	r2, #24
 80009c4:	f004 fc0b 	bl	80051de <LCD_Draw_Horizontal_Line>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <spawn_rect>:
void spawn_rect(int16_t x, int16_t y, uint16_t color)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	460b      	mov	r3, r1
 80009dc:	80bb      	strh	r3, [r7, #4]
 80009de:	4613      	mov	r3, r2
 80009e0:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = x; i < x + xgrid ; i++)
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	81fb      	strh	r3, [r7, #14]
 80009e6:	e008      	b.n	80009fa <spawn_rect+0x2a>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid*4, color);
 80009e8:	88b9      	ldrh	r1, [r7, #4]
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	89f8      	ldrh	r0, [r7, #14]
 80009ee:	2260      	movs	r2, #96	@ 0x60
 80009f0:	f004 fbce 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + xgrid ; i++)
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	3301      	adds	r3, #1
 80009f8:	81fb      	strh	r3, [r7, #14]
 80009fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fe:	f103 0217 	add.w	r2, r3, #23
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	daef      	bge.n	80009e8 <spawn_rect+0x18>
	}
	LCD_Draw_Vertical_Line(x,y, ygrid*4, LCD_COLOR_WHITE);
 8000a08:	88f8      	ldrh	r0, [r7, #6]
 8000a0a:	88b9      	ldrh	r1, [r7, #4]
 8000a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a10:	2260      	movs	r2, #96	@ 0x60
 8000a12:	f004 fbbd 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,xgrid, LCD_COLOR_WHITE);
 8000a16:	88f8      	ldrh	r0, [r7, #6]
 8000a18:	88b9      	ldrh	r1, [r7, #4]
 8000a1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a1e:	2218      	movs	r2, #24
 8000a20:	f004 fbdd 	bl	80051de <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000a24:	88f8      	ldrh	r0, [r7, #6]
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	3318      	adds	r3, #24
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a30:	2218      	movs	r2, #24
 8000a32:	f004 fbd4 	bl	80051de <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid*2,xgrid, LCD_COLOR_WHITE);
 8000a36:	88f8      	ldrh	r0, [r7, #6]
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	3330      	adds	r3, #48	@ 0x30
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a42:	2218      	movs	r2, #24
 8000a44:	f004 fbcb 	bl	80051de <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid*3,xgrid, LCD_COLOR_WHITE);
 8000a48:	88f8      	ldrh	r0, [r7, #6]
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	3348      	adds	r3, #72	@ 0x48
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a54:	2218      	movs	r2, #24
 8000a56:	f004 fbc2 	bl	80051de <LCD_Draw_Horizontal_Line>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <spawn_s>:
void spawn_s(int16_t x, int16_t y, uint16_t color)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	80bb      	strh	r3, [r7, #4]
 8000a70:	4613      	mov	r3, r2
 8000a72:	807b      	strh	r3, [r7, #2]
	//block 1 & 2
	for(uint16_t i = x; i < x + 2*xgrid ; i++)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	e008      	b.n	8000a8c <spawn_s+0x2a>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 8000a7a:	88b9      	ldrh	r1, [r7, #4]
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	89f8      	ldrh	r0, [r7, #14]
 8000a80:	2218      	movs	r2, #24
 8000a82:	f004 fb85 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + 2*xgrid ; i++)
 8000a86:	89fb      	ldrh	r3, [r7, #14]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	81fb      	strh	r3, [r7, #14]
 8000a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a90:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	daef      	bge.n	8000a7a <spawn_s+0x18>
	}
	LCD_Draw_Vertical_Line(x,y,ygrid, LCD_COLOR_WHITE);
 8000a9a:	88f8      	ldrh	r0, [r7, #6]
 8000a9c:	88b9      	ldrh	r1, [r7, #4]
 8000a9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000aa2:	2218      	movs	r2, #24
 8000aa4:	f004 fb74 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,xgrid, LCD_COLOR_WHITE);
 8000aa8:	88f8      	ldrh	r0, [r7, #6]
 8000aaa:	88b9      	ldrh	r1, [r7, #4]
 8000aac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ab0:	2218      	movs	r2, #24
 8000ab2:	f004 fb94 	bl	80051de <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x+xgrid,y,ygrid, LCD_COLOR_WHITE);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	b298      	uxth	r0, r3
 8000abc:	88b9      	ldrh	r1, [r7, #4]
 8000abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac2:	2218      	movs	r2, #24
 8000ac4:	f004 fb64 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y,xgrid, LCD_COLOR_WHITE);
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	3318      	adds	r3, #24
 8000acc:	b298      	uxth	r0, r3
 8000ace:	88b9      	ldrh	r1, [r7, #4]
 8000ad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ad4:	2218      	movs	r2, #24
 8000ad6:	f004 fb82 	bl	80051de <LCD_Draw_Horizontal_Line>
	//block 3 & 4
	for(int16_t i = x-xgrid; i < x + xgrid ; i++)
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	3b18      	subs	r3, #24
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	81bb      	strh	r3, [r7, #12]
 8000ae2:	e00d      	b.n	8000b00 <spawn_s+0x9e>
	{
		LCD_Draw_Vertical_Line(i, y+ygrid, ygrid, color);
 8000ae4:	89b8      	ldrh	r0, [r7, #12]
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	3318      	adds	r3, #24
 8000aea:	b299      	uxth	r1, r3
 8000aec:	887b      	ldrh	r3, [r7, #2]
 8000aee:	2218      	movs	r2, #24
 8000af0:	f004 fb4e 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(int16_t i = x-xgrid; i < x + xgrid ; i++)
 8000af4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	81bb      	strh	r3, [r7, #12]
 8000b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b04:	f103 0217 	add.w	r2, r3, #23
 8000b08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dae9      	bge.n	8000ae4 <spawn_s+0x82>
	}
	LCD_Draw_Vertical_Line(x-xgrid,y+ygrid,ygrid, LCD_COLOR_WHITE);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	3b18      	subs	r3, #24
 8000b14:	b298      	uxth	r0, r3
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	3318      	adds	r3, #24
 8000b1a:	b299      	uxth	r1, r3
 8000b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b20:	2218      	movs	r2, #24
 8000b22:	f004 fb35 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x-xgrid,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	3b18      	subs	r3, #24
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	3318      	adds	r3, #24
 8000b30:	b299      	uxth	r1, r3
 8000b32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b36:	2218      	movs	r2, #24
 8000b38:	f004 fb51 	bl	80051de <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x,y+ygrid,ygrid, LCD_COLOR_WHITE);
 8000b3c:	88f8      	ldrh	r0, [r7, #6]
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	3318      	adds	r3, #24
 8000b42:	b299      	uxth	r1, r3
 8000b44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b48:	2218      	movs	r2, #24
 8000b4a:	f004 fb21 	bl	8005190 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000b4e:	88f8      	ldrh	r0, [r7, #6]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	3318      	adds	r3, #24
 8000b54:	b299      	uxth	r1, r3
 8000b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b5a:	2218      	movs	r2, #24
 8000b5c:	f004 fb3f 	bl	80051de <LCD_Draw_Horizontal_Line>
	//update grid
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <spawn_z>:
void spawn_z(int16_t x, int16_t y, uint16_t color)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	460b      	mov	r3, r1
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	807b      	strh	r3, [r7, #2]
    // Block 1 & 2
    for (uint16_t i = x; i < x + 2 * xgrid; i++) {
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	81fb      	strh	r3, [r7, #14]
 8000b7e:	e008      	b.n	8000b92 <spawn_z+0x2a>
        LCD_Draw_Vertical_Line(i, y, ygrid, color); // Top horizontal line
 8000b80:	88b9      	ldrh	r1, [r7, #4]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	89f8      	ldrh	r0, [r7, #14]
 8000b86:	2218      	movs	r2, #24
 8000b88:	f004 fb02 	bl	8005190 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x; i < x + 2 * xgrid; i++) {
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b96:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	daef      	bge.n	8000b80 <spawn_z+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000ba0:	88f8      	ldrh	r0, [r7, #6]
 8000ba2:	88b9      	ldrh	r1, [r7, #4]
 8000ba4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ba8:	2218      	movs	r2, #24
 8000baa:	f004 faf1 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000bae:	88f8      	ldrh	r0, [r7, #6]
 8000bb0:	88b9      	ldrh	r1, [r7, #4]
 8000bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bb6:	2218      	movs	r2, #24
 8000bb8:	f004 fb11 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	3318      	adds	r3, #24
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	88b9      	ldrh	r1, [r7, #4]
 8000bc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bc8:	2218      	movs	r2, #24
 8000bca:	f004 fae1 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	3318      	adds	r3, #24
 8000bd2:	b298      	uxth	r0, r3
 8000bd4:	88b9      	ldrh	r1, [r7, #4]
 8000bd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bda:	2218      	movs	r2, #24
 8000bdc:	f004 faff 	bl	80051de <LCD_Draw_Horizontal_Line>

    // Block 3 & 4
    for (uint16_t i = x + xgrid; i < x + 3 * xgrid; i++) {
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	3318      	adds	r3, #24
 8000be4:	81bb      	strh	r3, [r7, #12]
 8000be6:	e00a      	b.n	8000bfe <spawn_z+0x96>
        LCD_Draw_Vertical_Line(i, y + ygrid, ygrid, color); // Bottom horizontal line
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	3318      	adds	r3, #24
 8000bec:	b299      	uxth	r1, r3
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	89b8      	ldrh	r0, [r7, #12]
 8000bf2:	2218      	movs	r2, #24
 8000bf4:	f004 facc 	bl	8005190 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x + xgrid; i < x + 3 * xgrid; i++) {
 8000bf8:	89bb      	ldrh	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	81bb      	strh	r3, [r7, #12]
 8000bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c02:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000c06:	89bb      	ldrh	r3, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	daed      	bge.n	8000be8 <spawn_z+0x80>
    }
    LCD_Draw_Vertical_Line(x + xgrid, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	b298      	uxth	r0, r3
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	3318      	adds	r3, #24
 8000c16:	b299      	uxth	r1, r3
 8000c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c1c:	2218      	movs	r2, #24
 8000c1e:	f004 fab7 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	3318      	adds	r3, #24
 8000c26:	b298      	uxth	r0, r3
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	3318      	adds	r3, #24
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c32:	2218      	movs	r2, #24
 8000c34:	f004 fad3 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + 2 * xgrid, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	3330      	adds	r3, #48	@ 0x30
 8000c3c:	b298      	uxth	r0, r3
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	3318      	adds	r3, #24
 8000c42:	b299      	uxth	r1, r3
 8000c44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c48:	2218      	movs	r2, #24
 8000c4a:	f004 faa1 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + 2 * xgrid, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	3330      	adds	r3, #48	@ 0x30
 8000c52:	b298      	uxth	r0, r3
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	3318      	adds	r3, #24
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5e:	2218      	movs	r2, #24
 8000c60:	f004 fabd 	bl	80051de <LCD_Draw_Horizontal_Line>
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <spawn_l>:
void spawn_l(int16_t x, int16_t y, uint16_t color)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	460b      	mov	r3, r1
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	807b      	strh	r3, [r7, #2]
    // Block 1 & 2 (Vertical line)
    for (uint16_t i = y; i < y + 3 * ygrid; i++) {
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	81fb      	strh	r3, [r7, #14]
 8000c82:	e008      	b.n	8000c96 <spawn_l+0x2a>
        LCD_Draw_Horizontal_Line(x, i, xgrid, color); // Vertical part of the "J"
 8000c84:	88f8      	ldrh	r0, [r7, #6]
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	89f9      	ldrh	r1, [r7, #14]
 8000c8a:	2218      	movs	r2, #24
 8000c8c:	f004 faa7 	bl	80051de <LCD_Draw_Horizontal_Line>
    for (uint16_t i = y; i < y + 3 * ygrid; i++) {
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	3301      	adds	r3, #1
 8000c94:	81fb      	strh	r3, [r7, #14]
 8000c96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c9a:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	daef      	bge.n	8000c84 <spawn_l+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000ca4:	88f8      	ldrh	r0, [r7, #6]
 8000ca6:	88b9      	ldrh	r1, [r7, #4]
 8000ca8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cac:	2218      	movs	r2, #24
 8000cae:	f004 fa6f 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(x, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	b299      	uxth	r1, r3
 8000cba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cbe:	2218      	movs	r2, #24
 8000cc0:	f004 fa66 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000cc4:	88f8      	ldrh	r0, [r7, #6]
 8000cc6:	88b9      	ldrh	r1, [r7, #4]
 8000cc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ccc:	2218      	movs	r2, #24
 8000cce:	f004 fa86 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000cd2:	88f8      	ldrh	r0, [r7, #6]
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	3318      	adds	r3, #24
 8000cd8:	b299      	uxth	r1, r3
 8000cda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cde:	2218      	movs	r2, #24
 8000ce0:	f004 fa7d 	bl	80051de <LCD_Draw_Horizontal_Line>

    // Block 3 (Bottom horizontal line, to the left)
    for (uint16_t i = x; i < x + 2*xgrid; i++) {
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	81bb      	strh	r3, [r7, #12]
 8000ce8:	e00a      	b.n	8000d00 <spawn_l+0x94>
        LCD_Draw_Vertical_Line(i, y + 2 * ygrid, ygrid, color); // Bottom part of the "J"
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	3330      	adds	r3, #48	@ 0x30
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	89b8      	ldrh	r0, [r7, #12]
 8000cf4:	2218      	movs	r2, #24
 8000cf6:	f004 fa4b 	bl	8005190 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x; i < x + 2*xgrid; i++) {
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	81bb      	strh	r3, [r7, #12]
 8000d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d04:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000d08:	89bb      	ldrh	r3, [r7, #12]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	daed      	bge.n	8000cea <spawn_l+0x7e>
    }
    LCD_Draw_Vertical_Line(x - xgrid, y + 2 * ygrid, ygrid, LCD_COLOR_WHITE);
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	3b18      	subs	r3, #24
 8000d12:	b298      	uxth	r0, r3
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	3330      	adds	r3, #48	@ 0x30
 8000d18:	b299      	uxth	r1, r3
 8000d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d1e:	2218      	movs	r2, #24
 8000d20:	f004 fa36 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x - xgrid, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	3b18      	subs	r3, #24
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	3330      	adds	r3, #48	@ 0x30
 8000d2e:	b299      	uxth	r1, r3
 8000d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d34:	2218      	movs	r2, #24
 8000d36:	f004 fa52 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + 2 * ygrid, 2*xgrid, LCD_COLOR_WHITE);
 8000d3a:	88f8      	ldrh	r0, [r7, #6]
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	3330      	adds	r3, #48	@ 0x30
 8000d40:	b299      	uxth	r1, r3
 8000d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d46:	2230      	movs	r2, #48	@ 0x30
 8000d48:	f004 fa49 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x+xgrid, y+2*ygrid, xgrid, LCD_COLOR_WHITE);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	3318      	adds	r3, #24
 8000d50:	b298      	uxth	r0, r3
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	3330      	adds	r3, #48	@ 0x30
 8000d56:	b299      	uxth	r1, r3
 8000d58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d5c:	2218      	movs	r2, #24
 8000d5e:	f004 fa17 	bl	8005190 <LCD_Draw_Vertical_Line>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <spawn_j>:
void spawn_j(int16_t x, int16_t y, uint16_t color)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	80fb      	strh	r3, [r7, #6]
 8000d74:	460b      	mov	r3, r1
 8000d76:	80bb      	strh	r3, [r7, #4]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	807b      	strh	r3, [r7, #2]
    // Block 1 & 2 (Vertical line)
    for (uint16_t i = y; i < y + 3 * ygrid; i++) {
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	81fb      	strh	r3, [r7, #14]
 8000d80:	e008      	b.n	8000d94 <spawn_j+0x2a>
        LCD_Draw_Horizontal_Line(x, i, xgrid, color); // Vertical part of the "J"
 8000d82:	88f8      	ldrh	r0, [r7, #6]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	89f9      	ldrh	r1, [r7, #14]
 8000d88:	2218      	movs	r2, #24
 8000d8a:	f004 fa28 	bl	80051de <LCD_Draw_Horizontal_Line>
    for (uint16_t i = y; i < y + 3 * ygrid; i++) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	3301      	adds	r3, #1
 8000d92:	81fb      	strh	r3, [r7, #14]
 8000d94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d98:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	daef      	bge.n	8000d82 <spawn_j+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000da2:	88f8      	ldrh	r0, [r7, #6]
 8000da4:	88b9      	ldrh	r1, [r7, #4]
 8000da6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000daa:	2218      	movs	r2, #24
 8000dac:	f004 f9f0 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(x, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000db0:	88f8      	ldrh	r0, [r7, #6]
 8000db2:	88bb      	ldrh	r3, [r7, #4]
 8000db4:	3318      	adds	r3, #24
 8000db6:	b299      	uxth	r1, r3
 8000db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dbc:	2218      	movs	r2, #24
 8000dbe:	f004 f9e7 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000dc2:	88f8      	ldrh	r0, [r7, #6]
 8000dc4:	88b9      	ldrh	r1, [r7, #4]
 8000dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dca:	2218      	movs	r2, #24
 8000dcc:	f004 fa07 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000dd0:	88f8      	ldrh	r0, [r7, #6]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ddc:	2218      	movs	r2, #24
 8000dde:	f004 f9fe 	bl	80051de <LCD_Draw_Horizontal_Line>

    // Block 3 (Bottom horizontal line, to the left)
    for (uint16_t i = x - xgrid; i < x; i++) {
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	3b18      	subs	r3, #24
 8000de6:	81bb      	strh	r3, [r7, #12]
 8000de8:	e00a      	b.n	8000e00 <spawn_j+0x96>
        LCD_Draw_Vertical_Line(i, y + 2 * ygrid, ygrid, color); // Bottom part of the "J"
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	3330      	adds	r3, #48	@ 0x30
 8000dee:	b299      	uxth	r1, r3
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	89b8      	ldrh	r0, [r7, #12]
 8000df4:	2218      	movs	r2, #24
 8000df6:	f004 f9cb 	bl	8005190 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x - xgrid; i < x; i++) {
 8000dfa:	89bb      	ldrh	r3, [r7, #12]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	81bb      	strh	r3, [r7, #12]
 8000e00:	89ba      	ldrh	r2, [r7, #12]
 8000e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbef      	blt.n	8000dea <spawn_j+0x80>
    }
    LCD_Draw_Vertical_Line(x - xgrid, y + 2 * ygrid, ygrid, LCD_COLOR_WHITE);
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	3b18      	subs	r3, #24
 8000e0e:	b298      	uxth	r0, r3
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	3330      	adds	r3, #48	@ 0x30
 8000e14:	b299      	uxth	r1, r3
 8000e16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e1a:	2218      	movs	r2, #24
 8000e1c:	f004 f9b8 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x - xgrid, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	3b18      	subs	r3, #24
 8000e24:	b298      	uxth	r0, r3
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	3330      	adds	r3, #48	@ 0x30
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e30:	2218      	movs	r2, #24
 8000e32:	f004 f9d4 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000e36:	88f8      	ldrh	r0, [r7, #6]
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	3330      	adds	r3, #48	@ 0x30
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e42:	2218      	movs	r2, #24
 8000e44:	f004 f9cb 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x, y+2*ygrid, xgrid, LCD_COLOR_WHITE);
 8000e48:	88f8      	ldrh	r0, [r7, #6]
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	3330      	adds	r3, #48	@ 0x30
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e54:	2218      	movs	r2, #24
 8000e56:	f004 f99b 	bl	8005190 <LCD_Draw_Vertical_Line>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <spawn_t>:
void spawn_t(int16_t x, int16_t y, uint16_t color)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	80fb      	strh	r3, [r7, #6]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	80bb      	strh	r3, [r7, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	807b      	strh	r3, [r7, #2]
    // Block 1, 2, and 3 (Top horizontal line)
    for (uint16_t i = x; i < x + 3 * xgrid; i++) {
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	e008      	b.n	8000e8c <spawn_t+0x2a>
        LCD_Draw_Vertical_Line(i, y, ygrid, color); // Top horizontal line
 8000e7a:	88b9      	ldrh	r1, [r7, #4]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	89f8      	ldrh	r0, [r7, #14]
 8000e80:	2218      	movs	r2, #24
 8000e82:	f004 f985 	bl	8005190 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x; i < x + 3 * xgrid; i++) {
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	81fb      	strh	r3, [r7, #14]
 8000e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e90:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	daef      	bge.n	8000e7a <spawn_t+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000e9a:	88f8      	ldrh	r0, [r7, #6]
 8000e9c:	88b9      	ldrh	r1, [r7, #4]
 8000e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ea2:	2218      	movs	r2, #24
 8000ea4:	f004 f974 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000ea8:	88f8      	ldrh	r0, [r7, #6]
 8000eaa:	88b9      	ldrh	r1, [r7, #4]
 8000eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eb0:	2218      	movs	r2, #24
 8000eb2:	f004 f994 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	3318      	adds	r3, #24
 8000eba:	b298      	uxth	r0, r3
 8000ebc:	88b9      	ldrh	r1, [r7, #4]
 8000ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec2:	2218      	movs	r2, #24
 8000ec4:	f004 f964 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	3318      	adds	r3, #24
 8000ecc:	b298      	uxth	r0, r3
 8000ece:	88b9      	ldrh	r1, [r7, #4]
 8000ed0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	f004 f982 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + 2 * xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	3330      	adds	r3, #48	@ 0x30
 8000ede:	b298      	uxth	r0, r3
 8000ee0:	88b9      	ldrh	r1, [r7, #4]
 8000ee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ee6:	2218      	movs	r2, #24
 8000ee8:	f004 f952 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + 2 * xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3330      	adds	r3, #48	@ 0x30
 8000ef0:	b298      	uxth	r0, r3
 8000ef2:	88b9      	ldrh	r1, [r7, #4]
 8000ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef8:	2218      	movs	r2, #24
 8000efa:	f004 f970 	bl	80051de <LCD_Draw_Horizontal_Line>

    // Block 4 (Vertical middle block)
    for (uint16_t i = y+ygrid; i < y + 2*ygrid; i++) {
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	3318      	adds	r3, #24
 8000f02:	81bb      	strh	r3, [r7, #12]
 8000f04:	e00a      	b.n	8000f1c <spawn_t+0xba>
        LCD_Draw_Horizontal_Line(x + xgrid, i, xgrid, color); // Vertical middle block
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	3318      	adds	r3, #24
 8000f0a:	b298      	uxth	r0, r3
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	89b9      	ldrh	r1, [r7, #12]
 8000f10:	2218      	movs	r2, #24
 8000f12:	f004 f964 	bl	80051de <LCD_Draw_Horizontal_Line>
    for (uint16_t i = y+ygrid; i < y + 2*ygrid; i++) {
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	81bb      	strh	r3, [r7, #12]
 8000f1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f20:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000f24:	89bb      	ldrh	r3, [r7, #12]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	daed      	bge.n	8000f06 <spawn_t+0xa4>
    }
    LCD_Draw_Vertical_Line(x + xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	88b9      	ldrh	r1, [r7, #4]
 8000f32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f36:	2218      	movs	r2, #24
 8000f38:	f004 f92a 	bl	8005190 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	3318      	adds	r3, #24
 8000f40:	b298      	uxth	r0, r3
 8000f42:	88b9      	ldrh	r1, [r7, #4]
 8000f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f48:	2218      	movs	r2, #24
 8000f4a:	f004 f948 	bl	80051de <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	3318      	adds	r3, #24
 8000f52:	b298      	uxth	r0, r3
 8000f54:	88bb      	ldrh	r3, [r7, #4]
 8000f56:	3318      	adds	r3, #24
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f5e:	2218      	movs	r2, #24
 8000f60:	f004 f93d 	bl	80051de <LCD_Draw_Horizontal_Line>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <spawn_block>:

uint16_t block =0;
void spawn_block()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	block = RNG_getVal() % 7;
 8000f70:	f004 fb00 	bl	8005574 <RNG_getVal>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b83      	ldr	r3, [pc, #524]	@ (8001184 <spawn_block+0x218>)
 8000f78:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7c:	1ad1      	subs	r1, r2, r3
 8000f7e:	0849      	lsrs	r1, r1, #1
 8000f80:	440b      	add	r3, r1
 8000f82:	0899      	lsrs	r1, r3, #2
 8000f84:	460b      	mov	r3, r1
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	1a5b      	subs	r3, r3, r1
 8000f8a:	1ad1      	subs	r1, r2, r3
 8000f8c:	b28a      	uxth	r2, r1
 8000f8e:	4b7e      	ldr	r3, [pc, #504]	@ (8001188 <spawn_block+0x21c>)
 8000f90:	801a      	strh	r2, [r3, #0]
	//block = 6; //testing for rotations
	if(block == square)
 8000f92:	4b7d      	ldr	r3, [pc, #500]	@ (8001188 <spawn_block+0x21c>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d14e      	bne.n	8001038 <spawn_block+0xcc>
	{
		spawn_square(xstart2, 0, LCD_COLOR_YELLOW);
 8000f9a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2060      	movs	r0, #96	@ 0x60
 8000fa2:	f7ff fc6e 	bl	8000882 <spawn_square>
		//update grid
		x1_pos =4;
 8000fa6:	4b79      	ldr	r3, [pc, #484]	@ (800118c <spawn_block+0x220>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 8000fac:	4b78      	ldr	r3, [pc, #480]	@ (8001190 <spawn_block+0x224>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
		x2_pos=5;
 8000fb2:	4b78      	ldr	r3, [pc, #480]	@ (8001194 <spawn_block+0x228>)
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	801a      	strh	r2, [r3, #0]
		y2_pos=0;
 8000fb8:	4b77      	ldr	r3, [pc, #476]	@ (8001198 <spawn_block+0x22c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	801a      	strh	r2, [r3, #0]
		x3_pos=4;
 8000fbe:	4b77      	ldr	r3, [pc, #476]	@ (800119c <spawn_block+0x230>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	801a      	strh	r2, [r3, #0]
		y3_pos=1;
 8000fc4:	4b76      	ldr	r3, [pc, #472]	@ (80011a0 <spawn_block+0x234>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	801a      	strh	r2, [r3, #0]
		x4_pos=5;
 8000fca:	4b76      	ldr	r3, [pc, #472]	@ (80011a4 <spawn_block+0x238>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	801a      	strh	r2, [r3, #0]
		y4_pos=1;
 8000fd0:	4b75      	ldr	r3, [pc, #468]	@ (80011a8 <spawn_block+0x23c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	801a      	strh	r2, [r3, #0]

		game[y1_pos][x1_pos] = 1;
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001190 <spawn_block+0x224>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800118c <spawn_block+0x220>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4a72      	ldr	r2, [pc, #456]	@ (80011ac <spawn_block+0x240>)
 8000fe4:	00c3      	lsls	r3, r0, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 8000fee:	4b6a      	ldr	r3, [pc, #424]	@ (8001198 <spawn_block+0x22c>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	4b67      	ldr	r3, [pc, #412]	@ (8001194 <spawn_block+0x228>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4a6c      	ldr	r2, [pc, #432]	@ (80011ac <spawn_block+0x240>)
 8000ffc:	00c3      	lsls	r3, r0, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	2101      	movs	r1, #1
 8001002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 8001006:	4b66      	ldr	r3, [pc, #408]	@ (80011a0 <spawn_block+0x234>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	4b63      	ldr	r3, [pc, #396]	@ (800119c <spawn_block+0x230>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4a66      	ldr	r2, [pc, #408]	@ (80011ac <spawn_block+0x240>)
 8001014:	00c3      	lsls	r3, r0, #3
 8001016:	440b      	add	r3, r1
 8001018:	2101      	movs	r1, #1
 800101a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 800101e:	4b62      	ldr	r3, [pc, #392]	@ (80011a8 <spawn_block+0x23c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	4b5f      	ldr	r3, [pc, #380]	@ (80011a4 <spawn_block+0x238>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4a60      	ldr	r2, [pc, #384]	@ (80011ac <spawn_block+0x240>)
 800102c:	00c3      	lsls	r3, r0, #3
 800102e:	440b      	add	r3, r1
 8001030:	2101      	movs	r1, #1
 8001032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
		spawn_l(xstart2, 0, LCD_COLOR_CYAN);
	}
}
 8001036:	e20d      	b.n	8001454 <spawn_block+0x4e8>
	else if (block == rect)
 8001038:	4b53      	ldr	r3, [pc, #332]	@ (8001188 <spawn_block+0x21c>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d14d      	bne.n	80010dc <spawn_block+0x170>
		spawn_rect(xstart2, 0, LCD_COLOR_BLUE);
 8001040:	221f      	movs	r2, #31
 8001042:	2100      	movs	r1, #0
 8001044:	2060      	movs	r0, #96	@ 0x60
 8001046:	f7ff fcc3 	bl	80009d0 <spawn_rect>
		x1_pos =4;
 800104a:	4b50      	ldr	r3, [pc, #320]	@ (800118c <spawn_block+0x220>)
 800104c:	2204      	movs	r2, #4
 800104e:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 8001050:	4b4f      	ldr	r3, [pc, #316]	@ (8001190 <spawn_block+0x224>)
 8001052:	2200      	movs	r2, #0
 8001054:	801a      	strh	r2, [r3, #0]
		x2_pos=4;
 8001056:	4b4f      	ldr	r3, [pc, #316]	@ (8001194 <spawn_block+0x228>)
 8001058:	2204      	movs	r2, #4
 800105a:	801a      	strh	r2, [r3, #0]
		y2_pos=1;
 800105c:	4b4e      	ldr	r3, [pc, #312]	@ (8001198 <spawn_block+0x22c>)
 800105e:	2201      	movs	r2, #1
 8001060:	801a      	strh	r2, [r3, #0]
		x3_pos=4;
 8001062:	4b4e      	ldr	r3, [pc, #312]	@ (800119c <spawn_block+0x230>)
 8001064:	2204      	movs	r2, #4
 8001066:	801a      	strh	r2, [r3, #0]
		y3_pos=2;
 8001068:	4b4d      	ldr	r3, [pc, #308]	@ (80011a0 <spawn_block+0x234>)
 800106a:	2202      	movs	r2, #2
 800106c:	801a      	strh	r2, [r3, #0]
		x4_pos=4;
 800106e:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <spawn_block+0x238>)
 8001070:	2204      	movs	r2, #4
 8001072:	801a      	strh	r2, [r3, #0]
		y4_pos=3;
 8001074:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <spawn_block+0x23c>)
 8001076:	2203      	movs	r2, #3
 8001078:	801a      	strh	r2, [r3, #0]
		game[y1_pos][x1_pos] = 1;
 800107a:	4b45      	ldr	r3, [pc, #276]	@ (8001190 <spawn_block+0x224>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	4b42      	ldr	r3, [pc, #264]	@ (800118c <spawn_block+0x220>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	4a49      	ldr	r2, [pc, #292]	@ (80011ac <spawn_block+0x240>)
 8001088:	00c3      	lsls	r3, r0, #3
 800108a:	440b      	add	r3, r1
 800108c:	2101      	movs	r1, #1
 800108e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <spawn_block+0x22c>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	4b3e      	ldr	r3, [pc, #248]	@ (8001194 <spawn_block+0x228>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	4a43      	ldr	r2, [pc, #268]	@ (80011ac <spawn_block+0x240>)
 80010a0:	00c3      	lsls	r3, r0, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	2101      	movs	r1, #1
 80010a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <spawn_block+0x234>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	4b3a      	ldr	r3, [pc, #232]	@ (800119c <spawn_block+0x230>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4a3d      	ldr	r2, [pc, #244]	@ (80011ac <spawn_block+0x240>)
 80010b8:	00c3      	lsls	r3, r0, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	2101      	movs	r1, #1
 80010be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <spawn_block+0x23c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <spawn_block+0x238>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4a37      	ldr	r2, [pc, #220]	@ (80011ac <spawn_block+0x240>)
 80010d0:	00c3      	lsls	r3, r0, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	2101      	movs	r1, #1
 80010d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010da:	e1bb      	b.n	8001454 <spawn_block+0x4e8>
	else if (block == s_shape)
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <spawn_block+0x21c>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d165      	bne.n	80011b0 <spawn_block+0x244>
		spawn_s(xstart2, 0, LCD_COLOR_RED);
 80010e4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80010e8:	2100      	movs	r1, #0
 80010ea:	2060      	movs	r0, #96	@ 0x60
 80010ec:	f7ff fcb9 	bl	8000a62 <spawn_s>
		x1_pos =4;
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <spawn_block+0x220>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <spawn_block+0x224>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	801a      	strh	r2, [r3, #0]
		x2_pos=5;
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <spawn_block+0x228>)
 80010fe:	2205      	movs	r2, #5
 8001100:	801a      	strh	r2, [r3, #0]
		y2_pos=0;
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <spawn_block+0x22c>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
		x3_pos=4;
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <spawn_block+0x230>)
 800110a:	2204      	movs	r2, #4
 800110c:	801a      	strh	r2, [r3, #0]
		y3_pos=1;
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <spawn_block+0x234>)
 8001110:	2201      	movs	r2, #1
 8001112:	801a      	strh	r2, [r3, #0]
		x4_pos=3;
 8001114:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <spawn_block+0x238>)
 8001116:	2203      	movs	r2, #3
 8001118:	801a      	strh	r2, [r3, #0]
		y4_pos=1;
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <spawn_block+0x23c>)
 800111c:	2201      	movs	r2, #1
 800111e:	801a      	strh	r2, [r3, #0]
		game[y1_pos][x1_pos] = 1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <spawn_block+0x224>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <spawn_block+0x220>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <spawn_block+0x240>)
 800112e:	00c3      	lsls	r3, r0, #3
 8001130:	440b      	add	r3, r1
 8001132:	2101      	movs	r1, #1
 8001134:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <spawn_block+0x22c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <spawn_block+0x228>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	4a19      	ldr	r2, [pc, #100]	@ (80011ac <spawn_block+0x240>)
 8001146:	00c3      	lsls	r3, r0, #3
 8001148:	440b      	add	r3, r1
 800114a:	2101      	movs	r1, #1
 800114c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <spawn_block+0x234>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <spawn_block+0x230>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <spawn_block+0x240>)
 800115e:	00c3      	lsls	r3, r0, #3
 8001160:	440b      	add	r3, r1
 8001162:	2101      	movs	r1, #1
 8001164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <spawn_block+0x23c>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <spawn_block+0x238>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <spawn_block+0x240>)
 8001176:	00c3      	lsls	r3, r0, #3
 8001178:	440b      	add	r3, r1
 800117a:	2101      	movs	r1, #1
 800117c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001180:	e168      	b.n	8001454 <spawn_block+0x4e8>
 8001182:	bf00      	nop
 8001184:	24924925 	.word	0x24924925
 8001188:	20000344 	.word	0x20000344
 800118c:	20000334 	.word	0x20000334
 8001190:	20000336 	.word	0x20000336
 8001194:	20000338 	.word	0x20000338
 8001198:	2000033a 	.word	0x2000033a
 800119c:	2000033c 	.word	0x2000033c
 80011a0:	2000033e 	.word	0x2000033e
 80011a4:	20000340 	.word	0x20000340
 80011a8:	20000342 	.word	0x20000342
 80011ac:	200001f4 	.word	0x200001f4
	else if (block == z_shape)
 80011b0:	4ba9      	ldr	r3, [pc, #676]	@ (8001458 <spawn_block+0x4ec>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d14e      	bne.n	8001256 <spawn_block+0x2ea>
		spawn_z(xstart2, 0, LCD_COLOR_GREEN);
 80011b8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80011bc:	2100      	movs	r1, #0
 80011be:	2060      	movs	r0, #96	@ 0x60
 80011c0:	f7ff fcd2 	bl	8000b68 <spawn_z>
		x1_pos =4;
 80011c4:	4ba5      	ldr	r3, [pc, #660]	@ (800145c <spawn_block+0x4f0>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 80011ca:	4ba5      	ldr	r3, [pc, #660]	@ (8001460 <spawn_block+0x4f4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	801a      	strh	r2, [r3, #0]
		x2_pos=5;
 80011d0:	4ba4      	ldr	r3, [pc, #656]	@ (8001464 <spawn_block+0x4f8>)
 80011d2:	2205      	movs	r2, #5
 80011d4:	801a      	strh	r2, [r3, #0]
		y2_pos=0;
 80011d6:	4ba4      	ldr	r3, [pc, #656]	@ (8001468 <spawn_block+0x4fc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	801a      	strh	r2, [r3, #0]
		x3_pos=5;
 80011dc:	4ba3      	ldr	r3, [pc, #652]	@ (800146c <spawn_block+0x500>)
 80011de:	2205      	movs	r2, #5
 80011e0:	801a      	strh	r2, [r3, #0]
		y3_pos=1;
 80011e2:	4ba3      	ldr	r3, [pc, #652]	@ (8001470 <spawn_block+0x504>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	801a      	strh	r2, [r3, #0]
		x4_pos=6;
 80011e8:	4ba2      	ldr	r3, [pc, #648]	@ (8001474 <spawn_block+0x508>)
 80011ea:	2206      	movs	r2, #6
 80011ec:	801a      	strh	r2, [r3, #0]
		y4_pos=1;
 80011ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001478 <spawn_block+0x50c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	801a      	strh	r2, [r3, #0]
		game[y1_pos][x1_pos] = 1;
 80011f4:	4b9a      	ldr	r3, [pc, #616]	@ (8001460 <spawn_block+0x4f4>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	4b98      	ldr	r3, [pc, #608]	@ (800145c <spawn_block+0x4f0>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4a9e      	ldr	r2, [pc, #632]	@ (800147c <spawn_block+0x510>)
 8001202:	00c3      	lsls	r3, r0, #3
 8001204:	440b      	add	r3, r1
 8001206:	2101      	movs	r1, #1
 8001208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 800120c:	4b96      	ldr	r3, [pc, #600]	@ (8001468 <spawn_block+0x4fc>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	4b94      	ldr	r3, [pc, #592]	@ (8001464 <spawn_block+0x4f8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4a98      	ldr	r2, [pc, #608]	@ (800147c <spawn_block+0x510>)
 800121a:	00c3      	lsls	r3, r0, #3
 800121c:	440b      	add	r3, r1
 800121e:	2101      	movs	r1, #1
 8001220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 8001224:	4b92      	ldr	r3, [pc, #584]	@ (8001470 <spawn_block+0x504>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	4b90      	ldr	r3, [pc, #576]	@ (800146c <spawn_block+0x500>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4a92      	ldr	r2, [pc, #584]	@ (800147c <spawn_block+0x510>)
 8001232:	00c3      	lsls	r3, r0, #3
 8001234:	440b      	add	r3, r1
 8001236:	2101      	movs	r1, #1
 8001238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 800123c:	4b8e      	ldr	r3, [pc, #568]	@ (8001478 <spawn_block+0x50c>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	4b8c      	ldr	r3, [pc, #560]	@ (8001474 <spawn_block+0x508>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	4a8c      	ldr	r2, [pc, #560]	@ (800147c <spawn_block+0x510>)
 800124a:	00c3      	lsls	r3, r0, #3
 800124c:	440b      	add	r3, r1
 800124e:	2101      	movs	r1, #1
 8001250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001254:	e0fe      	b.n	8001454 <spawn_block+0x4e8>
	else if (block == l_shape)
 8001256:	4b80      	ldr	r3, [pc, #512]	@ (8001458 <spawn_block+0x4ec>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	2b04      	cmp	r3, #4
 800125c:	d14e      	bne.n	80012fc <spawn_block+0x390>
		spawn_l(xstart2, 0, LCD_COLOR_CYAN);
 800125e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001262:	2100      	movs	r1, #0
 8001264:	2060      	movs	r0, #96	@ 0x60
 8001266:	f7ff fd01 	bl	8000c6c <spawn_l>
		x1_pos =4;
 800126a:	4b7c      	ldr	r3, [pc, #496]	@ (800145c <spawn_block+0x4f0>)
 800126c:	2204      	movs	r2, #4
 800126e:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 8001270:	4b7b      	ldr	r3, [pc, #492]	@ (8001460 <spawn_block+0x4f4>)
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
		x2_pos=4;
 8001276:	4b7b      	ldr	r3, [pc, #492]	@ (8001464 <spawn_block+0x4f8>)
 8001278:	2204      	movs	r2, #4
 800127a:	801a      	strh	r2, [r3, #0]
		y2_pos=1;
 800127c:	4b7a      	ldr	r3, [pc, #488]	@ (8001468 <spawn_block+0x4fc>)
 800127e:	2201      	movs	r2, #1
 8001280:	801a      	strh	r2, [r3, #0]
		x3_pos=4;
 8001282:	4b7a      	ldr	r3, [pc, #488]	@ (800146c <spawn_block+0x500>)
 8001284:	2204      	movs	r2, #4
 8001286:	801a      	strh	r2, [r3, #0]
		y3_pos=2;
 8001288:	4b79      	ldr	r3, [pc, #484]	@ (8001470 <spawn_block+0x504>)
 800128a:	2202      	movs	r2, #2
 800128c:	801a      	strh	r2, [r3, #0]
		x4_pos=5;
 800128e:	4b79      	ldr	r3, [pc, #484]	@ (8001474 <spawn_block+0x508>)
 8001290:	2205      	movs	r2, #5
 8001292:	801a      	strh	r2, [r3, #0]
		y4_pos=2;
 8001294:	4b78      	ldr	r3, [pc, #480]	@ (8001478 <spawn_block+0x50c>)
 8001296:	2202      	movs	r2, #2
 8001298:	801a      	strh	r2, [r3, #0]
		game[y1_pos][x1_pos] = 1;
 800129a:	4b71      	ldr	r3, [pc, #452]	@ (8001460 <spawn_block+0x4f4>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	4b6e      	ldr	r3, [pc, #440]	@ (800145c <spawn_block+0x4f0>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4a75      	ldr	r2, [pc, #468]	@ (800147c <spawn_block+0x510>)
 80012a8:	00c3      	lsls	r3, r0, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	2101      	movs	r1, #1
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 80012b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001468 <spawn_block+0x4fc>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001464 <spawn_block+0x4f8>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4a6f      	ldr	r2, [pc, #444]	@ (800147c <spawn_block+0x510>)
 80012c0:	00c3      	lsls	r3, r0, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	2101      	movs	r1, #1
 80012c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 80012ca:	4b69      	ldr	r3, [pc, #420]	@ (8001470 <spawn_block+0x504>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	4b66      	ldr	r3, [pc, #408]	@ (800146c <spawn_block+0x500>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4a69      	ldr	r2, [pc, #420]	@ (800147c <spawn_block+0x510>)
 80012d8:	00c3      	lsls	r3, r0, #3
 80012da:	440b      	add	r3, r1
 80012dc:	2101      	movs	r1, #1
 80012de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 80012e2:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <spawn_block+0x50c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <spawn_block+0x508>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4a63      	ldr	r2, [pc, #396]	@ (800147c <spawn_block+0x510>)
 80012f0:	00c3      	lsls	r3, r0, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	2101      	movs	r1, #1
 80012f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012fa:	e0ab      	b.n	8001454 <spawn_block+0x4e8>
	else if (block == j_shape)
 80012fc:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <spawn_block+0x4ec>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d14e      	bne.n	80013a2 <spawn_block+0x436>
		spawn_j(xstart2, 0, LCD_COLOR_MAGENTA);
 8001304:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001308:	2100      	movs	r1, #0
 800130a:	2060      	movs	r0, #96	@ 0x60
 800130c:	f7ff fd2d 	bl	8000d6a <spawn_j>
		x1_pos =4;
 8001310:	4b52      	ldr	r3, [pc, #328]	@ (800145c <spawn_block+0x4f0>)
 8001312:	2204      	movs	r2, #4
 8001314:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 8001316:	4b52      	ldr	r3, [pc, #328]	@ (8001460 <spawn_block+0x4f4>)
 8001318:	2200      	movs	r2, #0
 800131a:	801a      	strh	r2, [r3, #0]
		x2_pos=4;
 800131c:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <spawn_block+0x4f8>)
 800131e:	2204      	movs	r2, #4
 8001320:	801a      	strh	r2, [r3, #0]
		y2_pos=1;
 8001322:	4b51      	ldr	r3, [pc, #324]	@ (8001468 <spawn_block+0x4fc>)
 8001324:	2201      	movs	r2, #1
 8001326:	801a      	strh	r2, [r3, #0]
		x3_pos=4;
 8001328:	4b50      	ldr	r3, [pc, #320]	@ (800146c <spawn_block+0x500>)
 800132a:	2204      	movs	r2, #4
 800132c:	801a      	strh	r2, [r3, #0]
		y3_pos=2;
 800132e:	4b50      	ldr	r3, [pc, #320]	@ (8001470 <spawn_block+0x504>)
 8001330:	2202      	movs	r2, #2
 8001332:	801a      	strh	r2, [r3, #0]
		x4_pos=3;
 8001334:	4b4f      	ldr	r3, [pc, #316]	@ (8001474 <spawn_block+0x508>)
 8001336:	2203      	movs	r2, #3
 8001338:	801a      	strh	r2, [r3, #0]
		y4_pos=2;
 800133a:	4b4f      	ldr	r3, [pc, #316]	@ (8001478 <spawn_block+0x50c>)
 800133c:	2202      	movs	r2, #2
 800133e:	801a      	strh	r2, [r3, #0]
		game[y1_pos][x1_pos] = 1;
 8001340:	4b47      	ldr	r3, [pc, #284]	@ (8001460 <spawn_block+0x4f4>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	4b45      	ldr	r3, [pc, #276]	@ (800145c <spawn_block+0x4f0>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4a4b      	ldr	r2, [pc, #300]	@ (800147c <spawn_block+0x510>)
 800134e:	00c3      	lsls	r3, r0, #3
 8001350:	440b      	add	r3, r1
 8001352:	2101      	movs	r1, #1
 8001354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 8001358:	4b43      	ldr	r3, [pc, #268]	@ (8001468 <spawn_block+0x4fc>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <spawn_block+0x4f8>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	4a45      	ldr	r2, [pc, #276]	@ (800147c <spawn_block+0x510>)
 8001366:	00c3      	lsls	r3, r0, #3
 8001368:	440b      	add	r3, r1
 800136a:	2101      	movs	r1, #1
 800136c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 8001370:	4b3f      	ldr	r3, [pc, #252]	@ (8001470 <spawn_block+0x504>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <spawn_block+0x500>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <spawn_block+0x510>)
 800137e:	00c3      	lsls	r3, r0, #3
 8001380:	440b      	add	r3, r1
 8001382:	2101      	movs	r1, #1
 8001384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 8001388:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <spawn_block+0x50c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <spawn_block+0x508>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4a39      	ldr	r2, [pc, #228]	@ (800147c <spawn_block+0x510>)
 8001396:	00c3      	lsls	r3, r0, #3
 8001398:	440b      	add	r3, r1
 800139a:	2101      	movs	r1, #1
 800139c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80013a0:	e058      	b.n	8001454 <spawn_block+0x4e8>
	else if (block == t_shape)
 80013a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001458 <spawn_block+0x4ec>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d14e      	bne.n	8001448 <spawn_block+0x4dc>
		spawn_t(xstart2, 0, LCD_COLOR_BLUE2);
 80013aa:	f240 521f 	movw	r2, #1311	@ 0x51f
 80013ae:	2100      	movs	r1, #0
 80013b0:	2060      	movs	r0, #96	@ 0x60
 80013b2:	f7ff fd56 	bl	8000e62 <spawn_t>
		x1_pos =4;
 80013b6:	4b29      	ldr	r3, [pc, #164]	@ (800145c <spawn_block+0x4f0>)
 80013b8:	2204      	movs	r2, #4
 80013ba:	801a      	strh	r2, [r3, #0]
		y1_pos =0;
 80013bc:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <spawn_block+0x4f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	801a      	strh	r2, [r3, #0]
		x2_pos=5;
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <spawn_block+0x4f8>)
 80013c4:	2205      	movs	r2, #5
 80013c6:	801a      	strh	r2, [r3, #0]
		y2_pos=0;
 80013c8:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <spawn_block+0x4fc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
		x3_pos=6;
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <spawn_block+0x500>)
 80013d0:	2206      	movs	r2, #6
 80013d2:	801a      	strh	r2, [r3, #0]
		y3_pos=0;
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <spawn_block+0x504>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
		x4_pos=5;
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <spawn_block+0x508>)
 80013dc:	2205      	movs	r2, #5
 80013de:	801a      	strh	r2, [r3, #0]
		y4_pos=1;
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <spawn_block+0x50c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	801a      	strh	r2, [r3, #0]
		game[y1_pos][x1_pos] = 1;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <spawn_block+0x4f4>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <spawn_block+0x4f0>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4a22      	ldr	r2, [pc, #136]	@ (800147c <spawn_block+0x510>)
 80013f4:	00c3      	lsls	r3, r0, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	2101      	movs	r1, #1
 80013fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y2_pos][x2_pos] = 1;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <spawn_block+0x4fc>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <spawn_block+0x4f8>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <spawn_block+0x510>)
 800140c:	00c3      	lsls	r3, r0, #3
 800140e:	440b      	add	r3, r1
 8001410:	2101      	movs	r1, #1
 8001412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y3_pos][x3_pos] = 1;
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <spawn_block+0x504>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <spawn_block+0x500>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4a16      	ldr	r2, [pc, #88]	@ (800147c <spawn_block+0x510>)
 8001424:	00c3      	lsls	r3, r0, #3
 8001426:	440b      	add	r3, r1
 8001428:	2101      	movs	r1, #1
 800142a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		game[y4_pos][x4_pos] = 1;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <spawn_block+0x50c>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <spawn_block+0x508>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <spawn_block+0x510>)
 800143c:	00c3      	lsls	r3, r0, #3
 800143e:	440b      	add	r3, r1
 8001440:	2101      	movs	r1, #1
 8001442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001446:	e005      	b.n	8001454 <spawn_block+0x4e8>
		spawn_l(xstart2, 0, LCD_COLOR_CYAN);
 8001448:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800144c:	2100      	movs	r1, #0
 800144e:	2060      	movs	r0, #96	@ 0x60
 8001450:	f7ff fc0c 	bl	8000c6c <spawn_l>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000344 	.word	0x20000344
 800145c:	20000334 	.word	0x20000334
 8001460:	20000336 	.word	0x20000336
 8001464:	20000338 	.word	0x20000338
 8001468:	2000033a 	.word	0x2000033a
 800146c:	2000033c 	.word	0x2000033c
 8001470:	2000033e 	.word	0x2000033e
 8001474:	20000340 	.word	0x20000340
 8001478:	20000342 	.word	0x20000342
 800147c:	200001f4 	.word	0x200001f4

08001480 <block_checkCollision>:

uint16_t block_checkCollision()
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	if(board[y1_pos + 1][x1_pos] == 1 || y1_pos == 10)
 8001484:	4b28      	ldr	r3, [pc, #160]	@ (8001528 <block_checkCollision+0xa8>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a28      	ldr	r2, [pc, #160]	@ (800152c <block_checkCollision+0xac>)
 800148c:	8812      	ldrh	r2, [r2, #0]
 800148e:	4611      	mov	r1, r2
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <block_checkCollision+0xb0>)
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <block_checkCollision+0x26>
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <block_checkCollision+0xa8>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d101      	bne.n	80014aa <block_checkCollision+0x2a>
		return 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e039      	b.n	800151e <block_checkCollision+0x9e>
	else if(board[y2_pos + 1][x2_pos] == 1 || y2_pos == 10)
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <block_checkCollision+0xb4>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <block_checkCollision+0xb8>)
 80014b2:	8812      	ldrh	r2, [r2, #0]
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <block_checkCollision+0xb0>)
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d003      	beq.n	80014cc <block_checkCollision+0x4c>
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <block_checkCollision+0xb4>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	2b0a      	cmp	r3, #10
 80014ca:	d101      	bne.n	80014d0 <block_checkCollision+0x50>
		return 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e026      	b.n	800151e <block_checkCollision+0x9e>
	else if(board[y3_pos + 1][x3_pos] == 1 || y3_pos == 10)
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <block_checkCollision+0xbc>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <block_checkCollision+0xc0>)
 80014d8:	8812      	ldrh	r2, [r2, #0]
 80014da:	4611      	mov	r1, r2
 80014dc:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <block_checkCollision+0xb0>)
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <block_checkCollision+0x72>
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <block_checkCollision+0xbc>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2b0a      	cmp	r3, #10
 80014f0:	d101      	bne.n	80014f6 <block_checkCollision+0x76>
		return 1;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e013      	b.n	800151e <block_checkCollision+0x9e>
	else if(board[y4_pos + 1][x4_pos] == 1 || y4_pos == 10)
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <block_checkCollision+0xc4>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <block_checkCollision+0xc8>)
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	4611      	mov	r1, r2
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <block_checkCollision+0xb0>)
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d003      	beq.n	8001518 <block_checkCollision+0x98>
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <block_checkCollision+0xc4>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d101      	bne.n	800151c <block_checkCollision+0x9c>
		return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <block_checkCollision+0x9e>
	else return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000336 	.word	0x20000336
 800152c:	20000334 	.word	0x20000334
 8001530:	200000b4 	.word	0x200000b4
 8001534:	2000033a 	.word	0x2000033a
 8001538:	20000338 	.word	0x20000338
 800153c:	2000033e 	.word	0x2000033e
 8001540:	2000033c 	.word	0x2000033c
 8001544:	20000342 	.word	0x20000342
 8001548:	20000340 	.word	0x20000340

0800154c <block_place>:

void block_place()
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	af00      	add	r7, sp, #0
	board[y1_pos][x1_pos] = game[y1_pos][x1_pos];
 8001550:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <block_place+0xf4>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	461d      	mov	r5, r3
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <block_place+0xf8>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <block_place+0xf4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	461c      	mov	r4, r3
 8001562:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <block_place+0xf8>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	4a37      	ldr	r2, [pc, #220]	@ (8001648 <block_place+0xfc>)
 800156a:	00eb      	lsls	r3, r5, #3
 800156c:	440b      	add	r3, r1
 800156e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001572:	4936      	ldr	r1, [pc, #216]	@ (800164c <block_place+0x100>)
 8001574:	00e3      	lsls	r3, r4, #3
 8001576:	4403      	add	r3, r0
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	board[y2_pos][x2_pos] = game[y2_pos][x2_pos];
 800157c:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <block_place+0x104>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461d      	mov	r5, r3
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <block_place+0x108>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <block_place+0x104>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	461c      	mov	r4, r3
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <block_place+0x108>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	4a2c      	ldr	r2, [pc, #176]	@ (8001648 <block_place+0xfc>)
 8001596:	00eb      	lsls	r3, r5, #3
 8001598:	440b      	add	r3, r1
 800159a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800159e:	492b      	ldr	r1, [pc, #172]	@ (800164c <block_place+0x100>)
 80015a0:	00e3      	lsls	r3, r4, #3
 80015a2:	4403      	add	r3, r0
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	board[y3_pos][x3_pos] = game[y3_pos][x3_pos];
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <block_place+0x10c>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	461d      	mov	r5, r3
 80015ae:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <block_place+0x110>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <block_place+0x10c>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	461c      	mov	r4, r3
 80015ba:	4b28      	ldr	r3, [pc, #160]	@ (800165c <block_place+0x110>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <block_place+0xfc>)
 80015c2:	00eb      	lsls	r3, r5, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ca:	4920      	ldr	r1, [pc, #128]	@ (800164c <block_place+0x100>)
 80015cc:	00e3      	lsls	r3, r4, #3
 80015ce:	4403      	add	r3, r0
 80015d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	board[y4_pos][x1_pos] = game[y4_pos][x1_pos];
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <block_place+0x114>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	461d      	mov	r5, r3
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <block_place+0xf8>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <block_place+0x114>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	461c      	mov	r4, r3
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <block_place+0xf8>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <block_place+0xfc>)
 80015ee:	00eb      	lsls	r3, r5, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015f6:	4915      	ldr	r1, [pc, #84]	@ (800164c <block_place+0x100>)
 80015f8:	00e3      	lsls	r3, r4, #3
 80015fa:	4403      	add	r3, r0
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	x1_pos = 0; x2_pos = 0; x3_pos = 0; x4_pos = 0;
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <block_place+0xf8>)
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <block_place+0x108>)
 8001608:	2200      	movs	r2, #0
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <block_place+0x110>)
 800160e:	2200      	movs	r2, #0
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <block_place+0x118>)
 8001614:	2200      	movs	r2, #0
 8001616:	801a      	strh	r2, [r3, #0]
	y1_pos = 0; y2_pos = 0; y3_pos = 0; y4_pos = 0;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <block_place+0xf4>)
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <block_place+0x104>)
 8001620:	2200      	movs	r2, #0
 8001622:	801a      	strh	r2, [r3, #0]
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <block_place+0x10c>)
 8001626:	2200      	movs	r2, #0
 8001628:	801a      	strh	r2, [r3, #0]
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <block_place+0x114>)
 800162c:	2200      	movs	r2, #0
 800162e:	801a      	strh	r2, [r3, #0]
	rotation = 1;
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <block_place+0x11c>)
 8001632:	2201      	movs	r2, #1
 8001634:	801a      	strh	r2, [r3, #0]
	check_gameEnd();
 8001636:	f003 fb35 	bl	8004ca4 <check_gameEnd>
}
 800163a:	bf00      	nop
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	20000336 	.word	0x20000336
 8001644:	20000334 	.word	0x20000334
 8001648:	200001f4 	.word	0x200001f4
 800164c:	200000b4 	.word	0x200000b4
 8001650:	2000033a 	.word	0x2000033a
 8001654:	20000338 	.word	0x20000338
 8001658:	2000033e 	.word	0x2000033e
 800165c:	2000033c 	.word	0x2000033c
 8001660:	20000342 	.word	0x20000342
 8001664:	20000340 	.word	0x20000340
 8001668:	20000000 	.word	0x20000000

0800166c <block_fall>:

void block_fall()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b09c      	sub	sp, #112	@ 0x70
 8001670:	af00      	add	r7, sp, #0
	//dont ask why i did this i was discovering how extern properly worked lol
	extern uint16_t block;
	extern uint16_t y1_pos; extern uint16_t y2_pos; extern uint16_t y3_pos; extern uint16_t y4_pos;
	extern uint16_t x1_pos; extern uint16_t x2_pos; extern uint16_t x3_pos; extern uint16_t x4_pos;
	if(rotation > 4)
 8001672:	4b7d      	ldr	r3, [pc, #500]	@ (8001868 <block_fall+0x1fc>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	2b04      	cmp	r3, #4
 8001678:	d902      	bls.n	8001680 <block_fall+0x14>
		rotation = 1;
 800167a:	4b7b      	ldr	r3, [pc, #492]	@ (8001868 <block_fall+0x1fc>)
 800167c:	2201      	movs	r2, #1
 800167e:	801a      	strh	r2, [r3, #0]
	if(block==square)
 8001680:	4b7a      	ldr	r3, [pc, #488]	@ (800186c <block_fall+0x200>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 80e8 	bne.w	800185a <block_fall+0x1ee>
	{
		while(block_checkCollision() == 0)
 800168a:	e0dc      	b.n	8001846 <block_fall+0x1da>
		{
			HAL_Delay(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001690:	f005 f9a6 	bl	80069e0 <HAL_Delay>

			int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 8001694:	4b76      	ldr	r3, [pc, #472]	@ (8001870 <block_fall+0x204>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	0052      	lsls	r2, r2, #1
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	81fb      	strh	r3, [r7, #14]
 80016a4:	4b73      	ldr	r3, [pc, #460]	@ (8001874 <block_fall+0x208>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	81bb      	strh	r3, [r7, #12]
			int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 80016b4:	4b70      	ldr	r3, [pc, #448]	@ (8001878 <block_fall+0x20c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	817b      	strh	r3, [r7, #10]
 80016c4:	4b6d      	ldr	r3, [pc, #436]	@ (800187c <block_fall+0x210>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	0052      	lsls	r2, r2, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	813b      	strh	r3, [r7, #8]
			int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 80016d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001880 <block_fall+0x214>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	0052      	lsls	r2, r2, #1
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4b67      	ldr	r3, [pc, #412]	@ (8001884 <block_fall+0x218>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	0052      	lsls	r2, r2, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	80bb      	strh	r3, [r7, #4]
			int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 80016f4:	4b64      	ldr	r3, [pc, #400]	@ (8001888 <block_fall+0x21c>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	0052      	lsls	r2, r2, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	b29b      	uxth	r3, r3
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4b61      	ldr	r3, [pc, #388]	@ (800188c <block_fall+0x220>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	0052      	lsls	r2, r2, #1
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	b29b      	uxth	r3, r3
 8001712:	803b      	strh	r3, [r7, #0]
			spawn_square(x1,y1,LCD_COLOR_BLACK);
 8001714:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171c:	2200      	movs	r2, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f8af 	bl	8000882 <spawn_square>

			y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	3318      	adds	r3, #24
 8001728:	b29b      	uxth	r3, r3
 800172a:	80fb      	strh	r3, [r7, #6]
 800172c:	88bb      	ldrh	r3, [r7, #4]
 800172e:	3318      	adds	r3, #24
 8001730:	b29b      	uxth	r3, r3
 8001732:	80bb      	strh	r3, [r7, #4]
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	3318      	adds	r3, #24
 8001738:	b29b      	uxth	r3, r3
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	883b      	ldrh	r3, [r7, #0]
 800173e:	3318      	adds	r3, #24
 8001740:	b29b      	uxth	r3, r3
 8001742:	803b      	strh	r3, [r7, #0]
			spawn_square(x1,y1,LCD_COLOR_YELLOW);
 8001744:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800174c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f896 	bl	8000882 <spawn_square>
			game[y2_pos][x2_pos] = 0;
 8001756:	4b4b      	ldr	r3, [pc, #300]	@ (8001884 <block_fall+0x218>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	4b45      	ldr	r3, [pc, #276]	@ (8001874 <block_fall+0x208>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	4a4b      	ldr	r2, [pc, #300]	@ (8001890 <block_fall+0x224>)
 8001764:	00c3      	lsls	r3, r0, #3
 8001766:	440b      	add	r3, r1
 8001768:	2100      	movs	r1, #0
 800176a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[y2_pos][x2_pos] = 0;
 800176e:	4b45      	ldr	r3, [pc, #276]	@ (8001884 <block_fall+0x218>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <block_fall+0x208>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	4a45      	ldr	r2, [pc, #276]	@ (8001890 <block_fall+0x224>)
 800177c:	00c3      	lsls	r3, r0, #3
 800177e:	440b      	add	r3, r1
 8001780:	2100      	movs	r1, #0
 8001782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[y3_pos][x3_pos] = 0;
 8001786:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <block_fall+0x21c>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <block_fall+0x20c>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	4a3f      	ldr	r2, [pc, #252]	@ (8001890 <block_fall+0x224>)
 8001794:	00c3      	lsls	r3, r0, #3
 8001796:	440b      	add	r3, r1
 8001798:	2100      	movs	r1, #0
 800179a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[y4_pos][x4_pos] = 0;
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <block_fall+0x220>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	4b35      	ldr	r3, [pc, #212]	@ (800187c <block_fall+0x210>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4a39      	ldr	r2, [pc, #228]	@ (8001890 <block_fall+0x224>)
 80017ac:	00c3      	lsls	r3, r0, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	2100      	movs	r1, #0
 80017b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			game[y1_pos+1][x1_pos] =1;
 80017b6:	4b32      	ldr	r3, [pc, #200]	@ (8001880 <block_fall+0x214>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001870 <block_fall+0x204>)
 80017be:	8812      	ldrh	r2, [r2, #0]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4a33      	ldr	r2, [pc, #204]	@ (8001890 <block_fall+0x224>)
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	2101      	movs	r1, #1
 80017ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[y2_pos+1][x2_pos] =1;
 80017ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <block_fall+0x218>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a27      	ldr	r2, [pc, #156]	@ (8001874 <block_fall+0x208>)
 80017d6:	8812      	ldrh	r2, [r2, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	4a2d      	ldr	r2, [pc, #180]	@ (8001890 <block_fall+0x224>)
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	2101      	movs	r1, #1
 80017e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[y3_pos+1][x3_pos] =1;
 80017e6:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <block_fall+0x21c>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <block_fall+0x20c>)
 80017ee:	8812      	ldrh	r2, [r2, #0]
 80017f0:	4611      	mov	r1, r2
 80017f2:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <block_fall+0x224>)
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	2101      	movs	r1, #1
 80017fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[y4_pos+1][x4_pos] =1;
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <block_fall+0x220>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <block_fall+0x210>)
 8001806:	8812      	ldrh	r2, [r2, #0]
 8001808:	4611      	mov	r1, r2
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <block_fall+0x224>)
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	2101      	movs	r1, #1
 8001812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <block_fall+0x214>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <block_fall+0x214>)
 8001820:	801a      	strh	r2, [r3, #0]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <block_fall+0x218>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <block_fall+0x218>)
 800182c:	801a      	strh	r2, [r3, #0]
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <block_fall+0x21c>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <block_fall+0x21c>)
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <block_fall+0x220>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <block_fall+0x220>)
 8001844:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 8001846:	f7ff fe1b 	bl	8001480 <block_checkCollision>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f43f af1d 	beq.w	800168c <block_fall+0x20>
		}
		block_place();
 8001852:	f7ff fe7b 	bl	800154c <block_place>
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
			}
		}
		block_place();
	}
}
 8001856:	f001 bbc4 	b.w	8002fe2 <block_fall+0x1976>
	else if(block==rect)
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <block_fall+0x200>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	f040 81e5 	bne.w	8001c2e <block_fall+0x5c2>
		while(block_checkCollision() == 0)
 8001864:	e1d9      	b.n	8001c1a <block_fall+0x5ae>
 8001866:	bf00      	nop
 8001868:	20000000 	.word	0x20000000
 800186c:	20000344 	.word	0x20000344
 8001870:	20000334 	.word	0x20000334
 8001874:	20000338 	.word	0x20000338
 8001878:	2000033c 	.word	0x2000033c
 800187c:	20000340 	.word	0x20000340
 8001880:	20000336 	.word	0x20000336
 8001884:	2000033a 	.word	0x2000033a
 8001888:	2000033e 	.word	0x2000033e
 800188c:	20000342 	.word	0x20000342
 8001890:	200001f4 	.word	0x200001f4
			HAL_Delay(1000);
 8001894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001898:	f005 f8a2 	bl	80069e0 <HAL_Delay>
			if(rotation == 1 || rotation == 3)
 800189c:	4b70      	ldr	r3, [pc, #448]	@ (8001a60 <block_fall+0x3f4>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d004      	beq.n	80018ae <block_fall+0x242>
 80018a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a60 <block_fall+0x3f4>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f040 80ed 	bne.w	8001a88 <block_fall+0x41c>
				int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 80018ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001a64 <block_fall+0x3f8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	0052      	lsls	r2, r2, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	83fb      	strh	r3, [r7, #30]
 80018be:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <block_fall+0x3fc>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	0052      	lsls	r2, r2, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	83bb      	strh	r3, [r7, #28]
				int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 80018ce:	4b67      	ldr	r3, [pc, #412]	@ (8001a6c <block_fall+0x400>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	0052      	lsls	r2, r2, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	837b      	strh	r3, [r7, #26]
 80018de:	4b64      	ldr	r3, [pc, #400]	@ (8001a70 <block_fall+0x404>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	833b      	strh	r3, [r7, #24]
				int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 80018ee:	4b61      	ldr	r3, [pc, #388]	@ (8001a74 <block_fall+0x408>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	0052      	lsls	r2, r2, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	82fb      	strh	r3, [r7, #22]
 80018fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001a78 <block_fall+0x40c>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	0052      	lsls	r2, r2, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	b29b      	uxth	r3, r3
 800190c:	82bb      	strh	r3, [r7, #20]
				int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 800190e:	4b5b      	ldr	r3, [pc, #364]	@ (8001a7c <block_fall+0x410>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	0052      	lsls	r2, r2, #1
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	b29b      	uxth	r3, r3
 800191c:	827b      	strh	r3, [r7, #18]
 800191e:	4b58      	ldr	r3, [pc, #352]	@ (8001a80 <block_fall+0x414>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	0052      	lsls	r2, r2, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	b29b      	uxth	r3, r3
 800192c:	823b      	strh	r3, [r7, #16]
				spawn_rect(x1,y1,LCD_COLOR_BLACK);
 800192e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001932:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001936:	2200      	movs	r2, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f849 	bl	80009d0 <spawn_rect>
				y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 800193e:	8afb      	ldrh	r3, [r7, #22]
 8001940:	3318      	adds	r3, #24
 8001942:	b29b      	uxth	r3, r3
 8001944:	82fb      	strh	r3, [r7, #22]
 8001946:	8abb      	ldrh	r3, [r7, #20]
 8001948:	3318      	adds	r3, #24
 800194a:	b29b      	uxth	r3, r3
 800194c:	82bb      	strh	r3, [r7, #20]
 800194e:	8a7b      	ldrh	r3, [r7, #18]
 8001950:	3318      	adds	r3, #24
 8001952:	b29b      	uxth	r3, r3
 8001954:	827b      	strh	r3, [r7, #18]
 8001956:	8a3b      	ldrh	r3, [r7, #16]
 8001958:	3318      	adds	r3, #24
 800195a:	b29b      	uxth	r3, r3
 800195c:	823b      	strh	r3, [r7, #16]
				spawn_rect(x1,y1,LCD_COLOR_BLUE);
 800195e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001962:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001966:	221f      	movs	r2, #31
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f831 	bl	80009d0 <spawn_rect>
				game[y2_pos][x2_pos] = 0;
 800196e:	4b42      	ldr	r3, [pc, #264]	@ (8001a78 <block_fall+0x40c>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <block_fall+0x3fc>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	4a42      	ldr	r2, [pc, #264]	@ (8001a84 <block_fall+0x418>)
 800197c:	00c3      	lsls	r3, r0, #3
 800197e:	440b      	add	r3, r1
 8001980:	2100      	movs	r1, #0
 8001982:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <block_fall+0x40c>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <block_fall+0x3fc>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4a3c      	ldr	r2, [pc, #240]	@ (8001a84 <block_fall+0x418>)
 8001994:	00c3      	lsls	r3, r0, #3
 8001996:	440b      	add	r3, r1
 8001998:	2100      	movs	r1, #0
 800199a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <block_fall+0x410>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <block_fall+0x400>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4a36      	ldr	r2, [pc, #216]	@ (8001a84 <block_fall+0x418>)
 80019ac:	00c3      	lsls	r3, r0, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	2100      	movs	r1, #0
 80019b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 80019b6:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <block_fall+0x414>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a70 <block_fall+0x404>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4a30      	ldr	r2, [pc, #192]	@ (8001a84 <block_fall+0x418>)
 80019c4:	00c3      	lsls	r3, r0, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	2100      	movs	r1, #0
 80019ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <block_fall+0x408>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <block_fall+0x3f8>)
 80019d6:	8812      	ldrh	r2, [r2, #0]
 80019d8:	4611      	mov	r1, r2
 80019da:	4a2a      	ldr	r2, [pc, #168]	@ (8001a84 <block_fall+0x418>)
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	2101      	movs	r1, #1
 80019e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <block_fall+0x40c>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <block_fall+0x3fc>)
 80019ee:	8812      	ldrh	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4a24      	ldr	r2, [pc, #144]	@ (8001a84 <block_fall+0x418>)
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	2101      	movs	r1, #1
 80019fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <block_fall+0x410>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <block_fall+0x400>)
 8001a06:	8812      	ldrh	r2, [r2, #0]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <block_fall+0x418>)
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	2101      	movs	r1, #1
 8001a12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <block_fall+0x414>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <block_fall+0x404>)
 8001a1e:	8812      	ldrh	r2, [r2, #0]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <block_fall+0x418>)
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	2101      	movs	r1, #1
 8001a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <block_fall+0x408>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <block_fall+0x408>)
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <block_fall+0x40c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <block_fall+0x40c>)
 8001a44:	801a      	strh	r2, [r3, #0]
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <block_fall+0x410>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <block_fall+0x410>)
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <block_fall+0x414>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <block_fall+0x414>)
 8001a5c:	801a      	strh	r2, [r3, #0]
			{
 8001a5e:	e0dc      	b.n	8001c1a <block_fall+0x5ae>
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000334 	.word	0x20000334
 8001a68:	20000338 	.word	0x20000338
 8001a6c:	2000033c 	.word	0x2000033c
 8001a70:	20000340 	.word	0x20000340
 8001a74:	20000336 	.word	0x20000336
 8001a78:	2000033a 	.word	0x2000033a
 8001a7c:	2000033e 	.word	0x2000033e
 8001a80:	20000342 	.word	0x20000342
 8001a84:	200001f4 	.word	0x200001f4
			else if(rotation == 2 || rotation == 4)
 8001a88:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <block_fall+0x5d0>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d004      	beq.n	8001a9a <block_fall+0x42e>
 8001a90:	4b6a      	ldr	r3, [pc, #424]	@ (8001c3c <block_fall+0x5d0>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	f040 80c0 	bne.w	8001c1a <block_fall+0x5ae>
				DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8001a9a:	4b69      	ldr	r3, [pc, #420]	@ (8001c40 <block_fall+0x5d4>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4a69      	ldr	r2, [pc, #420]	@ (8001c44 <block_fall+0x5d8>)
 8001aa0:	8811      	ldrh	r1, [r2, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe feaf 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8001aaa:	4b67      	ldr	r3, [pc, #412]	@ (8001c48 <block_fall+0x5dc>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	4a67      	ldr	r2, [pc, #412]	@ (8001c4c <block_fall+0x5e0>)
 8001ab0:	8811      	ldrh	r1, [r2, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fea7 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <block_fall+0x5e4>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	4a65      	ldr	r2, [pc, #404]	@ (8001c54 <block_fall+0x5e8>)
 8001ac0:	8811      	ldrh	r1, [r2, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fe9f 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8001aca:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <block_fall+0x5ec>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	4a63      	ldr	r2, [pc, #396]	@ (8001c5c <block_fall+0x5f0>)
 8001ad0:	8811      	ldrh	r1, [r2, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fe97 	bl	8000808 <DrawBlock>
				DrawBlock(x1_pos, y1_pos +1, LCD_COLOR_BLUE);
 8001ada:	4b59      	ldr	r3, [pc, #356]	@ (8001c40 <block_fall+0x5d4>)
 8001adc:	8818      	ldrh	r0, [r3, #0]
 8001ade:	4b59      	ldr	r3, [pc, #356]	@ (8001c44 <block_fall+0x5d8>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7fe fe8d 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos +1, LCD_COLOR_BLUE);
 8001aee:	4b56      	ldr	r3, [pc, #344]	@ (8001c48 <block_fall+0x5dc>)
 8001af0:	8818      	ldrh	r0, [r3, #0]
 8001af2:	4b56      	ldr	r3, [pc, #344]	@ (8001c4c <block_fall+0x5e0>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	221f      	movs	r2, #31
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe fe83 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos +1, LCD_COLOR_BLUE);
 8001b02:	4b53      	ldr	r3, [pc, #332]	@ (8001c50 <block_fall+0x5e4>)
 8001b04:	8818      	ldrh	r0, [r3, #0]
 8001b06:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <block_fall+0x5e8>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	221f      	movs	r2, #31
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7fe fe79 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos +1, LCD_COLOR_BLUE);
 8001b16:	4b50      	ldr	r3, [pc, #320]	@ (8001c58 <block_fall+0x5ec>)
 8001b18:	8818      	ldrh	r0, [r3, #0]
 8001b1a:	4b50      	ldr	r3, [pc, #320]	@ (8001c5c <block_fall+0x5f0>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	221f      	movs	r2, #31
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7fe fe6f 	bl	8000808 <DrawBlock>
				game[y2_pos][x2_pos] = 0;
 8001b2a:	4b48      	ldr	r3, [pc, #288]	@ (8001c4c <block_fall+0x5e0>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <block_fall+0x5dc>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <block_fall+0x5f4>)
 8001b38:	00c3      	lsls	r3, r0, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8001b42:	4b42      	ldr	r3, [pc, #264]	@ (8001c4c <block_fall+0x5e0>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <block_fall+0x5dc>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4a44      	ldr	r2, [pc, #272]	@ (8001c60 <block_fall+0x5f4>)
 8001b50:	00c3      	lsls	r3, r0, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	2100      	movs	r1, #0
 8001b56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c54 <block_fall+0x5e8>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <block_fall+0x5e4>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4a3e      	ldr	r2, [pc, #248]	@ (8001c60 <block_fall+0x5f4>)
 8001b68:	00c3      	lsls	r3, r0, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <block_fall+0x5f0>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <block_fall+0x5ec>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4a38      	ldr	r2, [pc, #224]	@ (8001c60 <block_fall+0x5f4>)
 8001b80:	00c3      	lsls	r3, r0, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	2100      	movs	r1, #0
 8001b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <block_fall+0x5d8>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <block_fall+0x5d4>)
 8001b92:	8812      	ldrh	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4a32      	ldr	r2, [pc, #200]	@ (8001c60 <block_fall+0x5f4>)
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <block_fall+0x5e0>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a27      	ldr	r2, [pc, #156]	@ (8001c48 <block_fall+0x5dc>)
 8001baa:	8812      	ldrh	r2, [r2, #0]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4a2c      	ldr	r2, [pc, #176]	@ (8001c60 <block_fall+0x5f4>)
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 8001bba:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <block_fall+0x5e8>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <block_fall+0x5e4>)
 8001bc2:	8812      	ldrh	r2, [r2, #0]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4a26      	ldr	r2, [pc, #152]	@ (8001c60 <block_fall+0x5f4>)
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	2101      	movs	r1, #1
 8001bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <block_fall+0x5f0>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <block_fall+0x5ec>)
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <block_fall+0x5f4>)
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	2101      	movs	r1, #1
 8001be6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <block_fall+0x5d8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <block_fall+0x5d8>)
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <block_fall+0x5e0>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <block_fall+0x5e0>)
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <block_fall+0x5e8>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <block_fall+0x5e8>)
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <block_fall+0x5f0>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <block_fall+0x5f0>)
 8001c18:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 8001c1a:	f7ff fc31 	bl	8001480 <block_checkCollision>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f43f ae37 	beq.w	8001894 <block_fall+0x228>
		block_place();
 8001c26:	f7ff fc91 	bl	800154c <block_place>
}
 8001c2a:	f001 b9da 	b.w	8002fe2 <block_fall+0x1976>
	else if(block == s_shape)
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <block_fall+0x5f8>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	f040 81eb 	bne.w	800200e <block_fall+0x9a2>
		while(block_checkCollision() == 0)
 8001c38:	e1df      	b.n	8001ffa <block_fall+0x98e>
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000334 	.word	0x20000334
 8001c44:	20000336 	.word	0x20000336
 8001c48:	20000338 	.word	0x20000338
 8001c4c:	2000033a 	.word	0x2000033a
 8001c50:	2000033c 	.word	0x2000033c
 8001c54:	2000033e 	.word	0x2000033e
 8001c58:	20000340 	.word	0x20000340
 8001c5c:	20000342 	.word	0x20000342
 8001c60:	200001f4 	.word	0x200001f4
 8001c64:	20000344 	.word	0x20000344
			HAL_Delay(1000);
 8001c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c6c:	f004 feb8 	bl	80069e0 <HAL_Delay>
			if(rotation == 1 || rotation == 3)
 8001c70:	4b71      	ldr	r3, [pc, #452]	@ (8001e38 <block_fall+0x7cc>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d004      	beq.n	8001c82 <block_fall+0x616>
 8001c78:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <block_fall+0x7cc>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	f040 80ef 	bne.w	8001e60 <block_fall+0x7f4>
				int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 8001c82:	4b6e      	ldr	r3, [pc, #440]	@ (8001e3c <block_fall+0x7d0>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	0052      	lsls	r2, r2, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001c92:	4b6b      	ldr	r3, [pc, #428]	@ (8001e40 <block_fall+0x7d4>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	0052      	lsls	r2, r2, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 8001ca2:	4b68      	ldr	r3, [pc, #416]	@ (8001e44 <block_fall+0x7d8>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	0052      	lsls	r2, r2, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001cb2:	4b65      	ldr	r3, [pc, #404]	@ (8001e48 <block_fall+0x7dc>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	0052      	lsls	r2, r2, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	853b      	strh	r3, [r7, #40]	@ 0x28
				int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 8001cc2:	4b62      	ldr	r3, [pc, #392]	@ (8001e4c <block_fall+0x7e0>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	0052      	lsls	r2, r2, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e50 <block_fall+0x7e4>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	0052      	lsls	r2, r2, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 8001ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e54 <block_fall+0x7e8>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	0052      	lsls	r2, r2, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001cf2:	4b59      	ldr	r3, [pc, #356]	@ (8001e58 <block_fall+0x7ec>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	0052      	lsls	r2, r2, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	843b      	strh	r3, [r7, #32]
				spawn_s(x1,y1,LCD_COLOR_BLACK);
 8001d02:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 8001d06:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fea8 	bl	8000a62 <spawn_s>
				y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 8001d12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d14:	3318      	adds	r3, #24
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001d1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d24:	3318      	adds	r3, #24
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001d2a:	8c3b      	ldrh	r3, [r7, #32]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	843b      	strh	r3, [r7, #32]
				spawn_s(x1,y1,LCD_COLOR_RED);
 8001d32:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 8001d36:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001d3a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fe8f 	bl	8000a62 <spawn_s>
				game[y2_pos][x2_pos] = 0;
 8001d44:	4b42      	ldr	r3, [pc, #264]	@ (8001e50 <block_fall+0x7e4>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <block_fall+0x7d4>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4a42      	ldr	r2, [pc, #264]	@ (8001e5c <block_fall+0x7f0>)
 8001d52:	00c3      	lsls	r3, r0, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	2100      	movs	r1, #0
 8001d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <block_fall+0x7e4>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <block_fall+0x7d4>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4a3c      	ldr	r2, [pc, #240]	@ (8001e5c <block_fall+0x7f0>)
 8001d6a:	00c3      	lsls	r3, r0, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8001d74:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <block_fall+0x7e8>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <block_fall+0x7d8>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4a36      	ldr	r2, [pc, #216]	@ (8001e5c <block_fall+0x7f0>)
 8001d82:	00c3      	lsls	r3, r0, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	2100      	movs	r1, #0
 8001d88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8001d8c:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <block_fall+0x7ec>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <block_fall+0x7dc>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <block_fall+0x7f0>)
 8001d9a:	00c3      	lsls	r3, r0, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <block_fall+0x7e0>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <block_fall+0x7d0>)
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <block_fall+0x7f0>)
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	440b      	add	r3, r1
 8001db6:	2101      	movs	r1, #1
 8001db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8001dbc:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <block_fall+0x7e4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <block_fall+0x7d4>)
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4a24      	ldr	r2, [pc, #144]	@ (8001e5c <block_fall+0x7f0>)
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	2101      	movs	r1, #1
 8001dd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <block_fall+0x7e8>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a1a      	ldr	r2, [pc, #104]	@ (8001e44 <block_fall+0x7d8>)
 8001ddc:	8812      	ldrh	r2, [r2, #0]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <block_fall+0x7f0>)
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	2101      	movs	r1, #1
 8001de8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <block_fall+0x7ec>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <block_fall+0x7dc>)
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <block_fall+0x7f0>)
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	2101      	movs	r1, #1
 8001e00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <block_fall+0x7e0>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <block_fall+0x7e0>)
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <block_fall+0x7e4>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <block_fall+0x7e4>)
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <block_fall+0x7e8>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <block_fall+0x7e8>)
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <block_fall+0x7ec>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <block_fall+0x7ec>)
 8001e32:	801a      	strh	r2, [r3, #0]
			{
 8001e34:	e0e1      	b.n	8001ffa <block_fall+0x98e>
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000334 	.word	0x20000334
 8001e40:	20000338 	.word	0x20000338
 8001e44:	2000033c 	.word	0x2000033c
 8001e48:	20000340 	.word	0x20000340
 8001e4c:	20000336 	.word	0x20000336
 8001e50:	2000033a 	.word	0x2000033a
 8001e54:	2000033e 	.word	0x2000033e
 8001e58:	20000342 	.word	0x20000342
 8001e5c:	200001f4 	.word	0x200001f4
			else if(rotation == 2 || rotation == 4)
 8001e60:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <block_fall+0x9b0>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d004      	beq.n	8001e72 <block_fall+0x806>
 8001e68:	4b6c      	ldr	r3, [pc, #432]	@ (800201c <block_fall+0x9b0>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	f040 80c4 	bne.w	8001ffa <block_fall+0x98e>
				DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8001e72:	4b6b      	ldr	r3, [pc, #428]	@ (8002020 <block_fall+0x9b4>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	4a6b      	ldr	r2, [pc, #428]	@ (8002024 <block_fall+0x9b8>)
 8001e78:	8811      	ldrh	r1, [r2, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fcc3 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8001e82:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <block_fall+0x9bc>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	4a69      	ldr	r2, [pc, #420]	@ (800202c <block_fall+0x9c0>)
 8001e88:	8811      	ldrh	r1, [r2, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fcbb 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8001e92:	4b67      	ldr	r3, [pc, #412]	@ (8002030 <block_fall+0x9c4>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	4a67      	ldr	r2, [pc, #412]	@ (8002034 <block_fall+0x9c8>)
 8001e98:	8811      	ldrh	r1, [r2, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fcb3 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8001ea2:	4b65      	ldr	r3, [pc, #404]	@ (8002038 <block_fall+0x9cc>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	4a65      	ldr	r2, [pc, #404]	@ (800203c <block_fall+0x9d0>)
 8001ea8:	8811      	ldrh	r1, [r2, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fcab 	bl	8000808 <DrawBlock>
				DrawBlock(x1_pos, y1_pos +1, LCD_COLOR_RED);
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002020 <block_fall+0x9b4>)
 8001eb4:	8818      	ldrh	r0, [r3, #0]
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002024 <block_fall+0x9b8>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fca0 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos +1, LCD_COLOR_RED);
 8001ec8:	4b57      	ldr	r3, [pc, #348]	@ (8002028 <block_fall+0x9bc>)
 8001eca:	8818      	ldrh	r0, [r3, #0]
 8001ecc:	4b57      	ldr	r3, [pc, #348]	@ (800202c <block_fall+0x9c0>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fc95 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos +1, LCD_COLOR_RED);
 8001ede:	4b54      	ldr	r3, [pc, #336]	@ (8002030 <block_fall+0x9c4>)
 8001ee0:	8818      	ldrh	r0, [r3, #0]
 8001ee2:	4b54      	ldr	r3, [pc, #336]	@ (8002034 <block_fall+0x9c8>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fc8a 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos +1, LCD_COLOR_RED);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	@ (8002038 <block_fall+0x9cc>)
 8001ef6:	8818      	ldrh	r0, [r3, #0]
 8001ef8:	4b50      	ldr	r3, [pc, #320]	@ (800203c <block_fall+0x9d0>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fc7f 	bl	8000808 <DrawBlock>
				game[y2_pos][x2_pos] = 0;
 8001f0a:	4b48      	ldr	r3, [pc, #288]	@ (800202c <block_fall+0x9c0>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4b45      	ldr	r3, [pc, #276]	@ (8002028 <block_fall+0x9bc>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <block_fall+0x9d4>)
 8001f18:	00c3      	lsls	r3, r0, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8001f22:	4b42      	ldr	r3, [pc, #264]	@ (800202c <block_fall+0x9c0>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <block_fall+0x9bc>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4a44      	ldr	r2, [pc, #272]	@ (8002040 <block_fall+0x9d4>)
 8001f30:	00c3      	lsls	r3, r0, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	2100      	movs	r1, #0
 8001f36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <block_fall+0x9c8>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <block_fall+0x9c4>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4a3e      	ldr	r2, [pc, #248]	@ (8002040 <block_fall+0x9d4>)
 8001f48:	00c3      	lsls	r3, r0, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8001f52:	4b3a      	ldr	r3, [pc, #232]	@ (800203c <block_fall+0x9d0>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <block_fall+0x9cc>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4a38      	ldr	r2, [pc, #224]	@ (8002040 <block_fall+0x9d4>)
 8001f60:	00c3      	lsls	r3, r0, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	2100      	movs	r1, #0
 8001f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <block_fall+0x9b8>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <block_fall+0x9b4>)
 8001f72:	8812      	ldrh	r2, [r2, #0]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4a32      	ldr	r2, [pc, #200]	@ (8002040 <block_fall+0x9d4>)
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8001f82:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <block_fall+0x9c0>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	4a27      	ldr	r2, [pc, #156]	@ (8002028 <block_fall+0x9bc>)
 8001f8a:	8812      	ldrh	r2, [r2, #0]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002040 <block_fall+0x9d4>)
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	2101      	movs	r1, #1
 8001f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <block_fall+0x9c8>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <block_fall+0x9c4>)
 8001fa2:	8812      	ldrh	r2, [r2, #0]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4a26      	ldr	r2, [pc, #152]	@ (8002040 <block_fall+0x9d4>)
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	2101      	movs	r1, #1
 8001fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8001fb2:	4b22      	ldr	r3, [pc, #136]	@ (800203c <block_fall+0x9d0>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <block_fall+0x9cc>)
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4a20      	ldr	r2, [pc, #128]	@ (8002040 <block_fall+0x9d4>)
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <block_fall+0x9b8>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <block_fall+0x9b8>)
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <block_fall+0x9c0>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <block_fall+0x9c0>)
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <block_fall+0x9c8>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <block_fall+0x9c8>)
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <block_fall+0x9d0>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b11      	ldr	r3, [pc, #68]	@ (800203c <block_fall+0x9d0>)
 8001ff8:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 8001ffa:	f7ff fa41 	bl	8001480 <block_checkCollision>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f43f ae31 	beq.w	8001c68 <block_fall+0x5fc>
		block_place();
 8002006:	f7ff faa1 	bl	800154c <block_place>
}
 800200a:	f000 bfea 	b.w	8002fe2 <block_fall+0x1976>
	else if(block == z_shape)
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <block_fall+0x9d8>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	2b03      	cmp	r3, #3
 8002014:	f040 81eb 	bne.w	80023ee <block_fall+0xd82>
		while(block_checkCollision() == 0)
 8002018:	e1df      	b.n	80023da <block_fall+0xd6e>
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000
 8002020:	20000334 	.word	0x20000334
 8002024:	20000336 	.word	0x20000336
 8002028:	20000338 	.word	0x20000338
 800202c:	2000033a 	.word	0x2000033a
 8002030:	2000033c 	.word	0x2000033c
 8002034:	2000033e 	.word	0x2000033e
 8002038:	20000340 	.word	0x20000340
 800203c:	20000342 	.word	0x20000342
 8002040:	200001f4 	.word	0x200001f4
 8002044:	20000344 	.word	0x20000344
			HAL_Delay(1000);
 8002048:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800204c:	f004 fcc8 	bl	80069e0 <HAL_Delay>
			if(rotation == 1 || rotation == 3)
 8002050:	4b71      	ldr	r3, [pc, #452]	@ (8002218 <block_fall+0xbac>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d004      	beq.n	8002062 <block_fall+0x9f6>
 8002058:	4b6f      	ldr	r3, [pc, #444]	@ (8002218 <block_fall+0xbac>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2b03      	cmp	r3, #3
 800205e:	f040 80ef 	bne.w	8002240 <block_fall+0xbd4>
				int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 8002062:	4b6e      	ldr	r3, [pc, #440]	@ (800221c <block_fall+0xbb0>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	0052      	lsls	r2, r2, #1
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	b29b      	uxth	r3, r3
 8002070:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8002072:	4b6b      	ldr	r3, [pc, #428]	@ (8002220 <block_fall+0xbb4>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	0052      	lsls	r2, r2, #1
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	b29b      	uxth	r3, r3
 8002080:	87bb      	strh	r3, [r7, #60]	@ 0x3c
				int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 8002082:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <block_fall+0xbb8>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	0052      	lsls	r2, r2, #1
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	b29b      	uxth	r3, r3
 8002090:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002092:	4b65      	ldr	r3, [pc, #404]	@ (8002228 <block_fall+0xbbc>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	0052      	lsls	r2, r2, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	b29b      	uxth	r3, r3
 80020a0:	873b      	strh	r3, [r7, #56]	@ 0x38
				int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 80020a2:	4b62      	ldr	r3, [pc, #392]	@ (800222c <block_fall+0xbc0>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	0052      	lsls	r2, r2, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80020b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002230 <block_fall+0xbc4>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	0052      	lsls	r2, r2, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	b29b      	uxth	r3, r3
 80020c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
				int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 80020c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002234 <block_fall+0xbc8>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	0052      	lsls	r2, r2, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80020d2:	4b59      	ldr	r3, [pc, #356]	@ (8002238 <block_fall+0xbcc>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	0052      	lsls	r2, r2, #1
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	863b      	strh	r3, [r7, #48]	@ 0x30
				spawn_z(x1,y1,LCD_COLOR_BLACK);
 80020e2:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	@ 0x36
 80020e6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80020ea:	2200      	movs	r2, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fd3b 	bl	8000b68 <spawn_z>
				y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 80020f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80020f4:	3318      	adds	r3, #24
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80020fa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80020fc:	3318      	adds	r3, #24
 80020fe:	b29b      	uxth	r3, r3
 8002100:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002102:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002104:	3318      	adds	r3, #24
 8002106:	b29b      	uxth	r3, r3
 8002108:	867b      	strh	r3, [r7, #50]	@ 0x32
 800210a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800210c:	3318      	adds	r3, #24
 800210e:	b29b      	uxth	r3, r3
 8002110:	863b      	strh	r3, [r7, #48]	@ 0x30
				spawn_z(x1,y1,LCD_COLOR_GREEN);
 8002112:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	@ 0x36
 8002116:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800211a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fd22 	bl	8000b68 <spawn_z>
				game[y2_pos][x2_pos] = 0;
 8002124:	4b42      	ldr	r3, [pc, #264]	@ (8002230 <block_fall+0xbc4>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	4b3d      	ldr	r3, [pc, #244]	@ (8002220 <block_fall+0xbb4>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	4619      	mov	r1, r3
 8002130:	4a42      	ldr	r2, [pc, #264]	@ (800223c <block_fall+0xbd0>)
 8002132:	00c3      	lsls	r3, r0, #3
 8002134:	440b      	add	r3, r1
 8002136:	2100      	movs	r1, #0
 8002138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 800213c:	4b3c      	ldr	r3, [pc, #240]	@ (8002230 <block_fall+0xbc4>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <block_fall+0xbb4>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4a3c      	ldr	r2, [pc, #240]	@ (800223c <block_fall+0xbd0>)
 800214a:	00c3      	lsls	r3, r0, #3
 800214c:	440b      	add	r3, r1
 800214e:	2100      	movs	r1, #0
 8002150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8002154:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <block_fall+0xbc8>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	4b32      	ldr	r3, [pc, #200]	@ (8002224 <block_fall+0xbb8>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	4a36      	ldr	r2, [pc, #216]	@ (800223c <block_fall+0xbd0>)
 8002162:	00c3      	lsls	r3, r0, #3
 8002164:	440b      	add	r3, r1
 8002166:	2100      	movs	r1, #0
 8002168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 800216c:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <block_fall+0xbcc>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <block_fall+0xbbc>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	4a30      	ldr	r2, [pc, #192]	@ (800223c <block_fall+0xbd0>)
 800217a:	00c3      	lsls	r3, r0, #3
 800217c:	440b      	add	r3, r1
 800217e:	2100      	movs	r1, #0
 8002180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8002184:	4b29      	ldr	r3, [pc, #164]	@ (800222c <block_fall+0xbc0>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a24      	ldr	r2, [pc, #144]	@ (800221c <block_fall+0xbb0>)
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	4611      	mov	r1, r2
 8002190:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <block_fall+0xbd0>)
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	2101      	movs	r1, #1
 8002198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <block_fall+0xbc4>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <block_fall+0xbb4>)
 80021a4:	8812      	ldrh	r2, [r2, #0]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4a24      	ldr	r2, [pc, #144]	@ (800223c <block_fall+0xbd0>)
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	2101      	movs	r1, #1
 80021b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 80021b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <block_fall+0xbc8>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002224 <block_fall+0xbb8>)
 80021bc:	8812      	ldrh	r2, [r2, #0]
 80021be:	4611      	mov	r1, r2
 80021c0:	4a1e      	ldr	r2, [pc, #120]	@ (800223c <block_fall+0xbd0>)
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	2101      	movs	r1, #1
 80021c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <block_fall+0xbcc>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <block_fall+0xbbc>)
 80021d4:	8812      	ldrh	r2, [r2, #0]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4a18      	ldr	r2, [pc, #96]	@ (800223c <block_fall+0xbd0>)
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	2101      	movs	r1, #1
 80021e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <block_fall+0xbc0>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <block_fall+0xbc0>)
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <block_fall+0xbc4>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <block_fall+0xbc4>)
 80021fa:	801a      	strh	r2, [r3, #0]
 80021fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <block_fall+0xbc8>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <block_fall+0xbc8>)
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <block_fall+0xbcc>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <block_fall+0xbcc>)
 8002212:	801a      	strh	r2, [r3, #0]
			{
 8002214:	e0e1      	b.n	80023da <block_fall+0xd6e>
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000
 800221c:	20000334 	.word	0x20000334
 8002220:	20000338 	.word	0x20000338
 8002224:	2000033c 	.word	0x2000033c
 8002228:	20000340 	.word	0x20000340
 800222c:	20000336 	.word	0x20000336
 8002230:	2000033a 	.word	0x2000033a
 8002234:	2000033e 	.word	0x2000033e
 8002238:	20000342 	.word	0x20000342
 800223c:	200001f4 	.word	0x200001f4
			else if(rotation == 2 || rotation == 4)
 8002240:	4b6e      	ldr	r3, [pc, #440]	@ (80023fc <block_fall+0xd90>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d004      	beq.n	8002252 <block_fall+0xbe6>
 8002248:	4b6c      	ldr	r3, [pc, #432]	@ (80023fc <block_fall+0xd90>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	f040 80c4 	bne.w	80023da <block_fall+0xd6e>
				DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8002252:	4b6b      	ldr	r3, [pc, #428]	@ (8002400 <block_fall+0xd94>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	4a6b      	ldr	r2, [pc, #428]	@ (8002404 <block_fall+0xd98>)
 8002258:	8811      	ldrh	r1, [r2, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fad3 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8002262:	4b69      	ldr	r3, [pc, #420]	@ (8002408 <block_fall+0xd9c>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	4a69      	ldr	r2, [pc, #420]	@ (800240c <block_fall+0xda0>)
 8002268:	8811      	ldrh	r1, [r2, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe facb 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8002272:	4b67      	ldr	r3, [pc, #412]	@ (8002410 <block_fall+0xda4>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	4a67      	ldr	r2, [pc, #412]	@ (8002414 <block_fall+0xda8>)
 8002278:	8811      	ldrh	r1, [r2, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fac3 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8002282:	4b65      	ldr	r3, [pc, #404]	@ (8002418 <block_fall+0xdac>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	4a65      	ldr	r2, [pc, #404]	@ (800241c <block_fall+0xdb0>)
 8002288:	8811      	ldrh	r1, [r2, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fabb 	bl	8000808 <DrawBlock>
				DrawBlock(x1_pos, y1_pos +1, LCD_COLOR_GREEN);
 8002292:	4b5b      	ldr	r3, [pc, #364]	@ (8002400 <block_fall+0xd94>)
 8002294:	8818      	ldrh	r0, [r3, #0]
 8002296:	4b5b      	ldr	r3, [pc, #364]	@ (8002404 <block_fall+0xd98>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fab0 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos +1, LCD_COLOR_GREEN);
 80022a8:	4b57      	ldr	r3, [pc, #348]	@ (8002408 <block_fall+0xd9c>)
 80022aa:	8818      	ldrh	r0, [r3, #0]
 80022ac:	4b57      	ldr	r3, [pc, #348]	@ (800240c <block_fall+0xda0>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe faa5 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos +1, LCD_COLOR_GREEN);
 80022be:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <block_fall+0xda4>)
 80022c0:	8818      	ldrh	r0, [r3, #0]
 80022c2:	4b54      	ldr	r3, [pc, #336]	@ (8002414 <block_fall+0xda8>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe fa9a 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos +1, LCD_COLOR_GREEN);
 80022d4:	4b50      	ldr	r3, [pc, #320]	@ (8002418 <block_fall+0xdac>)
 80022d6:	8818      	ldrh	r0, [r3, #0]
 80022d8:	4b50      	ldr	r3, [pc, #320]	@ (800241c <block_fall+0xdb0>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fa8f 	bl	8000808 <DrawBlock>
				game[y2_pos][x2_pos] = 0;
 80022ea:	4b48      	ldr	r3, [pc, #288]	@ (800240c <block_fall+0xda0>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	4b45      	ldr	r3, [pc, #276]	@ (8002408 <block_fall+0xd9c>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002420 <block_fall+0xdb4>)
 80022f8:	00c3      	lsls	r3, r0, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	2100      	movs	r1, #0
 80022fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002302:	4b42      	ldr	r3, [pc, #264]	@ (800240c <block_fall+0xda0>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	4b3f      	ldr	r3, [pc, #252]	@ (8002408 <block_fall+0xd9c>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	4a44      	ldr	r2, [pc, #272]	@ (8002420 <block_fall+0xdb4>)
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	440b      	add	r3, r1
 8002314:	2100      	movs	r1, #0
 8002316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 800231a:	4b3e      	ldr	r3, [pc, #248]	@ (8002414 <block_fall+0xda8>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <block_fall+0xda4>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	4a3e      	ldr	r2, [pc, #248]	@ (8002420 <block_fall+0xdb4>)
 8002328:	00c3      	lsls	r3, r0, #3
 800232a:	440b      	add	r3, r1
 800232c:	2100      	movs	r1, #0
 800232e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002332:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <block_fall+0xdb0>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	4b37      	ldr	r3, [pc, #220]	@ (8002418 <block_fall+0xdac>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	4a38      	ldr	r2, [pc, #224]	@ (8002420 <block_fall+0xdb4>)
 8002340:	00c3      	lsls	r3, r0, #3
 8002342:	440b      	add	r3, r1
 8002344:	2100      	movs	r1, #0
 8002346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 800234a:	4b2e      	ldr	r3, [pc, #184]	@ (8002404 <block_fall+0xd98>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a2b      	ldr	r2, [pc, #172]	@ (8002400 <block_fall+0xd94>)
 8002352:	8812      	ldrh	r2, [r2, #0]
 8002354:	4611      	mov	r1, r2
 8002356:	4a32      	ldr	r2, [pc, #200]	@ (8002420 <block_fall+0xdb4>)
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	2101      	movs	r1, #1
 800235e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002362:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <block_fall+0xda0>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <block_fall+0xd9c>)
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	4611      	mov	r1, r2
 800236e:	4a2c      	ldr	r2, [pc, #176]	@ (8002420 <block_fall+0xdb4>)
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	2101      	movs	r1, #1
 8002376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <block_fall+0xda8>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <block_fall+0xda4>)
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	4611      	mov	r1, r2
 8002386:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <block_fall+0xdb4>)
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	2101      	movs	r1, #1
 800238e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <block_fall+0xdb0>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	4a1f      	ldr	r2, [pc, #124]	@ (8002418 <block_fall+0xdac>)
 800239a:	8812      	ldrh	r2, [r2, #0]
 800239c:	4611      	mov	r1, r2
 800239e:	4a20      	ldr	r2, [pc, #128]	@ (8002420 <block_fall+0xdb4>)
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	2101      	movs	r1, #1
 80023a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <block_fall+0xd98>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <block_fall+0xd98>)
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <block_fall+0xda0>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b13      	ldr	r3, [pc, #76]	@ (800240c <block_fall+0xda0>)
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <block_fall+0xda8>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <block_fall+0xda8>)
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <block_fall+0xdb0>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <block_fall+0xdb0>)
 80023d8:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 80023da:	f7ff f851 	bl	8001480 <block_checkCollision>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f43f ae31 	beq.w	8002048 <block_fall+0x9dc>
		block_place();
 80023e6:	f7ff f8b1 	bl	800154c <block_place>
}
 80023ea:	f000 bdfa 	b.w	8002fe2 <block_fall+0x1976>
	else if(block == l_shape)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <block_fall+0xdb8>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	f040 81fa 	bne.w	80027ec <block_fall+0x1180>
		while(block_checkCollision() == 0)
 80023f8:	e1ef      	b.n	80027da <block_fall+0x116e>
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000334 	.word	0x20000334
 8002404:	20000336 	.word	0x20000336
 8002408:	20000338 	.word	0x20000338
 800240c:	2000033a 	.word	0x2000033a
 8002410:	2000033c 	.word	0x2000033c
 8002414:	2000033e 	.word	0x2000033e
 8002418:	20000340 	.word	0x20000340
 800241c:	20000342 	.word	0x20000342
 8002420:	200001f4 	.word	0x200001f4
 8002424:	20000344 	.word	0x20000344
			HAL_Delay(1000);
 8002428:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800242c:	f004 fad8 	bl	80069e0 <HAL_Delay>
			if(rotation == 1)
 8002430:	4b77      	ldr	r3, [pc, #476]	@ (8002610 <block_fall+0xfa4>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 80ff 	bne.w	8002638 <block_fall+0xfcc>
				int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 800243a:	4b76      	ldr	r3, [pc, #472]	@ (8002614 <block_fall+0xfa8>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	0052      	lsls	r2, r2, #1
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	b29b      	uxth	r3, r3
 8002448:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800244c:	4b72      	ldr	r3, [pc, #456]	@ (8002618 <block_fall+0xfac>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	0052      	lsls	r2, r2, #1
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	b29b      	uxth	r3, r3
 800245a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
				int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 800245e:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <block_fall+0xfb0>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	0052      	lsls	r2, r2, #1
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	b29b      	uxth	r3, r3
 800246c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002470:	4b6b      	ldr	r3, [pc, #428]	@ (8002620 <block_fall+0xfb4>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	0052      	lsls	r2, r2, #1
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	b29b      	uxth	r3, r3
 800247e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
				int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 8002482:	4b68      	ldr	r3, [pc, #416]	@ (8002624 <block_fall+0xfb8>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	0052      	lsls	r2, r2, #1
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	b29b      	uxth	r3, r3
 8002490:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002494:	4b64      	ldr	r3, [pc, #400]	@ (8002628 <block_fall+0xfbc>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	0052      	lsls	r2, r2, #1
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
				int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 80024a6:	4b61      	ldr	r3, [pc, #388]	@ (800262c <block_fall+0xfc0>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	0052      	lsls	r2, r2, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024b8:	4b5d      	ldr	r3, [pc, #372]	@ (8002630 <block_fall+0xfc4>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	0052      	lsls	r2, r2, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
				spawn_l(x1,y1,LCD_COLOR_BLACK);
 80024ca:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 80024ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80024d2:	2200      	movs	r2, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fbc9 	bl	8000c6c <spawn_l>
				y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 80024da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80024de:	3318      	adds	r3, #24
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80024e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80024ea:	3318      	adds	r3, #24
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80024f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024f6:	3318      	adds	r3, #24
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002502:	3318      	adds	r3, #24
 8002504:	b29b      	uxth	r3, r3
 8002506:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
				spawn_l(x1,y1,LCD_COLOR_CYAN);
 800250a:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 800250e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002512:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fba8 	bl	8000c6c <spawn_l>
				game[y2_pos][x2_pos] = 0;
 800251c:	4b42      	ldr	r3, [pc, #264]	@ (8002628 <block_fall+0xfbc>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <block_fall+0xfac>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	4a42      	ldr	r2, [pc, #264]	@ (8002634 <block_fall+0xfc8>)
 800252a:	00c3      	lsls	r3, r0, #3
 800252c:	440b      	add	r3, r1
 800252e:	2100      	movs	r1, #0
 8002530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002534:	4b3c      	ldr	r3, [pc, #240]	@ (8002628 <block_fall+0xfbc>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <block_fall+0xfac>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4a3c      	ldr	r2, [pc, #240]	@ (8002634 <block_fall+0xfc8>)
 8002542:	00c3      	lsls	r3, r0, #3
 8002544:	440b      	add	r3, r1
 8002546:	2100      	movs	r1, #0
 8002548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 800254c:	4b37      	ldr	r3, [pc, #220]	@ (800262c <block_fall+0xfc0>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	4b32      	ldr	r3, [pc, #200]	@ (800261c <block_fall+0xfb0>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4a36      	ldr	r2, [pc, #216]	@ (8002634 <block_fall+0xfc8>)
 800255a:	00c3      	lsls	r3, r0, #3
 800255c:	440b      	add	r3, r1
 800255e:	2100      	movs	r1, #0
 8002560:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002564:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <block_fall+0xfc4>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	4b2d      	ldr	r3, [pc, #180]	@ (8002620 <block_fall+0xfb4>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4a30      	ldr	r2, [pc, #192]	@ (8002634 <block_fall+0xfc8>)
 8002572:	00c3      	lsls	r3, r0, #3
 8002574:	440b      	add	r3, r1
 8002576:	2100      	movs	r1, #0
 8002578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 800257c:	4b29      	ldr	r3, [pc, #164]	@ (8002624 <block_fall+0xfb8>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	4a24      	ldr	r2, [pc, #144]	@ (8002614 <block_fall+0xfa8>)
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	4611      	mov	r1, r2
 8002588:	4a2a      	ldr	r2, [pc, #168]	@ (8002634 <block_fall+0xfc8>)
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	2101      	movs	r1, #1
 8002590:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002594:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <block_fall+0xfbc>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a1f      	ldr	r2, [pc, #124]	@ (8002618 <block_fall+0xfac>)
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	4611      	mov	r1, r2
 80025a0:	4a24      	ldr	r2, [pc, #144]	@ (8002634 <block_fall+0xfc8>)
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	2101      	movs	r1, #1
 80025a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <block_fall+0xfc0>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	4a1a      	ldr	r2, [pc, #104]	@ (800261c <block_fall+0xfb0>)
 80025b4:	8812      	ldrh	r2, [r2, #0]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002634 <block_fall+0xfc8>)
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	2101      	movs	r1, #1
 80025c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <block_fall+0xfc4>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a15      	ldr	r2, [pc, #84]	@ (8002620 <block_fall+0xfb4>)
 80025cc:	8812      	ldrh	r2, [r2, #0]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <block_fall+0xfc8>)
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	2101      	movs	r1, #1
 80025d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <block_fall+0xfb8>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <block_fall+0xfb8>)
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <block_fall+0xfbc>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <block_fall+0xfbc>)
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <block_fall+0xfc0>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <block_fall+0xfc0>)
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <block_fall+0xfc4>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <block_fall+0xfc4>)
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	e0e5      	b.n	80027da <block_fall+0x116e>
 800260e:	bf00      	nop
 8002610:	20000000 	.word	0x20000000
 8002614:	20000334 	.word	0x20000334
 8002618:	20000338 	.word	0x20000338
 800261c:	2000033c 	.word	0x2000033c
 8002620:	20000340 	.word	0x20000340
 8002624:	20000336 	.word	0x20000336
 8002628:	2000033a 	.word	0x2000033a
 800262c:	2000033e 	.word	0x2000033e
 8002630:	20000342 	.word	0x20000342
 8002634:	200001f4 	.word	0x200001f4
			else if(rotation == 2 || rotation == 3 || rotation == 4)
 8002638:	4b6f      	ldr	r3, [pc, #444]	@ (80027f8 <block_fall+0x118c>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d008      	beq.n	8002652 <block_fall+0xfe6>
 8002640:	4b6d      	ldr	r3, [pc, #436]	@ (80027f8 <block_fall+0x118c>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d004      	beq.n	8002652 <block_fall+0xfe6>
 8002648:	4b6b      	ldr	r3, [pc, #428]	@ (80027f8 <block_fall+0x118c>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	f040 80c4 	bne.w	80027da <block_fall+0x116e>
				DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8002652:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <block_fall+0x1190>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	4a6a      	ldr	r2, [pc, #424]	@ (8002800 <block_fall+0x1194>)
 8002658:	8811      	ldrh	r1, [r2, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe f8d3 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8002662:	4b68      	ldr	r3, [pc, #416]	@ (8002804 <block_fall+0x1198>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	4a68      	ldr	r2, [pc, #416]	@ (8002808 <block_fall+0x119c>)
 8002668:	8811      	ldrh	r1, [r2, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe f8cb 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8002672:	4b66      	ldr	r3, [pc, #408]	@ (800280c <block_fall+0x11a0>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <block_fall+0x11a4>)
 8002678:	8811      	ldrh	r1, [r2, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe f8c3 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8002682:	4b64      	ldr	r3, [pc, #400]	@ (8002814 <block_fall+0x11a8>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	4a64      	ldr	r2, [pc, #400]	@ (8002818 <block_fall+0x11ac>)
 8002688:	8811      	ldrh	r1, [r2, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe f8bb 	bl	8000808 <DrawBlock>
				DrawBlock(x1_pos, y1_pos +1, LCD_COLOR_CYAN);
 8002692:	4b5a      	ldr	r3, [pc, #360]	@ (80027fc <block_fall+0x1190>)
 8002694:	8818      	ldrh	r0, [r3, #0]
 8002696:	4b5a      	ldr	r3, [pc, #360]	@ (8002800 <block_fall+0x1194>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b29b      	uxth	r3, r3
 800269e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe f8b0 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos +1, LCD_COLOR_CYAN);
 80026a8:	4b56      	ldr	r3, [pc, #344]	@ (8002804 <block_fall+0x1198>)
 80026aa:	8818      	ldrh	r0, [r3, #0]
 80026ac:	4b56      	ldr	r3, [pc, #344]	@ (8002808 <block_fall+0x119c>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe f8a5 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos +1, LCD_COLOR_CYAN);
 80026be:	4b53      	ldr	r3, [pc, #332]	@ (800280c <block_fall+0x11a0>)
 80026c0:	8818      	ldrh	r0, [r3, #0]
 80026c2:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <block_fall+0x11a4>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe f89a 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos +1, LCD_COLOR_CYAN);
 80026d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002814 <block_fall+0x11a8>)
 80026d6:	8818      	ldrh	r0, [r3, #0]
 80026d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002818 <block_fall+0x11ac>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe f88f 	bl	8000808 <DrawBlock>
				game[y2_pos][x2_pos] = 0;
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <block_fall+0x119c>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	4b44      	ldr	r3, [pc, #272]	@ (8002804 <block_fall+0x1198>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4a49      	ldr	r2, [pc, #292]	@ (800281c <block_fall+0x11b0>)
 80026f8:	00c3      	lsls	r3, r0, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	2100      	movs	r1, #0
 80026fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <block_fall+0x119c>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	4b3e      	ldr	r3, [pc, #248]	@ (8002804 <block_fall+0x1198>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	4a43      	ldr	r2, [pc, #268]	@ (800281c <block_fall+0x11b0>)
 8002710:	00c3      	lsls	r3, r0, #3
 8002712:	440b      	add	r3, r1
 8002714:	2100      	movs	r1, #0
 8002716:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 800271a:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <block_fall+0x11a4>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <block_fall+0x11a0>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	4a3d      	ldr	r2, [pc, #244]	@ (800281c <block_fall+0x11b0>)
 8002728:	00c3      	lsls	r3, r0, #3
 800272a:	440b      	add	r3, r1
 800272c:	2100      	movs	r1, #0
 800272e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002732:	4b39      	ldr	r3, [pc, #228]	@ (8002818 <block_fall+0x11ac>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	4b36      	ldr	r3, [pc, #216]	@ (8002814 <block_fall+0x11a8>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	4a37      	ldr	r2, [pc, #220]	@ (800281c <block_fall+0x11b0>)
 8002740:	00c3      	lsls	r3, r0, #3
 8002742:	440b      	add	r3, r1
 8002744:	2100      	movs	r1, #0
 8002746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 800274a:	4b2d      	ldr	r3, [pc, #180]	@ (8002800 <block_fall+0x1194>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	4a2a      	ldr	r2, [pc, #168]	@ (80027fc <block_fall+0x1190>)
 8002752:	8812      	ldrh	r2, [r2, #0]
 8002754:	4611      	mov	r1, r2
 8002756:	4a31      	ldr	r2, [pc, #196]	@ (800281c <block_fall+0x11b0>)
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	2101      	movs	r1, #1
 800275e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002762:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <block_fall+0x119c>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a26      	ldr	r2, [pc, #152]	@ (8002804 <block_fall+0x1198>)
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	4611      	mov	r1, r2
 800276e:	4a2b      	ldr	r2, [pc, #172]	@ (800281c <block_fall+0x11b0>)
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	2101      	movs	r1, #1
 8002776:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 800277a:	4b25      	ldr	r3, [pc, #148]	@ (8002810 <block_fall+0x11a4>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a22      	ldr	r2, [pc, #136]	@ (800280c <block_fall+0x11a0>)
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	4611      	mov	r1, r2
 8002786:	4a25      	ldr	r2, [pc, #148]	@ (800281c <block_fall+0x11b0>)
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	2101      	movs	r1, #1
 800278e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8002792:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <block_fall+0x11ac>)
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <block_fall+0x11a8>)
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	4611      	mov	r1, r2
 800279e:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <block_fall+0x11b0>)
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	2101      	movs	r1, #1
 80027a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <block_fall+0x1194>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <block_fall+0x1194>)
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <block_fall+0x119c>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <block_fall+0x119c>)
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <block_fall+0x11a4>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <block_fall+0x11a4>)
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <block_fall+0x11ac>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <block_fall+0x11ac>)
 80027d8:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 80027da:	f7fe fe51 	bl	8001480 <block_checkCollision>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f43f ae21 	beq.w	8002428 <block_fall+0xdbc>
		block_place();
 80027e6:	f7fe feb1 	bl	800154c <block_place>
}
 80027ea:	e3fa      	b.n	8002fe2 <block_fall+0x1976>
	else if(block == j_shape)
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <block_fall+0x11b4>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	f040 81f9 	bne.w	8002be8 <block_fall+0x157c>
		while(block_checkCollision() == 0)
 80027f6:	e1ee      	b.n	8002bd6 <block_fall+0x156a>
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000334 	.word	0x20000334
 8002800:	20000336 	.word	0x20000336
 8002804:	20000338 	.word	0x20000338
 8002808:	2000033a 	.word	0x2000033a
 800280c:	2000033c 	.word	0x2000033c
 8002810:	2000033e 	.word	0x2000033e
 8002814:	20000340 	.word	0x20000340
 8002818:	20000342 	.word	0x20000342
 800281c:	200001f4 	.word	0x200001f4
 8002820:	20000344 	.word	0x20000344
			HAL_Delay(1000);
 8002824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002828:	f004 f8da 	bl	80069e0 <HAL_Delay>
			if(rotation == 1)
 800282c:	4b77      	ldr	r3, [pc, #476]	@ (8002a0c <block_fall+0x13a0>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	f040 80ff 	bne.w	8002a34 <block_fall+0x13c8>
				int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 8002836:	4b76      	ldr	r3, [pc, #472]	@ (8002a10 <block_fall+0x13a4>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	0052      	lsls	r2, r2, #1
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	b29b      	uxth	r3, r3
 8002844:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8002848:	4b72      	ldr	r3, [pc, #456]	@ (8002a14 <block_fall+0x13a8>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	b29b      	uxth	r3, r3
 8002856:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
				int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 800285a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <block_fall+0x13ac>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	0052      	lsls	r2, r2, #1
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	b29b      	uxth	r3, r3
 8002868:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800286c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a1c <block_fall+0x13b0>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	b29b      	uxth	r3, r3
 800287a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
				int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 800287e:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <block_fall+0x13b4>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	0052      	lsls	r2, r2, #1
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	b29b      	uxth	r3, r3
 800288c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002890:	4b64      	ldr	r3, [pc, #400]	@ (8002a24 <block_fall+0x13b8>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	0052      	lsls	r2, r2, #1
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	b29b      	uxth	r3, r3
 800289e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
				int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 80028a2:	4b61      	ldr	r3, [pc, #388]	@ (8002a28 <block_fall+0x13bc>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	0052      	lsls	r2, r2, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80028b4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a2c <block_fall+0x13c0>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	0052      	lsls	r2, r2, #1
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
				spawn_j(x1,y1,LCD_COLOR_BLACK);
 80028c6:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 80028ca:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80028ce:	2200      	movs	r2, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fa4a 	bl	8000d6a <spawn_j>
				y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 80028d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80028da:	3318      	adds	r3, #24
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80028e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80028e6:	3318      	adds	r3, #24
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 80028ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80028f2:	3318      	adds	r3, #24
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80028fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80028fe:	3318      	adds	r3, #24
 8002900:	b29b      	uxth	r3, r3
 8002902:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
				spawn_j(x1,y1,LCD_COLOR_MAGENTA);
 8002906:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800290a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800290e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fa29 	bl	8000d6a <spawn_j>
				game[y2_pos][x2_pos] = 0;
 8002918:	4b42      	ldr	r3, [pc, #264]	@ (8002a24 <block_fall+0x13b8>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <block_fall+0x13a8>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4a42      	ldr	r2, [pc, #264]	@ (8002a30 <block_fall+0x13c4>)
 8002926:	00c3      	lsls	r3, r0, #3
 8002928:	440b      	add	r3, r1
 800292a:	2100      	movs	r1, #0
 800292c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002930:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <block_fall+0x13b8>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <block_fall+0x13a8>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a30 <block_fall+0x13c4>)
 800293e:	00c3      	lsls	r3, r0, #3
 8002940:	440b      	add	r3, r1
 8002942:	2100      	movs	r1, #0
 8002944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8002948:	4b37      	ldr	r3, [pc, #220]	@ (8002a28 <block_fall+0x13bc>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	4b32      	ldr	r3, [pc, #200]	@ (8002a18 <block_fall+0x13ac>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	4a36      	ldr	r2, [pc, #216]	@ (8002a30 <block_fall+0x13c4>)
 8002956:	00c3      	lsls	r3, r0, #3
 8002958:	440b      	add	r3, r1
 800295a:	2100      	movs	r1, #0
 800295c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002960:	4b32      	ldr	r3, [pc, #200]	@ (8002a2c <block_fall+0x13c0>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <block_fall+0x13b0>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4a30      	ldr	r2, [pc, #192]	@ (8002a30 <block_fall+0x13c4>)
 800296e:	00c3      	lsls	r3, r0, #3
 8002970:	440b      	add	r3, r1
 8002972:	2100      	movs	r1, #0
 8002974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8002978:	4b29      	ldr	r3, [pc, #164]	@ (8002a20 <block_fall+0x13b4>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <block_fall+0x13a4>)
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	4611      	mov	r1, r2
 8002984:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <block_fall+0x13c4>)
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	2101      	movs	r1, #1
 800298c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002990:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <block_fall+0x13b8>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	4a1f      	ldr	r2, [pc, #124]	@ (8002a14 <block_fall+0x13a8>)
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	4611      	mov	r1, r2
 800299c:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <block_fall+0x13c4>)
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	2101      	movs	r1, #1
 80029a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 80029a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a28 <block_fall+0x13bc>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <block_fall+0x13ac>)
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <block_fall+0x13c4>)
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	2101      	movs	r1, #1
 80029bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <block_fall+0x13c0>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a15      	ldr	r2, [pc, #84]	@ (8002a1c <block_fall+0x13b0>)
 80029c8:	8812      	ldrh	r2, [r2, #0]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <block_fall+0x13c4>)
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	2101      	movs	r1, #1
 80029d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <block_fall+0x13b4>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <block_fall+0x13b4>)
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <block_fall+0x13b8>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <block_fall+0x13b8>)
 80029ee:	801a      	strh	r2, [r3, #0]
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <block_fall+0x13bc>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <block_fall+0x13bc>)
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <block_fall+0x13c0>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <block_fall+0x13c0>)
 8002a06:	801a      	strh	r2, [r3, #0]
 8002a08:	e0e5      	b.n	8002bd6 <block_fall+0x156a>
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000334 	.word	0x20000334
 8002a14:	20000338 	.word	0x20000338
 8002a18:	2000033c 	.word	0x2000033c
 8002a1c:	20000340 	.word	0x20000340
 8002a20:	20000336 	.word	0x20000336
 8002a24:	2000033a 	.word	0x2000033a
 8002a28:	2000033e 	.word	0x2000033e
 8002a2c:	20000342 	.word	0x20000342
 8002a30:	200001f4 	.word	0x200001f4
			else if(rotation == 2 || rotation == 3 || rotation == 4)
 8002a34:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf4 <block_fall+0x1588>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d008      	beq.n	8002a4e <block_fall+0x13e2>
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf4 <block_fall+0x1588>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d004      	beq.n	8002a4e <block_fall+0x13e2>
 8002a44:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf4 <block_fall+0x1588>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	f040 80c4 	bne.w	8002bd6 <block_fall+0x156a>
				DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <block_fall+0x158c>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <block_fall+0x1590>)
 8002a54:	8811      	ldrh	r1, [r2, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fed5 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8002a5e:	4b68      	ldr	r3, [pc, #416]	@ (8002c00 <block_fall+0x1594>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <block_fall+0x1598>)
 8002a64:	8811      	ldrh	r1, [r2, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fecd 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8002a6e:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <block_fall+0x159c>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	4a66      	ldr	r2, [pc, #408]	@ (8002c0c <block_fall+0x15a0>)
 8002a74:	8811      	ldrh	r1, [r2, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fec5 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8002a7e:	4b64      	ldr	r3, [pc, #400]	@ (8002c10 <block_fall+0x15a4>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	4a64      	ldr	r2, [pc, #400]	@ (8002c14 <block_fall+0x15a8>)
 8002a84:	8811      	ldrh	r1, [r2, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd febd 	bl	8000808 <DrawBlock>
				DrawBlock(x1_pos, y1_pos +1, LCD_COLOR_MAGENTA);
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf8 <block_fall+0x158c>)
 8002a90:	8818      	ldrh	r0, [r3, #0]
 8002a92:	4b5a      	ldr	r3, [pc, #360]	@ (8002bfc <block_fall+0x1590>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fd feb2 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos +1, LCD_COLOR_MAGENTA);
 8002aa4:	4b56      	ldr	r3, [pc, #344]	@ (8002c00 <block_fall+0x1594>)
 8002aa6:	8818      	ldrh	r0, [r3, #0]
 8002aa8:	4b56      	ldr	r3, [pc, #344]	@ (8002c04 <block_fall+0x1598>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fd fea7 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos +1, LCD_COLOR_MAGENTA);
 8002aba:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <block_fall+0x159c>)
 8002abc:	8818      	ldrh	r0, [r3, #0]
 8002abe:	4b53      	ldr	r3, [pc, #332]	@ (8002c0c <block_fall+0x15a0>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fd fe9c 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos +1, LCD_COLOR_MAGENTA);
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8002c10 <block_fall+0x15a4>)
 8002ad2:	8818      	ldrh	r0, [r3, #0]
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <block_fall+0x15a8>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fd fe91 	bl	8000808 <DrawBlock>
				game[y2_pos][x2_pos] = 0;
 8002ae6:	4b47      	ldr	r3, [pc, #284]	@ (8002c04 <block_fall+0x1598>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	4b44      	ldr	r3, [pc, #272]	@ (8002c00 <block_fall+0x1594>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	4a49      	ldr	r2, [pc, #292]	@ (8002c18 <block_fall+0x15ac>)
 8002af4:	00c3      	lsls	r3, r0, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	2100      	movs	r1, #0
 8002afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002afe:	4b41      	ldr	r3, [pc, #260]	@ (8002c04 <block_fall+0x1598>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	4b3e      	ldr	r3, [pc, #248]	@ (8002c00 <block_fall+0x1594>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4a43      	ldr	r2, [pc, #268]	@ (8002c18 <block_fall+0x15ac>)
 8002b0c:	00c3      	lsls	r3, r0, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	2100      	movs	r1, #0
 8002b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <block_fall+0x15a0>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c08 <block_fall+0x159c>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	4a3d      	ldr	r2, [pc, #244]	@ (8002c18 <block_fall+0x15ac>)
 8002b24:	00c3      	lsls	r3, r0, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	2100      	movs	r1, #0
 8002b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002b2e:	4b39      	ldr	r3, [pc, #228]	@ (8002c14 <block_fall+0x15a8>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <block_fall+0x15a4>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4a37      	ldr	r2, [pc, #220]	@ (8002c18 <block_fall+0x15ac>)
 8002b3c:	00c3      	lsls	r3, r0, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	2100      	movs	r1, #0
 8002b42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8002b46:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <block_fall+0x1590>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <block_fall+0x158c>)
 8002b4e:	8812      	ldrh	r2, [r2, #0]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <block_fall+0x15ac>)
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	2101      	movs	r1, #1
 8002b5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <block_fall+0x1598>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <block_fall+0x1594>)
 8002b66:	8812      	ldrh	r2, [r2, #0]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <block_fall+0x15ac>)
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	2101      	movs	r1, #1
 8002b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 8002b76:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <block_fall+0x15a0>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <block_fall+0x159c>)
 8002b7e:	8812      	ldrh	r2, [r2, #0]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4a25      	ldr	r2, [pc, #148]	@ (8002c18 <block_fall+0x15ac>)
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	2101      	movs	r1, #1
 8002b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	@ (8002c14 <block_fall+0x15a8>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <block_fall+0x15a4>)
 8002b96:	8812      	ldrh	r2, [r2, #0]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c18 <block_fall+0x15ac>)
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <block_fall+0x1590>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <block_fall+0x1590>)
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <block_fall+0x1598>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <block_fall+0x1598>)
 8002bbc:	801a      	strh	r2, [r3, #0]
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <block_fall+0x15a0>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <block_fall+0x15a0>)
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <block_fall+0x15a8>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <block_fall+0x15a8>)
 8002bd4:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 8002bd6:	f7fe fc53 	bl	8001480 <block_checkCollision>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f43f ae21 	beq.w	8002824 <block_fall+0x11b8>
		block_place();
 8002be2:	f7fe fcb3 	bl	800154c <block_place>
}
 8002be6:	e1fc      	b.n	8002fe2 <block_fall+0x1976>
	else if(block == t_shape)
 8002be8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <block_fall+0x15b0>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	f040 81f8 	bne.w	8002fe2 <block_fall+0x1976>
		while(block_checkCollision() == 0)
 8002bf2:	e1ee      	b.n	8002fd2 <block_fall+0x1966>
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000334 	.word	0x20000334
 8002bfc:	20000336 	.word	0x20000336
 8002c00:	20000338 	.word	0x20000338
 8002c04:	2000033a 	.word	0x2000033a
 8002c08:	2000033c 	.word	0x2000033c
 8002c0c:	2000033e 	.word	0x2000033e
 8002c10:	20000340 	.word	0x20000340
 8002c14:	20000342 	.word	0x20000342
 8002c18:	200001f4 	.word	0x200001f4
 8002c1c:	20000344 	.word	0x20000344
			HAL_Delay(1000);
 8002c20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c24:	f003 fedc 	bl	80069e0 <HAL_Delay>
			if(rotation == 1)
 8002c28:	4b77      	ldr	r3, [pc, #476]	@ (8002e08 <block_fall+0x179c>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80ff 	bne.w	8002e30 <block_fall+0x17c4>
				int16_t x1 = 24*x1_pos; int16_t x2 =24*x2_pos;
 8002c32:	4b76      	ldr	r3, [pc, #472]	@ (8002e0c <block_fall+0x17a0>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	0052      	lsls	r2, r2, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8002c44:	4b72      	ldr	r3, [pc, #456]	@ (8002e10 <block_fall+0x17a4>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	0052      	lsls	r2, r2, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
				int16_t x3 = 24*x3_pos; int16_t x4 =24*x4_pos;
 8002c56:	4b6f      	ldr	r3, [pc, #444]	@ (8002e14 <block_fall+0x17a8>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	0052      	lsls	r2, r2, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8002c68:	4b6b      	ldr	r3, [pc, #428]	@ (8002e18 <block_fall+0x17ac>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	0052      	lsls	r2, r2, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
				int16_t y1 = 24*y1_pos; int16_t y2 =24*y2_pos;
 8002c7a:	4b68      	ldr	r3, [pc, #416]	@ (8002e1c <block_fall+0x17b0>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	0052      	lsls	r2, r2, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002c8c:	4b64      	ldr	r3, [pc, #400]	@ (8002e20 <block_fall+0x17b4>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	0052      	lsls	r2, r2, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				int16_t y3 = 24*y3_pos; int16_t y4 =24*y4_pos;
 8002c9e:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <block_fall+0x17b8>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	0052      	lsls	r2, r2, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8002cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8002e28 <block_fall+0x17bc>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	0052      	lsls	r2, r2, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
				spawn_t(x1,y1,LCD_COLOR_BLACK);
 8002cc2:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 8002cc6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe f8c8 	bl	8000e62 <spawn_t>
				y1 = y1+24; y2 = y2+24; y3 = y3+24; y4 = y4+24;
 8002cd2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002cd6:	3318      	adds	r3, #24
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002cde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002cea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002cee:	3318      	adds	r3, #24
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8002cf6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
				spawn_t(x1,y1,LCD_COLOR_BLUE2);
 8002d02:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 8002d06:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d0a:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe f8a7 	bl	8000e62 <spawn_t>
				game[y2_pos][x2_pos] = 0;
 8002d14:	4b42      	ldr	r3, [pc, #264]	@ (8002e20 <block_fall+0x17b4>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <block_fall+0x17a4>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4a42      	ldr	r2, [pc, #264]	@ (8002e2c <block_fall+0x17c0>)
 8002d22:	00c3      	lsls	r3, r0, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	2100      	movs	r1, #0
 8002d28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e20 <block_fall+0x17b4>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	4b37      	ldr	r3, [pc, #220]	@ (8002e10 <block_fall+0x17a4>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	4619      	mov	r1, r3
 8002d38:	4a3c      	ldr	r2, [pc, #240]	@ (8002e2c <block_fall+0x17c0>)
 8002d3a:	00c3      	lsls	r3, r0, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8002d44:	4b37      	ldr	r3, [pc, #220]	@ (8002e24 <block_fall+0x17b8>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	4b32      	ldr	r3, [pc, #200]	@ (8002e14 <block_fall+0x17a8>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4a36      	ldr	r2, [pc, #216]	@ (8002e2c <block_fall+0x17c0>)
 8002d52:	00c3      	lsls	r3, r0, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	2100      	movs	r1, #0
 8002d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <block_fall+0x17bc>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	4b2d      	ldr	r3, [pc, #180]	@ (8002e18 <block_fall+0x17ac>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	4a30      	ldr	r2, [pc, #192]	@ (8002e2c <block_fall+0x17c0>)
 8002d6a:	00c3      	lsls	r3, r0, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8002d74:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <block_fall+0x17b0>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	4a24      	ldr	r2, [pc, #144]	@ (8002e0c <block_fall+0x17a0>)
 8002d7c:	8812      	ldrh	r2, [r2, #0]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4a2a      	ldr	r2, [pc, #168]	@ (8002e2c <block_fall+0x17c0>)
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	2101      	movs	r1, #1
 8002d88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002d8c:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <block_fall+0x17b4>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	4a1f      	ldr	r2, [pc, #124]	@ (8002e10 <block_fall+0x17a4>)
 8002d94:	8812      	ldrh	r2, [r2, #0]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4a24      	ldr	r2, [pc, #144]	@ (8002e2c <block_fall+0x17c0>)
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	2101      	movs	r1, #1
 8002da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 8002da4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <block_fall+0x17b8>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a1a      	ldr	r2, [pc, #104]	@ (8002e14 <block_fall+0x17a8>)
 8002dac:	8812      	ldrh	r2, [r2, #0]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e2c <block_fall+0x17c0>)
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	2101      	movs	r1, #1
 8002db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <block_fall+0x17bc>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <block_fall+0x17ac>)
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <block_fall+0x17c0>)
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <block_fall+0x17b0>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <block_fall+0x17b0>)
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <block_fall+0x17b4>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <block_fall+0x17b4>)
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <block_fall+0x17b8>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <block_fall+0x17b8>)
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <block_fall+0x17bc>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <block_fall+0x17bc>)
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	e0e5      	b.n	8002fd2 <block_fall+0x1966>
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000334 	.word	0x20000334
 8002e10:	20000338 	.word	0x20000338
 8002e14:	2000033c 	.word	0x2000033c
 8002e18:	20000340 	.word	0x20000340
 8002e1c:	20000336 	.word	0x20000336
 8002e20:	2000033a 	.word	0x2000033a
 8002e24:	2000033e 	.word	0x2000033e
 8002e28:	20000342 	.word	0x20000342
 8002e2c:	200001f4 	.word	0x200001f4
			else if(rotation == 2 || rotation == 3 || rotation == 4)
 8002e30:	4b6e      	ldr	r3, [pc, #440]	@ (8002fec <block_fall+0x1980>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d008      	beq.n	8002e4a <block_fall+0x17de>
 8002e38:	4b6c      	ldr	r3, [pc, #432]	@ (8002fec <block_fall+0x1980>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d004      	beq.n	8002e4a <block_fall+0x17de>
 8002e40:	4b6a      	ldr	r3, [pc, #424]	@ (8002fec <block_fall+0x1980>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	f040 80c4 	bne.w	8002fd2 <block_fall+0x1966>
				DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8002e4a:	4b69      	ldr	r3, [pc, #420]	@ (8002ff0 <block_fall+0x1984>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	4a69      	ldr	r2, [pc, #420]	@ (8002ff4 <block_fall+0x1988>)
 8002e50:	8811      	ldrh	r1, [r2, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fcd7 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8002e5a:	4b67      	ldr	r3, [pc, #412]	@ (8002ff8 <block_fall+0x198c>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	4a67      	ldr	r2, [pc, #412]	@ (8002ffc <block_fall+0x1990>)
 8002e60:	8811      	ldrh	r1, [r2, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fccf 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	@ (8003000 <block_fall+0x1994>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	4a65      	ldr	r2, [pc, #404]	@ (8003004 <block_fall+0x1998>)
 8002e70:	8811      	ldrh	r1, [r2, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fcc7 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <block_fall+0x199c>)
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	4a63      	ldr	r2, [pc, #396]	@ (800300c <block_fall+0x19a0>)
 8002e80:	8811      	ldrh	r1, [r2, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fcbf 	bl	8000808 <DrawBlock>
				DrawBlock(x1_pos, y1_pos +1, LCD_COLOR_BLUE2);
 8002e8a:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <block_fall+0x1984>)
 8002e8c:	8818      	ldrh	r0, [r3, #0]
 8002e8e:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <block_fall+0x1988>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7fd fcb4 	bl	8000808 <DrawBlock>
				DrawBlock(x2_pos, y2_pos +1, LCD_COLOR_BLUE2);
 8002ea0:	4b55      	ldr	r3, [pc, #340]	@ (8002ff8 <block_fall+0x198c>)
 8002ea2:	8818      	ldrh	r0, [r3, #0]
 8002ea4:	4b55      	ldr	r3, [pc, #340]	@ (8002ffc <block_fall+0x1990>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd fca9 	bl	8000808 <DrawBlock>
				DrawBlock(x3_pos, y3_pos +1, LCD_COLOR_BLUE2);
 8002eb6:	4b52      	ldr	r3, [pc, #328]	@ (8003000 <block_fall+0x1994>)
 8002eb8:	8818      	ldrh	r0, [r3, #0]
 8002eba:	4b52      	ldr	r3, [pc, #328]	@ (8003004 <block_fall+0x1998>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fc9e 	bl	8000808 <DrawBlock>
				DrawBlock(x4_pos, y4_pos +1, LCD_COLOR_BLUE2);
 8002ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8003008 <block_fall+0x199c>)
 8002ece:	8818      	ldrh	r0, [r3, #0]
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800300c <block_fall+0x19a0>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fc93 	bl	8000808 <DrawBlock>
				game[y2_pos][x2_pos] = 0;
 8002ee2:	4b46      	ldr	r3, [pc, #280]	@ (8002ffc <block_fall+0x1990>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4b43      	ldr	r3, [pc, #268]	@ (8002ff8 <block_fall+0x198c>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	4619      	mov	r1, r3
 8002eee:	4a48      	ldr	r2, [pc, #288]	@ (8003010 <block_fall+0x19a4>)
 8002ef0:	00c3      	lsls	r3, r0, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos][x2_pos] = 0;
 8002efa:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <block_fall+0x1990>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff8 <block_fall+0x198c>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4a42      	ldr	r2, [pc, #264]	@ (8003010 <block_fall+0x19a4>)
 8002f08:	00c3      	lsls	r3, r0, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos][x3_pos] = 0;
 8002f12:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <block_fall+0x1998>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <block_fall+0x1994>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8003010 <block_fall+0x19a4>)
 8002f20:	00c3      	lsls	r3, r0, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	2100      	movs	r1, #0
 8002f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos][x4_pos] = 0;
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <block_fall+0x19a0>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4b35      	ldr	r3, [pc, #212]	@ (8003008 <block_fall+0x199c>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	4a36      	ldr	r2, [pc, #216]	@ (8003010 <block_fall+0x19a4>)
 8002f38:	00c3      	lsls	r3, r0, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y1_pos+1][x1_pos] =1;
 8002f42:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <block_fall+0x1988>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a29      	ldr	r2, [pc, #164]	@ (8002ff0 <block_fall+0x1984>)
 8002f4a:	8812      	ldrh	r2, [r2, #0]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <block_fall+0x19a4>)
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	2101      	movs	r1, #1
 8002f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y2_pos+1][x2_pos] =1;
 8002f5a:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <block_fall+0x1990>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a25      	ldr	r2, [pc, #148]	@ (8002ff8 <block_fall+0x198c>)
 8002f62:	8812      	ldrh	r2, [r2, #0]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4a2a      	ldr	r2, [pc, #168]	@ (8003010 <block_fall+0x19a4>)
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y3_pos+1][x3_pos] =1;
 8002f72:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <block_fall+0x1998>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a21      	ldr	r2, [pc, #132]	@ (8003000 <block_fall+0x1994>)
 8002f7a:	8812      	ldrh	r2, [r2, #0]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4a24      	ldr	r2, [pc, #144]	@ (8003010 <block_fall+0x19a4>)
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	2101      	movs	r1, #1
 8002f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				game[y4_pos+1][x4_pos] =1;
 8002f8a:	4b20      	ldr	r3, [pc, #128]	@ (800300c <block_fall+0x19a0>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <block_fall+0x199c>)
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <block_fall+0x19a4>)
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				y1_pos++; y2_pos++; y3_pos++; y4_pos++;
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <block_fall+0x1988>)
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <block_fall+0x1988>)
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <block_fall+0x1990>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <block_fall+0x1990>)
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <block_fall+0x1998>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <block_fall+0x1998>)
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <block_fall+0x19a0>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <block_fall+0x19a0>)
 8002fd0:	801a      	strh	r2, [r3, #0]
		while(block_checkCollision() == 0)
 8002fd2:	f7fe fa55 	bl	8001480 <block_checkCollision>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f43f ae21 	beq.w	8002c20 <block_fall+0x15b4>
		block_place();
 8002fde:	f7fe fab5 	bl	800154c <block_place>
}
 8002fe2:	bf00      	nop
 8002fe4:	3770      	adds	r7, #112	@ 0x70
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000334 	.word	0x20000334
 8002ff4:	20000336 	.word	0x20000336
 8002ff8:	20000338 	.word	0x20000338
 8002ffc:	2000033a 	.word	0x2000033a
 8003000:	2000033c 	.word	0x2000033c
 8003004:	2000033e 	.word	0x2000033e
 8003008:	20000340 	.word	0x20000340
 800300c:	20000342 	.word	0x20000342
 8003010:	200001f4 	.word	0x200001f4

08003014 <block_rotate>:

void block_rotate()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0b6      	sub	sp, #216	@ 0xd8
 8003018:	af00      	add	r7, sp, #0
	if(block == square) //lmao it cant rotate
 800301a:	4b5f      	ldr	r3, [pc, #380]	@ (8003198 <block_rotate+0x184>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <block_rotate+0x22>
	{
		if(rotation > 4)
 8003022:	4b5e      	ldr	r3, [pc, #376]	@ (800319c <block_rotate+0x188>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2b04      	cmp	r3, #4
 8003028:	f241 8623 	bls.w	8004c72 <block_rotate+0x1c5e>
			rotation = 1;
 800302c:	4b5b      	ldr	r3, [pc, #364]	@ (800319c <block_rotate+0x188>)
 800302e:	2201      	movs	r2, #1
 8003030:	801a      	strh	r2, [r3, #0]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
		}
	}
}
 8003032:	f001 be1e 	b.w	8004c72 <block_rotate+0x1c5e>
	else if(block == rect)
 8003036:	4b58      	ldr	r3, [pc, #352]	@ (8003198 <block_rotate+0x184>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 8176 	bne.w	800332c <block_rotate+0x318>
		if(rotation > 4)
 8003040:	4b56      	ldr	r3, [pc, #344]	@ (800319c <block_rotate+0x188>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d902      	bls.n	800304e <block_rotate+0x3a>
			rotation = 1;
 8003048:	4b54      	ldr	r3, [pc, #336]	@ (800319c <block_rotate+0x188>)
 800304a:	2201      	movs	r2, #1
 800304c:	801a      	strh	r2, [r3, #0]
		if(rotation == 1 || rotation == 3)
 800304e:	4b53      	ldr	r3, [pc, #332]	@ (800319c <block_rotate+0x188>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d004      	beq.n	8003060 <block_rotate+0x4c>
 8003056:	4b51      	ldr	r3, [pc, #324]	@ (800319c <block_rotate+0x188>)
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	2b03      	cmp	r3, #3
 800305c:	f040 80b2 	bne.w	80031c4 <block_rotate+0x1b0>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos + 1;
 8003060:	4b4f      	ldr	r3, [pc, #316]	@ (80031a0 <block_rotate+0x18c>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	817b      	strh	r3, [r7, #10]
 8003068:	4b4e      	ldr	r3, [pc, #312]	@ (80031a4 <block_rotate+0x190>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	813b      	strh	r3, [r7, #8]
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos + 2;
 8003070:	4b4d      	ldr	r3, [pc, #308]	@ (80031a8 <block_rotate+0x194>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	3b02      	subs	r3, #2
 8003076:	80fb      	strh	r3, [r7, #6]
 8003078:	4b4c      	ldr	r3, [pc, #304]	@ (80031ac <block_rotate+0x198>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	3302      	adds	r3, #2
 800307e:	80bb      	strh	r3, [r7, #4]
			uint16_t nx4 = x4_pos - 3; uint16_t ny4 = y4_pos + 3;
 8003080:	4b4b      	ldr	r3, [pc, #300]	@ (80031b0 <block_rotate+0x19c>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	3b03      	subs	r3, #3
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <block_rotate+0x1a0>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	3303      	adds	r3, #3
 800308e:	803b      	strh	r3, [r7, #0]
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8003090:	4b49      	ldr	r3, [pc, #292]	@ (80031b8 <block_rotate+0x1a4>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	4a49      	ldr	r2, [pc, #292]	@ (80031bc <block_rotate+0x1a8>)
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fbb4 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 80030a0:	4b3f      	ldr	r3, [pc, #252]	@ (80031a0 <block_rotate+0x18c>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	4a3f      	ldr	r2, [pc, #252]	@ (80031a4 <block_rotate+0x190>)
 80030a6:	8811      	ldrh	r1, [r2, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fbac 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80030b0:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <block_rotate+0x194>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	4a3d      	ldr	r2, [pc, #244]	@ (80031ac <block_rotate+0x198>)
 80030b6:	8811      	ldrh	r1, [r2, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fba4 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80030c0:	4b3b      	ldr	r3, [pc, #236]	@ (80031b0 <block_rotate+0x19c>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	4a3b      	ldr	r2, [pc, #236]	@ (80031b4 <block_rotate+0x1a0>)
 80030c6:	8811      	ldrh	r1, [r2, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fb9c 	bl	8000808 <DrawBlock>
			spawn_rect(x1_pos*24, y1_pos*24, LCD_COLOR_BLUE);
 80030d0:	4b39      	ldr	r3, [pc, #228]	@ (80031b8 <block_rotate+0x1a4>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	0052      	lsls	r2, r2, #1
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b218      	sxth	r0, r3
 80030e0:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <block_rotate+0x1a8>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	0052      	lsls	r2, r2, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	221f      	movs	r2, #31
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fd fc6c 	bl	80009d0 <spawn_rect>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 80030f8:	4b2a      	ldr	r3, [pc, #168]	@ (80031a4 <block_rotate+0x190>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <block_rotate+0x18c>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4a2e      	ldr	r2, [pc, #184]	@ (80031c0 <block_rotate+0x1ac>)
 8003106:	00c3      	lsls	r3, r0, #3
 8003108:	440b      	add	r3, r1
 800310a:	2100      	movs	r1, #0
 800310c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003110:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <block_rotate+0x198>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <block_rotate+0x194>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	4a28      	ldr	r2, [pc, #160]	@ (80031c0 <block_rotate+0x1ac>)
 800311e:	00c3      	lsls	r3, r0, #3
 8003120:	440b      	add	r3, r1
 8003122:	2100      	movs	r1, #0
 8003124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003128:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <block_rotate+0x1a0>)
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <block_rotate+0x19c>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	4a22      	ldr	r2, [pc, #136]	@ (80031c0 <block_rotate+0x1ac>)
 8003136:	00c3      	lsls	r3, r0, #3
 8003138:	440b      	add	r3, r1
 800313a:	2100      	movs	r1, #0
 800313c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003140:	893a      	ldrh	r2, [r7, #8]
 8003142:	897b      	ldrh	r3, [r7, #10]
 8003144:	491e      	ldr	r1, [pc, #120]	@ (80031c0 <block_rotate+0x1ac>)
 8003146:	00d2      	lsls	r2, r2, #3
 8003148:	4413      	add	r3, r2
 800314a:	2201      	movs	r2, #1
 800314c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003150:	88ba      	ldrh	r2, [r7, #4]
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	491a      	ldr	r1, [pc, #104]	@ (80031c0 <block_rotate+0x1ac>)
 8003156:	00d2      	lsls	r2, r2, #3
 8003158:	4413      	add	r3, r2
 800315a:	2201      	movs	r2, #1
 800315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003160:	883a      	ldrh	r2, [r7, #0]
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	4916      	ldr	r1, [pc, #88]	@ (80031c0 <block_rotate+0x1ac>)
 8003166:	00d2      	lsls	r2, r2, #3
 8003168:	4413      	add	r3, r2
 800316a:	2201      	movs	r2, #1
 800316c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003170:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <block_rotate+0x190>)
 8003172:	893b      	ldrh	r3, [r7, #8]
 8003174:	8013      	strh	r3, [r2, #0]
 8003176:	4a0d      	ldr	r2, [pc, #52]	@ (80031ac <block_rotate+0x198>)
 8003178:	88bb      	ldrh	r3, [r7, #4]
 800317a:	8013      	strh	r3, [r2, #0]
 800317c:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <block_rotate+0x1a0>)
 800317e:	883b      	ldrh	r3, [r7, #0]
 8003180:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003182:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <block_rotate+0x18c>)
 8003184:	897b      	ldrh	r3, [r7, #10]
 8003186:	8013      	strh	r3, [r2, #0]
 8003188:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <block_rotate+0x194>)
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	8013      	strh	r3, [r2, #0]
 800318e:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <block_rotate+0x19c>)
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	8013      	strh	r3, [r2, #0]
		{
 8003194:	f001 bd6d 	b.w	8004c72 <block_rotate+0x1c5e>
 8003198:	20000344 	.word	0x20000344
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000338 	.word	0x20000338
 80031a4:	2000033a 	.word	0x2000033a
 80031a8:	2000033c 	.word	0x2000033c
 80031ac:	2000033e 	.word	0x2000033e
 80031b0:	20000340 	.word	0x20000340
 80031b4:	20000342 	.word	0x20000342
 80031b8:	20000334 	.word	0x20000334
 80031bc:	20000336 	.word	0x20000336
 80031c0:	200001f4 	.word	0x200001f4
		else if(rotation == 2 || rotation == 4)
 80031c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003304 <block_rotate+0x2f0>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d004      	beq.n	80031d6 <block_rotate+0x1c2>
 80031cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003304 <block_rotate+0x2f0>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	f041 854e 	bne.w	8004c72 <block_rotate+0x1c5e>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos - 1;
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <block_rotate+0x2f4>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	82fb      	strh	r3, [r7, #22]
 80031de:	4b4b      	ldr	r3, [pc, #300]	@ (800330c <block_rotate+0x2f8>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	82bb      	strh	r3, [r7, #20]
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos - 2;
 80031e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003310 <block_rotate+0x2fc>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	3302      	adds	r3, #2
 80031ec:	827b      	strh	r3, [r7, #18]
 80031ee:	4b49      	ldr	r3, [pc, #292]	@ (8003314 <block_rotate+0x300>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	3b02      	subs	r3, #2
 80031f4:	823b      	strh	r3, [r7, #16]
			uint16_t nx4 = x4_pos + 3; uint16_t ny4 = y4_pos - 3;
 80031f6:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <block_rotate+0x304>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3303      	adds	r3, #3
 80031fc:	81fb      	strh	r3, [r7, #14]
 80031fe:	4b47      	ldr	r3, [pc, #284]	@ (800331c <block_rotate+0x308>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	3b03      	subs	r3, #3
 8003204:	81bb      	strh	r3, [r7, #12]
			spawn_rect(x1_pos *24, y1_pos*24, LCD_COLOR_BLACK);
 8003206:	4b46      	ldr	r3, [pc, #280]	@ (8003320 <block_rotate+0x30c>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	0052      	lsls	r2, r2, #1
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	b29b      	uxth	r3, r3
 8003214:	b218      	sxth	r0, r3
 8003216:	4b43      	ldr	r3, [pc, #268]	@ (8003324 <block_rotate+0x310>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	0052      	lsls	r2, r2, #1
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	b29b      	uxth	r3, r3
 8003224:	b21b      	sxth	r3, r3
 8003226:	2200      	movs	r2, #0
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fbd1 	bl	80009d0 <spawn_rect>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLUE);
 800322e:	4b3c      	ldr	r3, [pc, #240]	@ (8003320 <block_rotate+0x30c>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	4a3c      	ldr	r2, [pc, #240]	@ (8003324 <block_rotate+0x310>)
 8003234:	8811      	ldrh	r1, [r2, #0]
 8003236:	221f      	movs	r2, #31
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fae5 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_BLUE);
 800323e:	8ab9      	ldrh	r1, [r7, #20]
 8003240:	8afb      	ldrh	r3, [r7, #22]
 8003242:	221f      	movs	r2, #31
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fadf 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_BLUE);
 800324a:	8a39      	ldrh	r1, [r7, #16]
 800324c:	8a7b      	ldrh	r3, [r7, #18]
 800324e:	221f      	movs	r2, #31
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd fad9 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_BLUE);
 8003256:	89b9      	ldrh	r1, [r7, #12]
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	221f      	movs	r2, #31
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fad3 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8003262:	4b2a      	ldr	r3, [pc, #168]	@ (800330c <block_rotate+0x2f8>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <block_rotate+0x2f4>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	4a2e      	ldr	r2, [pc, #184]	@ (8003328 <block_rotate+0x314>)
 8003270:	00c3      	lsls	r3, r0, #3
 8003272:	440b      	add	r3, r1
 8003274:	2100      	movs	r1, #0
 8003276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800327a:	4b26      	ldr	r3, [pc, #152]	@ (8003314 <block_rotate+0x300>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	4b23      	ldr	r3, [pc, #140]	@ (8003310 <block_rotate+0x2fc>)
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	4619      	mov	r1, r3
 8003286:	4a28      	ldr	r2, [pc, #160]	@ (8003328 <block_rotate+0x314>)
 8003288:	00c3      	lsls	r3, r0, #3
 800328a:	440b      	add	r3, r1
 800328c:	2100      	movs	r1, #0
 800328e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003292:	4b22      	ldr	r3, [pc, #136]	@ (800331c <block_rotate+0x308>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	4b1f      	ldr	r3, [pc, #124]	@ (8003318 <block_rotate+0x304>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	4a22      	ldr	r2, [pc, #136]	@ (8003328 <block_rotate+0x314>)
 80032a0:	00c3      	lsls	r3, r0, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	2100      	movs	r1, #0
 80032a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 80032aa:	8aba      	ldrh	r2, [r7, #20]
 80032ac:	8afb      	ldrh	r3, [r7, #22]
 80032ae:	491e      	ldr	r1, [pc, #120]	@ (8003328 <block_rotate+0x314>)
 80032b0:	00d2      	lsls	r2, r2, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	2201      	movs	r2, #1
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80032ba:	8a3a      	ldrh	r2, [r7, #16]
 80032bc:	8a7b      	ldrh	r3, [r7, #18]
 80032be:	491a      	ldr	r1, [pc, #104]	@ (8003328 <block_rotate+0x314>)
 80032c0:	00d2      	lsls	r2, r2, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	2201      	movs	r2, #1
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80032ca:	89ba      	ldrh	r2, [r7, #12]
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	4916      	ldr	r1, [pc, #88]	@ (8003328 <block_rotate+0x314>)
 80032d0:	00d2      	lsls	r2, r2, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	2201      	movs	r2, #1
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 80032da:	4a0c      	ldr	r2, [pc, #48]	@ (800330c <block_rotate+0x2f8>)
 80032dc:	8abb      	ldrh	r3, [r7, #20]
 80032de:	8013      	strh	r3, [r2, #0]
 80032e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003314 <block_rotate+0x300>)
 80032e2:	8a3b      	ldrh	r3, [r7, #16]
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <block_rotate+0x308>)
 80032e8:	89bb      	ldrh	r3, [r7, #12]
 80032ea:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 80032ec:	4a06      	ldr	r2, [pc, #24]	@ (8003308 <block_rotate+0x2f4>)
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	8013      	strh	r3, [r2, #0]
 80032f2:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <block_rotate+0x2fc>)
 80032f4:	8a7b      	ldrh	r3, [r7, #18]
 80032f6:	8013      	strh	r3, [r2, #0]
 80032f8:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <block_rotate+0x304>)
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	8013      	strh	r3, [r2, #0]
}
 80032fe:	f001 bcb8 	b.w	8004c72 <block_rotate+0x1c5e>
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000
 8003308:	20000338 	.word	0x20000338
 800330c:	2000033a 	.word	0x2000033a
 8003310:	2000033c 	.word	0x2000033c
 8003314:	2000033e 	.word	0x2000033e
 8003318:	20000340 	.word	0x20000340
 800331c:	20000342 	.word	0x20000342
 8003320:	20000334 	.word	0x20000334
 8003324:	20000336 	.word	0x20000336
 8003328:	200001f4 	.word	0x200001f4
	else if(block == s_shape)
 800332c:	4b58      	ldr	r3, [pc, #352]	@ (8003490 <block_rotate+0x47c>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	2b02      	cmp	r3, #2
 8003332:	f040 8179 	bne.w	8003628 <block_rotate+0x614>
		if(rotation > 4)
 8003336:	4b57      	ldr	r3, [pc, #348]	@ (8003494 <block_rotate+0x480>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	2b04      	cmp	r3, #4
 800333c:	d902      	bls.n	8003344 <block_rotate+0x330>
			rotation = 1;
 800333e:	4b55      	ldr	r3, [pc, #340]	@ (8003494 <block_rotate+0x480>)
 8003340:	2201      	movs	r2, #1
 8003342:	801a      	strh	r2, [r3, #0]
		if(rotation == 1 || rotation == 3)
 8003344:	4b53      	ldr	r3, [pc, #332]	@ (8003494 <block_rotate+0x480>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d004      	beq.n	8003356 <block_rotate+0x342>
 800334c:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <block_rotate+0x480>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	2b03      	cmp	r3, #3
 8003352:	f040 80b3 	bne.w	80034bc <block_rotate+0x4a8>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos + 1;
 8003356:	4b50      	ldr	r3, [pc, #320]	@ (8003498 <block_rotate+0x484>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800335e:	4b4f      	ldr	r3, [pc, #316]	@ (800349c <block_rotate+0x488>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	843b      	strh	r3, [r7, #32]
			uint16_t nx3 = x3_pos - 1; uint16_t ny3 = y3_pos + 1;
 8003366:	4b4e      	ldr	r3, [pc, #312]	@ (80034a0 <block_rotate+0x48c>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	3b01      	subs	r3, #1
 800336c:	83fb      	strh	r3, [r7, #30]
 800336e:	4b4d      	ldr	r3, [pc, #308]	@ (80034a4 <block_rotate+0x490>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	83bb      	strh	r3, [r7, #28]
			uint16_t nx4 = x4_pos - 2; uint16_t ny4 = y4_pos;
 8003376:	4b4c      	ldr	r3, [pc, #304]	@ (80034a8 <block_rotate+0x494>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	3b02      	subs	r3, #2
 800337c:	837b      	strh	r3, [r7, #26]
 800337e:	4b4b      	ldr	r3, [pc, #300]	@ (80034ac <block_rotate+0x498>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	833b      	strh	r3, [r7, #24]
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8003384:	4b4a      	ldr	r3, [pc, #296]	@ (80034b0 <block_rotate+0x49c>)
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	4a4a      	ldr	r2, [pc, #296]	@ (80034b4 <block_rotate+0x4a0>)
 800338a:	8811      	ldrh	r1, [r2, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fa3a 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8003394:	4b40      	ldr	r3, [pc, #256]	@ (8003498 <block_rotate+0x484>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	4a40      	ldr	r2, [pc, #256]	@ (800349c <block_rotate+0x488>)
 800339a:	8811      	ldrh	r1, [r2, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fa32 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80033a4:	4b3e      	ldr	r3, [pc, #248]	@ (80034a0 <block_rotate+0x48c>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	4a3e      	ldr	r2, [pc, #248]	@ (80034a4 <block_rotate+0x490>)
 80033aa:	8811      	ldrh	r1, [r2, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fa2a 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80033b4:	4b3c      	ldr	r3, [pc, #240]	@ (80034a8 <block_rotate+0x494>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	4a3c      	ldr	r2, [pc, #240]	@ (80034ac <block_rotate+0x498>)
 80033ba:	8811      	ldrh	r1, [r2, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd fa22 	bl	8000808 <DrawBlock>
			spawn_s(x1_pos *24, y1_pos*24, LCD_COLOR_RED);
 80033c4:	4b3a      	ldr	r3, [pc, #232]	@ (80034b0 <block_rotate+0x49c>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	0052      	lsls	r2, r2, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b218      	sxth	r0, r3
 80033d4:	4b37      	ldr	r3, [pc, #220]	@ (80034b4 <block_rotate+0x4a0>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	0052      	lsls	r2, r2, #1
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80033e8:	4619      	mov	r1, r3
 80033ea:	f7fd fb3a 	bl	8000a62 <spawn_s>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 80033ee:	4b2b      	ldr	r3, [pc, #172]	@ (800349c <block_rotate+0x488>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <block_rotate+0x484>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4a2f      	ldr	r2, [pc, #188]	@ (80034b8 <block_rotate+0x4a4>)
 80033fc:	00c3      	lsls	r3, r0, #3
 80033fe:	440b      	add	r3, r1
 8003400:	2100      	movs	r1, #0
 8003402:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003406:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <block_rotate+0x490>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <block_rotate+0x48c>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	4a29      	ldr	r2, [pc, #164]	@ (80034b8 <block_rotate+0x4a4>)
 8003414:	00c3      	lsls	r3, r0, #3
 8003416:	440b      	add	r3, r1
 8003418:	2100      	movs	r1, #0
 800341a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800341e:	4b23      	ldr	r3, [pc, #140]	@ (80034ac <block_rotate+0x498>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <block_rotate+0x494>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	4a23      	ldr	r2, [pc, #140]	@ (80034b8 <block_rotate+0x4a4>)
 800342c:	00c3      	lsls	r3, r0, #3
 800342e:	440b      	add	r3, r1
 8003430:	2100      	movs	r1, #0
 8003432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003436:	8c3a      	ldrh	r2, [r7, #32]
 8003438:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800343a:	491f      	ldr	r1, [pc, #124]	@ (80034b8 <block_rotate+0x4a4>)
 800343c:	00d2      	lsls	r2, r2, #3
 800343e:	4413      	add	r3, r2
 8003440:	2201      	movs	r2, #1
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003446:	8bba      	ldrh	r2, [r7, #28]
 8003448:	8bfb      	ldrh	r3, [r7, #30]
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <block_rotate+0x4a4>)
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	4413      	add	r3, r2
 8003450:	2201      	movs	r2, #1
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003456:	8b3a      	ldrh	r2, [r7, #24]
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	4917      	ldr	r1, [pc, #92]	@ (80034b8 <block_rotate+0x4a4>)
 800345c:	00d2      	lsls	r2, r2, #3
 800345e:	4413      	add	r3, r2
 8003460:	2201      	movs	r2, #1
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003466:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <block_rotate+0x488>)
 8003468:	8c3b      	ldrh	r3, [r7, #32]
 800346a:	8013      	strh	r3, [r2, #0]
 800346c:	4a0d      	ldr	r2, [pc, #52]	@ (80034a4 <block_rotate+0x490>)
 800346e:	8bbb      	ldrh	r3, [r7, #28]
 8003470:	8013      	strh	r3, [r2, #0]
 8003472:	4a0e      	ldr	r2, [pc, #56]	@ (80034ac <block_rotate+0x498>)
 8003474:	8b3b      	ldrh	r3, [r7, #24]
 8003476:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003478:	4a07      	ldr	r2, [pc, #28]	@ (8003498 <block_rotate+0x484>)
 800347a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800347c:	8013      	strh	r3, [r2, #0]
 800347e:	4a08      	ldr	r2, [pc, #32]	@ (80034a0 <block_rotate+0x48c>)
 8003480:	8bfb      	ldrh	r3, [r7, #30]
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <block_rotate+0x494>)
 8003486:	8b7b      	ldrh	r3, [r7, #26]
 8003488:	8013      	strh	r3, [r2, #0]
		{
 800348a:	f001 bbf2 	b.w	8004c72 <block_rotate+0x1c5e>
 800348e:	bf00      	nop
 8003490:	20000344 	.word	0x20000344
 8003494:	20000000 	.word	0x20000000
 8003498:	20000338 	.word	0x20000338
 800349c:	2000033a 	.word	0x2000033a
 80034a0:	2000033c 	.word	0x2000033c
 80034a4:	2000033e 	.word	0x2000033e
 80034a8:	20000340 	.word	0x20000340
 80034ac:	20000342 	.word	0x20000342
 80034b0:	20000334 	.word	0x20000334
 80034b4:	20000336 	.word	0x20000336
 80034b8:	200001f4 	.word	0x200001f4
		else if(rotation == 2 || rotation ==4)
 80034bc:	4b50      	ldr	r3, [pc, #320]	@ (8003600 <block_rotate+0x5ec>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d004      	beq.n	80034ce <block_rotate+0x4ba>
 80034c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003600 <block_rotate+0x5ec>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	f041 83d2 	bne.w	8004c72 <block_rotate+0x1c5e>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos - 1;
 80034ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003604 <block_rotate+0x5f0>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80034d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003608 <block_rotate+0x5f4>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	3b01      	subs	r3, #1
 80034dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			uint16_t nx3 = x3_pos + 1; uint16_t ny3 = y3_pos - 1;
 80034de:	4b4b      	ldr	r3, [pc, #300]	@ (800360c <block_rotate+0x5f8>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80034e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <block_rotate+0x5fc>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	853b      	strh	r3, [r7, #40]	@ 0x28
			uint16_t nx4 = x4_pos + 2; uint16_t ny4 = y4_pos;
 80034ee:	4b49      	ldr	r3, [pc, #292]	@ (8003614 <block_rotate+0x600>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	3302      	adds	r3, #2
 80034f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80034f6:	4b48      	ldr	r3, [pc, #288]	@ (8003618 <block_rotate+0x604>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
			spawn_s(x1_pos *24, y1_pos*24, LCD_COLOR_BLACK);
 80034fc:	4b47      	ldr	r3, [pc, #284]	@ (800361c <block_rotate+0x608>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	0052      	lsls	r2, r2, #1
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	b29b      	uxth	r3, r3
 800350a:	b218      	sxth	r0, r3
 800350c:	4b44      	ldr	r3, [pc, #272]	@ (8003620 <block_rotate+0x60c>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	b29b      	uxth	r3, r3
 800351a:	b21b      	sxth	r3, r3
 800351c:	2200      	movs	r2, #0
 800351e:	4619      	mov	r1, r3
 8003520:	f7fd fa9f 	bl	8000a62 <spawn_s>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_RED);
 8003524:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <block_rotate+0x608>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	4a3d      	ldr	r2, [pc, #244]	@ (8003620 <block_rotate+0x60c>)
 800352a:	8811      	ldrh	r1, [r2, #0]
 800352c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f969 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_RED);
 8003536:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8003538:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800353a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd f962 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_RED);
 8003544:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8003546:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003548:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd f95b 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_RED);
 8003552:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003554:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003556:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd f954 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8003560:	4b29      	ldr	r3, [pc, #164]	@ (8003608 <block_rotate+0x5f4>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <block_rotate+0x5f0>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	4a2d      	ldr	r2, [pc, #180]	@ (8003624 <block_rotate+0x610>)
 800356e:	00c3      	lsls	r3, r0, #3
 8003570:	440b      	add	r3, r1
 8003572:	2100      	movs	r1, #0
 8003574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003578:	4b25      	ldr	r3, [pc, #148]	@ (8003610 <block_rotate+0x5fc>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	4b23      	ldr	r3, [pc, #140]	@ (800360c <block_rotate+0x5f8>)
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	4619      	mov	r1, r3
 8003584:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <block_rotate+0x610>)
 8003586:	00c3      	lsls	r3, r0, #3
 8003588:	440b      	add	r3, r1
 800358a:	2100      	movs	r1, #0
 800358c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003590:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <block_rotate+0x604>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <block_rotate+0x600>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <block_rotate+0x610>)
 800359e:	00c3      	lsls	r3, r0, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	2100      	movs	r1, #0
 80035a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 80035a8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80035aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80035ac:	491d      	ldr	r1, [pc, #116]	@ (8003624 <block_rotate+0x610>)
 80035ae:	00d2      	lsls	r2, r2, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	2201      	movs	r2, #1
 80035b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80035b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80035ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80035bc:	4919      	ldr	r1, [pc, #100]	@ (8003624 <block_rotate+0x610>)
 80035be:	00d2      	lsls	r2, r2, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	2201      	movs	r2, #1
 80035c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80035c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035cc:	4915      	ldr	r1, [pc, #84]	@ (8003624 <block_rotate+0x610>)
 80035ce:	00d2      	lsls	r2, r2, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	2201      	movs	r2, #1
 80035d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 80035d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003608 <block_rotate+0x5f4>)
 80035da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80035dc:	8013      	strh	r3, [r2, #0]
 80035de:	4a0c      	ldr	r2, [pc, #48]	@ (8003610 <block_rotate+0x5fc>)
 80035e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035e2:	8013      	strh	r3, [r2, #0]
 80035e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003618 <block_rotate+0x604>)
 80035e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035e8:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 80035ea:	4a06      	ldr	r2, [pc, #24]	@ (8003604 <block_rotate+0x5f0>)
 80035ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80035ee:	8013      	strh	r3, [r2, #0]
 80035f0:	4a06      	ldr	r2, [pc, #24]	@ (800360c <block_rotate+0x5f8>)
 80035f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80035f4:	8013      	strh	r3, [r2, #0]
 80035f6:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <block_rotate+0x600>)
 80035f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035fa:	8013      	strh	r3, [r2, #0]
}
 80035fc:	f001 bb39 	b.w	8004c72 <block_rotate+0x1c5e>
 8003600:	20000000 	.word	0x20000000
 8003604:	20000338 	.word	0x20000338
 8003608:	2000033a 	.word	0x2000033a
 800360c:	2000033c 	.word	0x2000033c
 8003610:	2000033e 	.word	0x2000033e
 8003614:	20000340 	.word	0x20000340
 8003618:	20000342 	.word	0x20000342
 800361c:	20000334 	.word	0x20000334
 8003620:	20000336 	.word	0x20000336
 8003624:	200001f4 	.word	0x200001f4
	else if(block == z_shape)
 8003628:	4b58      	ldr	r3, [pc, #352]	@ (800378c <block_rotate+0x778>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	f040 8189 	bne.w	8003944 <block_rotate+0x930>
		if(rotation > 4)
 8003632:	4b57      	ldr	r3, [pc, #348]	@ (8003790 <block_rotate+0x77c>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	2b04      	cmp	r3, #4
 8003638:	d902      	bls.n	8003640 <block_rotate+0x62c>
			rotation = 1;
 800363a:	4b55      	ldr	r3, [pc, #340]	@ (8003790 <block_rotate+0x77c>)
 800363c:	2201      	movs	r2, #1
 800363e:	801a      	strh	r2, [r3, #0]
		if(rotation == 1 || rotation == 3)
 8003640:	4b53      	ldr	r3, [pc, #332]	@ (8003790 <block_rotate+0x77c>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d004      	beq.n	8003652 <block_rotate+0x63e>
 8003648:	4b51      	ldr	r3, [pc, #324]	@ (8003790 <block_rotate+0x77c>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2b03      	cmp	r3, #3
 800364e:	f040 80b3 	bne.w	80037b8 <block_rotate+0x7a4>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos - 1;
 8003652:	4b50      	ldr	r3, [pc, #320]	@ (8003794 <block_rotate+0x780>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800365a:	4b4f      	ldr	r3, [pc, #316]	@ (8003798 <block_rotate+0x784>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	3b01      	subs	r3, #1
 8003660:	873b      	strh	r3, [r7, #56]	@ 0x38
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos;
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <block_rotate+0x788>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	3302      	adds	r3, #2
 8003668:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800366a:	4b4d      	ldr	r3, [pc, #308]	@ (80037a0 <block_rotate+0x78c>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	86bb      	strh	r3, [r7, #52]	@ 0x34
			uint16_t nx4 = x4_pos + 3; uint16_t ny4 = y4_pos - 1;
 8003670:	4b4c      	ldr	r3, [pc, #304]	@ (80037a4 <block_rotate+0x790>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	3303      	adds	r3, #3
 8003676:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <block_rotate+0x794>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	3b01      	subs	r3, #1
 800367e:	863b      	strh	r3, [r7, #48]	@ 0x30
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8003680:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <block_rotate+0x798>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	4a4a      	ldr	r2, [pc, #296]	@ (80037b0 <block_rotate+0x79c>)
 8003686:	8811      	ldrh	r1, [r2, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd f8bc 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <block_rotate+0x780>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	4a40      	ldr	r2, [pc, #256]	@ (8003798 <block_rotate+0x784>)
 8003696:	8811      	ldrh	r1, [r2, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd f8b4 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80036a0:	4b3e      	ldr	r3, [pc, #248]	@ (800379c <block_rotate+0x788>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	4a3e      	ldr	r2, [pc, #248]	@ (80037a0 <block_rotate+0x78c>)
 80036a6:	8811      	ldrh	r1, [r2, #0]
 80036a8:	2200      	movs	r2, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd f8ac 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80036b0:	4b3c      	ldr	r3, [pc, #240]	@ (80037a4 <block_rotate+0x790>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <block_rotate+0x794>)
 80036b6:	8811      	ldrh	r1, [r2, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd f8a4 	bl	8000808 <DrawBlock>
			spawn_z(x1_pos *24, y1_pos*24, LCD_COLOR_GREEN);
 80036c0:	4b3a      	ldr	r3, [pc, #232]	@ (80037ac <block_rotate+0x798>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	0052      	lsls	r2, r2, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	b218      	sxth	r0, r3
 80036d0:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <block_rotate+0x79c>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	0052      	lsls	r2, r2, #1
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	b29b      	uxth	r3, r3
 80036de:	b21b      	sxth	r3, r3
 80036e0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fd fa3f 	bl	8000b68 <spawn_z>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 80036ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <block_rotate+0x784>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <block_rotate+0x780>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	4a2f      	ldr	r2, [pc, #188]	@ (80037b4 <block_rotate+0x7a0>)
 80036f8:	00c3      	lsls	r3, r0, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	2100      	movs	r1, #0
 80036fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003702:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <block_rotate+0x78c>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <block_rotate+0x788>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	4a29      	ldr	r2, [pc, #164]	@ (80037b4 <block_rotate+0x7a0>)
 8003710:	00c3      	lsls	r3, r0, #3
 8003712:	440b      	add	r3, r1
 8003714:	2100      	movs	r1, #0
 8003716:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800371a:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <block_rotate+0x794>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	4b20      	ldr	r3, [pc, #128]	@ (80037a4 <block_rotate+0x790>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	4a23      	ldr	r2, [pc, #140]	@ (80037b4 <block_rotate+0x7a0>)
 8003728:	00c3      	lsls	r3, r0, #3
 800372a:	440b      	add	r3, r1
 800372c:	2100      	movs	r1, #0
 800372e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003732:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003734:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003736:	491f      	ldr	r1, [pc, #124]	@ (80037b4 <block_rotate+0x7a0>)
 8003738:	00d2      	lsls	r2, r2, #3
 800373a:	4413      	add	r3, r2
 800373c:	2201      	movs	r2, #1
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003742:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003744:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003746:	491b      	ldr	r1, [pc, #108]	@ (80037b4 <block_rotate+0x7a0>)
 8003748:	00d2      	lsls	r2, r2, #3
 800374a:	4413      	add	r3, r2
 800374c:	2201      	movs	r2, #1
 800374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003752:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003754:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003756:	4917      	ldr	r1, [pc, #92]	@ (80037b4 <block_rotate+0x7a0>)
 8003758:	00d2      	lsls	r2, r2, #3
 800375a:	4413      	add	r3, r2
 800375c:	2201      	movs	r2, #1
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003762:	4a0d      	ldr	r2, [pc, #52]	@ (8003798 <block_rotate+0x784>)
 8003764:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003766:	8013      	strh	r3, [r2, #0]
 8003768:	4a0d      	ldr	r2, [pc, #52]	@ (80037a0 <block_rotate+0x78c>)
 800376a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800376c:	8013      	strh	r3, [r2, #0]
 800376e:	4a0e      	ldr	r2, [pc, #56]	@ (80037a8 <block_rotate+0x794>)
 8003770:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003772:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003774:	4a07      	ldr	r2, [pc, #28]	@ (8003794 <block_rotate+0x780>)
 8003776:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003778:	8013      	strh	r3, [r2, #0]
 800377a:	4a08      	ldr	r2, [pc, #32]	@ (800379c <block_rotate+0x788>)
 800377c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800377e:	8013      	strh	r3, [r2, #0]
 8003780:	4a08      	ldr	r2, [pc, #32]	@ (80037a4 <block_rotate+0x790>)
 8003782:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003784:	8013      	strh	r3, [r2, #0]
		{
 8003786:	f001 ba74 	b.w	8004c72 <block_rotate+0x1c5e>
 800378a:	bf00      	nop
 800378c:	20000344 	.word	0x20000344
 8003790:	20000000 	.word	0x20000000
 8003794:	20000338 	.word	0x20000338
 8003798:	2000033a 	.word	0x2000033a
 800379c:	2000033c 	.word	0x2000033c
 80037a0:	2000033e 	.word	0x2000033e
 80037a4:	20000340 	.word	0x20000340
 80037a8:	20000342 	.word	0x20000342
 80037ac:	20000334 	.word	0x20000334
 80037b0:	20000336 	.word	0x20000336
 80037b4:	200001f4 	.word	0x200001f4
		else if(rotation == 2 || rotation == 4)
 80037b8:	4b58      	ldr	r3, [pc, #352]	@ (800391c <block_rotate+0x908>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d004      	beq.n	80037ca <block_rotate+0x7b6>
 80037c0:	4b56      	ldr	r3, [pc, #344]	@ (800391c <block_rotate+0x908>)
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	f041 8254 	bne.w	8004c72 <block_rotate+0x1c5e>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos + 1;
 80037ca:	4b55      	ldr	r3, [pc, #340]	@ (8003920 <block_rotate+0x90c>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80037d4:	4b53      	ldr	r3, [pc, #332]	@ (8003924 <block_rotate+0x910>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos;
 80037de:	4b52      	ldr	r3, [pc, #328]	@ (8003928 <block_rotate+0x914>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	3b02      	subs	r3, #2
 80037e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037e8:	4b50      	ldr	r3, [pc, #320]	@ (800392c <block_rotate+0x918>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t nx4 = x4_pos - 3; uint16_t ny4 = y4_pos + 1;
 80037f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <block_rotate+0x91c>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	3b03      	subs	r3, #3
 80037f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80037f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003934 <block_rotate+0x920>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			spawn_z(x1_pos *24, y1_pos*24, LCD_COLOR_BLACK);
 8003800:	4b4d      	ldr	r3, [pc, #308]	@ (8003938 <block_rotate+0x924>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	0052      	lsls	r2, r2, #1
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	b29b      	uxth	r3, r3
 800380e:	b218      	sxth	r0, r3
 8003810:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <block_rotate+0x928>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	0052      	lsls	r2, r2, #1
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	b29b      	uxth	r3, r3
 800381e:	b21b      	sxth	r3, r3
 8003820:	2200      	movs	r2, #0
 8003822:	4619      	mov	r1, r3
 8003824:	f7fd f9a0 	bl	8000b68 <spawn_z>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_GREEN);
 8003828:	4b43      	ldr	r3, [pc, #268]	@ (8003938 <block_rotate+0x924>)
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	4a43      	ldr	r2, [pc, #268]	@ (800393c <block_rotate+0x928>)
 800382e:	8811      	ldrh	r1, [r2, #0]
 8003830:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc ffe7 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_GREEN);
 800383a:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 800383e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003842:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc ffde 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_GREEN);
 800384c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8003850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003854:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc ffd5 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_GREEN);
 800385e:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8003860:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003862:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc ffce 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 800386c:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <block_rotate+0x910>)
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	4b2b      	ldr	r3, [pc, #172]	@ (8003920 <block_rotate+0x90c>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	4619      	mov	r1, r3
 8003878:	4a31      	ldr	r2, [pc, #196]	@ (8003940 <block_rotate+0x92c>)
 800387a:	00c3      	lsls	r3, r0, #3
 800387c:	440b      	add	r3, r1
 800387e:	2100      	movs	r1, #0
 8003880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003884:	4b29      	ldr	r3, [pc, #164]	@ (800392c <block_rotate+0x918>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <block_rotate+0x914>)
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4a2b      	ldr	r2, [pc, #172]	@ (8003940 <block_rotate+0x92c>)
 8003892:	00c3      	lsls	r3, r0, #3
 8003894:	440b      	add	r3, r1
 8003896:	2100      	movs	r1, #0
 8003898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800389c:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <block_rotate+0x920>)
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	4b23      	ldr	r3, [pc, #140]	@ (8003930 <block_rotate+0x91c>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	4619      	mov	r1, r3
 80038a8:	4a25      	ldr	r2, [pc, #148]	@ (8003940 <block_rotate+0x92c>)
 80038aa:	00c3      	lsls	r3, r0, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	2100      	movs	r1, #0
 80038b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 80038b4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80038b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80038bc:	4920      	ldr	r1, [pc, #128]	@ (8003940 <block_rotate+0x92c>)
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	2201      	movs	r2, #1
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80038c8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80038cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80038d0:	491b      	ldr	r1, [pc, #108]	@ (8003940 <block_rotate+0x92c>)
 80038d2:	00d2      	lsls	r2, r2, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	2201      	movs	r2, #1
 80038d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80038dc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80038de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80038e0:	4917      	ldr	r1, [pc, #92]	@ (8003940 <block_rotate+0x92c>)
 80038e2:	00d2      	lsls	r2, r2, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	2201      	movs	r2, #1
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 80038ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <block_rotate+0x910>)
 80038ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80038f2:	8013      	strh	r3, [r2, #0]
 80038f4:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <block_rotate+0x918>)
 80038f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80038fa:	8013      	strh	r3, [r2, #0]
 80038fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003934 <block_rotate+0x920>)
 80038fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003900:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003902:	4a07      	ldr	r2, [pc, #28]	@ (8003920 <block_rotate+0x90c>)
 8003904:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003908:	8013      	strh	r3, [r2, #0]
 800390a:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <block_rotate+0x914>)
 800390c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003910:	8013      	strh	r3, [r2, #0]
 8003912:	4a07      	ldr	r2, [pc, #28]	@ (8003930 <block_rotate+0x91c>)
 8003914:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003916:	8013      	strh	r3, [r2, #0]
}
 8003918:	f001 b9ab 	b.w	8004c72 <block_rotate+0x1c5e>
 800391c:	20000000 	.word	0x20000000
 8003920:	20000338 	.word	0x20000338
 8003924:	2000033a 	.word	0x2000033a
 8003928:	2000033c 	.word	0x2000033c
 800392c:	2000033e 	.word	0x2000033e
 8003930:	20000340 	.word	0x20000340
 8003934:	20000342 	.word	0x20000342
 8003938:	20000334 	.word	0x20000334
 800393c:	20000336 	.word	0x20000336
 8003940:	200001f4 	.word	0x200001f4
	else if(block == l_shape)
 8003944:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac4 <block_rotate+0xab0>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2b04      	cmp	r3, #4
 800394a:	f040 8337 	bne.w	8003fbc <block_rotate+0xfa8>
		if(rotation > 4)
 800394e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ac8 <block_rotate+0xab4>)
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d902      	bls.n	800395c <block_rotate+0x948>
			rotation = 1;
 8003956:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac8 <block_rotate+0xab4>)
 8003958:	2201      	movs	r2, #1
 800395a:	801a      	strh	r2, [r3, #0]
		if(rotation == 1)
 800395c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac8 <block_rotate+0xab4>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 80c5 	bne.w	8003af0 <block_rotate+0xadc>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos + 1;
 8003966:	4b59      	ldr	r3, [pc, #356]	@ (8003acc <block_rotate+0xab8>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003970:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <block_rotate+0xabc>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos + 2;
 800397a:	4b56      	ldr	r3, [pc, #344]	@ (8003ad4 <block_rotate+0xac0>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	3302      	adds	r3, #2
 8003980:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003984:	4b54      	ldr	r3, [pc, #336]	@ (8003ad8 <block_rotate+0xac4>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	3302      	adds	r3, #2
 800398a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			uint16_t nx4 = x4_pos + 3; uint16_t ny4 = y4_pos + 1;
 800398e:	4b53      	ldr	r3, [pc, #332]	@ (8003adc <block_rotate+0xac8>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	3303      	adds	r3, #3
 8003994:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003998:	4b51      	ldr	r3, [pc, #324]	@ (8003ae0 <block_rotate+0xacc>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 80039a2:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <block_rotate+0xad0>)
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	4a50      	ldr	r2, [pc, #320]	@ (8003ae8 <block_rotate+0xad4>)
 80039a8:	8811      	ldrh	r1, [r2, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fc ff2b 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 80039b2:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <block_rotate+0xab8>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	4a46      	ldr	r2, [pc, #280]	@ (8003ad0 <block_rotate+0xabc>)
 80039b8:	8811      	ldrh	r1, [r2, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc ff23 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80039c2:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <block_rotate+0xac0>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	4a44      	ldr	r2, [pc, #272]	@ (8003ad8 <block_rotate+0xac4>)
 80039c8:	8811      	ldrh	r1, [r2, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc ff1b 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80039d2:	4b42      	ldr	r3, [pc, #264]	@ (8003adc <block_rotate+0xac8>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	4a42      	ldr	r2, [pc, #264]	@ (8003ae0 <block_rotate+0xacc>)
 80039d8:	8811      	ldrh	r1, [r2, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc ff13 	bl	8000808 <DrawBlock>
			spawn_l(x1_pos *24, y1_pos*24, LCD_COLOR_CYAN);
 80039e2:	4b40      	ldr	r3, [pc, #256]	@ (8003ae4 <block_rotate+0xad0>)
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	0052      	lsls	r2, r2, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b218      	sxth	r0, r3
 80039f2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae8 <block_rotate+0xad4>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	0052      	lsls	r2, r2, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	b21b      	sxth	r3, r3
 8003a02:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003a06:	4619      	mov	r1, r3
 8003a08:	f7fd f930 	bl	8000c6c <spawn_l>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8003a0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <block_rotate+0xabc>)
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <block_rotate+0xab8>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	4619      	mov	r1, r3
 8003a18:	4a34      	ldr	r2, [pc, #208]	@ (8003aec <block_rotate+0xad8>)
 8003a1a:	00c3      	lsls	r3, r0, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003a24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <block_rotate+0xac4>)
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <block_rotate+0xac0>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4a2e      	ldr	r2, [pc, #184]	@ (8003aec <block_rotate+0xad8>)
 8003a32:	00c3      	lsls	r3, r0, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	2100      	movs	r1, #0
 8003a38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003a3c:	4b28      	ldr	r3, [pc, #160]	@ (8003ae0 <block_rotate+0xacc>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	4b26      	ldr	r3, [pc, #152]	@ (8003adc <block_rotate+0xac8>)
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <block_rotate+0xad8>)
 8003a4a:	00c3      	lsls	r3, r0, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003a54:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003a58:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003a5c:	4923      	ldr	r1, [pc, #140]	@ (8003aec <block_rotate+0xad8>)
 8003a5e:	00d2      	lsls	r2, r2, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	2201      	movs	r2, #1
 8003a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a68:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003a6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a70:	491e      	ldr	r1, [pc, #120]	@ (8003aec <block_rotate+0xad8>)
 8003a72:	00d2      	lsls	r2, r2, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	2201      	movs	r2, #1
 8003a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003a80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a84:	4919      	ldr	r1, [pc, #100]	@ (8003aec <block_rotate+0xad8>)
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003a90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <block_rotate+0xabc>)
 8003a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a96:	8013      	strh	r3, [r2, #0]
 8003a98:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad8 <block_rotate+0xac4>)
 8003a9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003a9e:	8013      	strh	r3, [r2, #0]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <block_rotate+0xacc>)
 8003aa2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003aa6:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003aa8:	4a08      	ldr	r2, [pc, #32]	@ (8003acc <block_rotate+0xab8>)
 8003aaa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003aae:	8013      	strh	r3, [r2, #0]
 8003ab0:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <block_rotate+0xac0>)
 8003ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ab6:	8013      	strh	r3, [r2, #0]
 8003ab8:	4a08      	ldr	r2, [pc, #32]	@ (8003adc <block_rotate+0xac8>)
 8003aba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003abe:	8013      	strh	r3, [r2, #0]
}
 8003ac0:	f001 b8d7 	b.w	8004c72 <block_rotate+0x1c5e>
 8003ac4:	20000344 	.word	0x20000344
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000338 	.word	0x20000338
 8003ad0:	2000033a 	.word	0x2000033a
 8003ad4:	2000033c 	.word	0x2000033c
 8003ad8:	2000033e 	.word	0x2000033e
 8003adc:	20000340 	.word	0x20000340
 8003ae0:	20000342 	.word	0x20000342
 8003ae4:	20000334 	.word	0x20000334
 8003ae8:	20000336 	.word	0x20000336
 8003aec:	200001f4 	.word	0x200001f4
		else if(rotation == 2)
 8003af0:	4bbc      	ldr	r3, [pc, #752]	@ (8003de4 <block_rotate+0xdd0>)
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	f040 80b2 	bne.w	8003c5e <block_rotate+0xc4a>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos - 1;
 8003afa:	4bbb      	ldr	r3, [pc, #748]	@ (8003de8 <block_rotate+0xdd4>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8003b04:	4bb9      	ldr	r3, [pc, #740]	@ (8003dec <block_rotate+0xdd8>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos - 2;
 8003b0e:	4bb8      	ldr	r3, [pc, #736]	@ (8003df0 <block_rotate+0xddc>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	3302      	adds	r3, #2
 8003b14:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8003b18:	4bb6      	ldr	r3, [pc, #728]	@ (8003df4 <block_rotate+0xde0>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	3b02      	subs	r3, #2
 8003b1e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
			uint16_t nx4 = x4_pos + 1; uint16_t ny4 = y4_pos - 3;
 8003b22:	4bb5      	ldr	r3, [pc, #724]	@ (8003df8 <block_rotate+0xde4>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003b2c:	4bb3      	ldr	r3, [pc, #716]	@ (8003dfc <block_rotate+0xde8>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
			spawn_l(x1_pos *24, y1_pos*24, LCD_COLOR_BLACK);
 8003b36:	4bb2      	ldr	r3, [pc, #712]	@ (8003e00 <block_rotate+0xdec>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	0052      	lsls	r2, r2, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	b218      	sxth	r0, r3
 8003b46:	4baf      	ldr	r3, [pc, #700]	@ (8003e04 <block_rotate+0xdf0>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	0052      	lsls	r2, r2, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	2200      	movs	r2, #0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f7fd f887 	bl	8000c6c <spawn_l>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_CYAN);
 8003b5e:	4ba8      	ldr	r3, [pc, #672]	@ (8003e00 <block_rotate+0xdec>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	4aa8      	ldr	r2, [pc, #672]	@ (8003e04 <block_rotate+0xdf0>)
 8003b64:	8811      	ldrh	r1, [r2, #0]
 8003b66:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc fe4c 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_CYAN);
 8003b70:	f8b7 105c 	ldrh.w	r1, [r7, #92]	@ 0x5c
 8003b74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003b78:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fe43 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_CYAN);
 8003b82:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8003b86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003b8a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fe3a 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_CYAN);
 8003b94:	f8b7 1054 	ldrh.w	r1, [r7, #84]	@ 0x54
 8003b98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003b9c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fe31 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8003ba6:	4b91      	ldr	r3, [pc, #580]	@ (8003dec <block_rotate+0xdd8>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <block_rotate+0xdd4>)
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4a95      	ldr	r2, [pc, #596]	@ (8003e08 <block_rotate+0xdf4>)
 8003bb4:	00c3      	lsls	r3, r0, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8003df4 <block_rotate+0xde0>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8003df0 <block_rotate+0xddc>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4a8f      	ldr	r2, [pc, #572]	@ (8003e08 <block_rotate+0xdf4>)
 8003bcc:	00c3      	lsls	r3, r0, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003bd6:	4b89      	ldr	r3, [pc, #548]	@ (8003dfc <block_rotate+0xde8>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	4b86      	ldr	r3, [pc, #536]	@ (8003df8 <block_rotate+0xde4>)
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	4a89      	ldr	r2, [pc, #548]	@ (8003e08 <block_rotate+0xdf4>)
 8003be4:	00c3      	lsls	r3, r0, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	2100      	movs	r1, #0
 8003bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003bee:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8003bf2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003bf6:	4984      	ldr	r1, [pc, #528]	@ (8003e08 <block_rotate+0xdf4>)
 8003bf8:	00d2      	lsls	r2, r2, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c02:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8003c06:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003c0a:	497f      	ldr	r1, [pc, #508]	@ (8003e08 <block_rotate+0xdf4>)
 8003c0c:	00d2      	lsls	r2, r2, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	2201      	movs	r2, #1
 8003c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c16:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8003c1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003c1e:	497a      	ldr	r1, [pc, #488]	@ (8003e08 <block_rotate+0xdf4>)
 8003c20:	00d2      	lsls	r2, r2, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	2201      	movs	r2, #1
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003c2a:	4a70      	ldr	r2, [pc, #448]	@ (8003dec <block_rotate+0xdd8>)
 8003c2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003c30:	8013      	strh	r3, [r2, #0]
 8003c32:	4a70      	ldr	r2, [pc, #448]	@ (8003df4 <block_rotate+0xde0>)
 8003c34:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003c38:	8013      	strh	r3, [r2, #0]
 8003c3a:	4a70      	ldr	r2, [pc, #448]	@ (8003dfc <block_rotate+0xde8>)
 8003c3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8003c40:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003c42:	4a69      	ldr	r2, [pc, #420]	@ (8003de8 <block_rotate+0xdd4>)
 8003c44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003c48:	8013      	strh	r3, [r2, #0]
 8003c4a:	4a69      	ldr	r2, [pc, #420]	@ (8003df0 <block_rotate+0xddc>)
 8003c4c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003c50:	8013      	strh	r3, [r2, #0]
 8003c52:	4a69      	ldr	r2, [pc, #420]	@ (8003df8 <block_rotate+0xde4>)
 8003c54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003c58:	8013      	strh	r3, [r2, #0]
}
 8003c5a:	f001 b80a 	b.w	8004c72 <block_rotate+0x1c5e>
		else if(rotation == 3)
 8003c5e:	4b61      	ldr	r3, [pc, #388]	@ (8003de4 <block_rotate+0xdd0>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	f040 80d2 	bne.w	8003e0c <block_rotate+0xdf8>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos - 1;
 8003c68:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <block_rotate+0xdd4>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8003c72:	4b5e      	ldr	r3, [pc, #376]	@ (8003dec <block_rotate+0xdd8>)
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos - 2;
 8003c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003df0 <block_rotate+0xddc>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	3b02      	subs	r3, #2
 8003c82:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003c86:	4b5b      	ldr	r3, [pc, #364]	@ (8003df4 <block_rotate+0xde0>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	3b02      	subs	r3, #2
 8003c8c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
			uint16_t nx4 = x4_pos - 3; uint16_t ny4 = y4_pos - 1;
 8003c90:	4b59      	ldr	r3, [pc, #356]	@ (8003df8 <block_rotate+0xde4>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003c9a:	4b58      	ldr	r3, [pc, #352]	@ (8003dfc <block_rotate+0xde8>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8003ca4:	4b56      	ldr	r3, [pc, #344]	@ (8003e00 <block_rotate+0xdec>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	4a56      	ldr	r2, [pc, #344]	@ (8003e04 <block_rotate+0xdf0>)
 8003caa:	8811      	ldrh	r1, [r2, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc fdaa 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8003cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8003de8 <block_rotate+0xdd4>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8003dec <block_rotate+0xdd8>)
 8003cba:	8811      	ldrh	r1, [r2, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fda2 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8003df0 <block_rotate+0xddc>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <block_rotate+0xde0>)
 8003cca:	8811      	ldrh	r1, [r2, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fd9a 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8003cd4:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <block_rotate+0xde4>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	4a48      	ldr	r2, [pc, #288]	@ (8003dfc <block_rotate+0xde8>)
 8003cda:	8811      	ldrh	r1, [r2, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fd92 	bl	8000808 <DrawBlock>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_CYAN);
 8003ce4:	4b46      	ldr	r3, [pc, #280]	@ (8003e00 <block_rotate+0xdec>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	4a46      	ldr	r2, [pc, #280]	@ (8003e04 <block_rotate+0xdf0>)
 8003cea:	8811      	ldrh	r1, [r2, #0]
 8003cec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fd89 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_CYAN);
 8003cf6:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
 8003cfa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003cfe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fd80 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_CYAN);
 8003d08:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8003d0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003d10:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fd77 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_CYAN);
 8003d1a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8003d1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003d22:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fd6e 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003dec <block_rotate+0xdd8>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	4b2d      	ldr	r3, [pc, #180]	@ (8003de8 <block_rotate+0xdd4>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4a33      	ldr	r2, [pc, #204]	@ (8003e08 <block_rotate+0xdf4>)
 8003d3a:	00c3      	lsls	r3, r0, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003d44:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <block_rotate+0xde0>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	4b29      	ldr	r3, [pc, #164]	@ (8003df0 <block_rotate+0xddc>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4a2d      	ldr	r2, [pc, #180]	@ (8003e08 <block_rotate+0xdf4>)
 8003d52:	00c3      	lsls	r3, r0, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	2100      	movs	r1, #0
 8003d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003d5c:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <block_rotate+0xde8>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	4b25      	ldr	r3, [pc, #148]	@ (8003df8 <block_rotate+0xde4>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	4619      	mov	r1, r3
 8003d68:	4a27      	ldr	r2, [pc, #156]	@ (8003e08 <block_rotate+0xdf4>)
 8003d6a:	00c3      	lsls	r3, r0, #3
 8003d6c:	440b      	add	r3, r1
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003d74:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8003d78:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003d7c:	4922      	ldr	r1, [pc, #136]	@ (8003e08 <block_rotate+0xdf4>)
 8003d7e:	00d2      	lsls	r2, r2, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	2201      	movs	r2, #1
 8003d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d88:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8003d8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003d90:	491d      	ldr	r1, [pc, #116]	@ (8003e08 <block_rotate+0xdf4>)
 8003d92:	00d2      	lsls	r2, r2, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	2201      	movs	r2, #1
 8003d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d9c:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8003da0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003da4:	4918      	ldr	r1, [pc, #96]	@ (8003e08 <block_rotate+0xdf4>)
 8003da6:	00d2      	lsls	r2, r2, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	2201      	movs	r2, #1
 8003dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003db0:	4a0e      	ldr	r2, [pc, #56]	@ (8003dec <block_rotate+0xdd8>)
 8003db2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003db6:	8013      	strh	r3, [r2, #0]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	@ (8003df4 <block_rotate+0xde0>)
 8003dba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003dbe:	8013      	strh	r3, [r2, #0]
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003dfc <block_rotate+0xde8>)
 8003dc2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8003dc6:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003dc8:	4a07      	ldr	r2, [pc, #28]	@ (8003de8 <block_rotate+0xdd4>)
 8003dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003dce:	8013      	strh	r3, [r2, #0]
 8003dd0:	4a07      	ldr	r2, [pc, #28]	@ (8003df0 <block_rotate+0xddc>)
 8003dd2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003dd6:	8013      	strh	r3, [r2, #0]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <block_rotate+0xde4>)
 8003dda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003dde:	8013      	strh	r3, [r2, #0]
}
 8003de0:	f000 bf47 	b.w	8004c72 <block_rotate+0x1c5e>
 8003de4:	20000000 	.word	0x20000000
 8003de8:	20000338 	.word	0x20000338
 8003dec:	2000033a 	.word	0x2000033a
 8003df0:	2000033c 	.word	0x2000033c
 8003df4:	2000033e 	.word	0x2000033e
 8003df8:	20000340 	.word	0x20000340
 8003dfc:	20000342 	.word	0x20000342
 8003e00:	20000334 	.word	0x20000334
 8003e04:	20000336 	.word	0x20000336
 8003e08:	200001f4 	.word	0x200001f4
		else if(rotation == 4)
 8003e0c:	4b61      	ldr	r3, [pc, #388]	@ (8003f94 <block_rotate+0xf80>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	f040 872e 	bne.w	8004c72 <block_rotate+0x1c5e>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos + 1;
 8003e16:	4b60      	ldr	r3, [pc, #384]	@ (8003f98 <block_rotate+0xf84>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8003e20:	4b5e      	ldr	r3, [pc, #376]	@ (8003f9c <block_rotate+0xf88>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos + 2;
 8003e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa0 <block_rotate+0xf8c>)
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	3b02      	subs	r3, #2
 8003e30:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8003e34:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa4 <block_rotate+0xf90>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
			uint16_t nx4 = x4_pos - 1; uint16_t ny4 = y4_pos + 3;
 8003e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa8 <block_rotate+0xf94>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003e48:	4b58      	ldr	r3, [pc, #352]	@ (8003fac <block_rotate+0xf98>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8003e52:	4b57      	ldr	r3, [pc, #348]	@ (8003fb0 <block_rotate+0xf9c>)
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	4a57      	ldr	r2, [pc, #348]	@ (8003fb4 <block_rotate+0xfa0>)
 8003e58:	8811      	ldrh	r1, [r2, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fcd3 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8003e62:	4b4d      	ldr	r3, [pc, #308]	@ (8003f98 <block_rotate+0xf84>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	4a4d      	ldr	r2, [pc, #308]	@ (8003f9c <block_rotate+0xf88>)
 8003e68:	8811      	ldrh	r1, [r2, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fc fccb 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8003e72:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa0 <block_rotate+0xf8c>)
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa4 <block_rotate+0xf90>)
 8003e78:	8811      	ldrh	r1, [r2, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fcc3 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <block_rotate+0xf94>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	4a49      	ldr	r2, [pc, #292]	@ (8003fac <block_rotate+0xf98>)
 8003e88:	8811      	ldrh	r1, [r2, #0]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc fcbb 	bl	8000808 <DrawBlock>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_CYAN);
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <block_rotate+0xf9c>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	4a47      	ldr	r2, [pc, #284]	@ (8003fb4 <block_rotate+0xfa0>)
 8003e98:	8811      	ldrh	r1, [r2, #0]
 8003e9a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fcb2 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_CYAN);
 8003ea4:	f8b7 1074 	ldrh.w	r1, [r7, #116]	@ 0x74
 8003ea8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003eac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc fca9 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_CYAN);
 8003eb6:	f8b7 1070 	ldrh.w	r1, [r7, #112]	@ 0x70
 8003eba:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003ebe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc fca0 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_CYAN);
 8003ec8:	f8b7 106c 	ldrh.w	r1, [r7, #108]	@ 0x6c
 8003ecc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ed0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc fc97 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8003eda:	4b30      	ldr	r3, [pc, #192]	@ (8003f9c <block_rotate+0xf88>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <block_rotate+0xf84>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4a34      	ldr	r2, [pc, #208]	@ (8003fb8 <block_rotate+0xfa4>)
 8003ee8:	00c3      	lsls	r3, r0, #3
 8003eea:	440b      	add	r3, r1
 8003eec:	2100      	movs	r1, #0
 8003eee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa4 <block_rotate+0xf90>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <block_rotate+0xf8c>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb8 <block_rotate+0xfa4>)
 8003f00:	00c3      	lsls	r3, r0, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	2100      	movs	r1, #0
 8003f06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <block_rotate+0xf98>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4b25      	ldr	r3, [pc, #148]	@ (8003fa8 <block_rotate+0xf94>)
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	4a28      	ldr	r2, [pc, #160]	@ (8003fb8 <block_rotate+0xfa4>)
 8003f18:	00c3      	lsls	r3, r0, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8003f22:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8003f26:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003f2a:	4923      	ldr	r1, [pc, #140]	@ (8003fb8 <block_rotate+0xfa4>)
 8003f2c:	00d2      	lsls	r2, r2, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	2201      	movs	r2, #1
 8003f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f36:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 8003f3a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003f3e:	491e      	ldr	r1, [pc, #120]	@ (8003fb8 <block_rotate+0xfa4>)
 8003f40:	00d2      	lsls	r2, r2, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	2201      	movs	r2, #1
 8003f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003f4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003f52:	4919      	ldr	r1, [pc, #100]	@ (8003fb8 <block_rotate+0xfa4>)
 8003f54:	00d2      	lsls	r2, r2, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8003f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f9c <block_rotate+0xf88>)
 8003f60:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003f64:	8013      	strh	r3, [r2, #0]
 8003f66:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa4 <block_rotate+0xf90>)
 8003f68:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003f6c:	8013      	strh	r3, [r2, #0]
 8003f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fac <block_rotate+0xf98>)
 8003f70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f74:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8003f76:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <block_rotate+0xf84>)
 8003f78:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003f7c:	8013      	strh	r3, [r2, #0]
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <block_rotate+0xf8c>)
 8003f80:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8003f84:	8013      	strh	r3, [r2, #0]
 8003f86:	4a08      	ldr	r2, [pc, #32]	@ (8003fa8 <block_rotate+0xf94>)
 8003f88:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003f8c:	8013      	strh	r3, [r2, #0]
}
 8003f8e:	f000 be70 	b.w	8004c72 <block_rotate+0x1c5e>
 8003f92:	bf00      	nop
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000338 	.word	0x20000338
 8003f9c:	2000033a 	.word	0x2000033a
 8003fa0:	2000033c 	.word	0x2000033c
 8003fa4:	2000033e 	.word	0x2000033e
 8003fa8:	20000340 	.word	0x20000340
 8003fac:	20000342 	.word	0x20000342
 8003fb0:	20000334 	.word	0x20000334
 8003fb4:	20000336 	.word	0x20000336
 8003fb8:	200001f4 	.word	0x200001f4
	else if(block == j_shape)
 8003fbc:	4b5f      	ldr	r3, [pc, #380]	@ (800413c <block_rotate+0x1128>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	f040 8335 	bne.w	8004630 <block_rotate+0x161c>
		if(rotation > 4)
 8003fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <block_rotate+0x112c>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d902      	bls.n	8003fd4 <block_rotate+0xfc0>
			rotation = 1;
 8003fce:	4b5c      	ldr	r3, [pc, #368]	@ (8004140 <block_rotate+0x112c>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	801a      	strh	r2, [r3, #0]
		if(rotation == 1)
 8003fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004140 <block_rotate+0x112c>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 80c5 	bne.w	8004168 <block_rotate+0x1154>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos + 1;
 8003fde:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <block_rotate+0x1130>)
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003fe8:	4b57      	ldr	r3, [pc, #348]	@ (8004148 <block_rotate+0x1134>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos + 2;
 8003ff2:	4b56      	ldr	r3, [pc, #344]	@ (800414c <block_rotate+0x1138>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8003ffc:	4b54      	ldr	r3, [pc, #336]	@ (8004150 <block_rotate+0x113c>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	3302      	adds	r3, #2
 8004002:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
			uint16_t nx4 = x4_pos + 1; uint16_t ny4 = y4_pos + 3;
 8004006:	4b53      	ldr	r3, [pc, #332]	@ (8004154 <block_rotate+0x1140>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8004010:	4b51      	ldr	r3, [pc, #324]	@ (8004158 <block_rotate+0x1144>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	3303      	adds	r3, #3
 8004016:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 800401a:	4b50      	ldr	r3, [pc, #320]	@ (800415c <block_rotate+0x1148>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	4a50      	ldr	r2, [pc, #320]	@ (8004160 <block_rotate+0x114c>)
 8004020:	8811      	ldrh	r1, [r2, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fbef 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 800402a:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <block_rotate+0x1130>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	4a46      	ldr	r2, [pc, #280]	@ (8004148 <block_rotate+0x1134>)
 8004030:	8811      	ldrh	r1, [r2, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fbe7 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 800403a:	4b44      	ldr	r3, [pc, #272]	@ (800414c <block_rotate+0x1138>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	4a44      	ldr	r2, [pc, #272]	@ (8004150 <block_rotate+0x113c>)
 8004040:	8811      	ldrh	r1, [r2, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fbdf 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 800404a:	4b42      	ldr	r3, [pc, #264]	@ (8004154 <block_rotate+0x1140>)
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	4a42      	ldr	r2, [pc, #264]	@ (8004158 <block_rotate+0x1144>)
 8004050:	8811      	ldrh	r1, [r2, #0]
 8004052:	2200      	movs	r2, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fbd7 	bl	8000808 <DrawBlock>
			spawn_j(x1_pos *24, y1_pos*24, LCD_COLOR_MAGENTA);
 800405a:	4b40      	ldr	r3, [pc, #256]	@ (800415c <block_rotate+0x1148>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	0052      	lsls	r2, r2, #1
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	b29b      	uxth	r3, r3
 8004068:	b218      	sxth	r0, r3
 800406a:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <block_rotate+0x114c>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	0052      	lsls	r2, r2, #1
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	b29b      	uxth	r3, r3
 8004078:	b21b      	sxth	r3, r3
 800407a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800407e:	4619      	mov	r1, r3
 8004080:	f7fc fe73 	bl	8000d6a <spawn_j>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <block_rotate+0x1134>)
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <block_rotate+0x1130>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	4a34      	ldr	r2, [pc, #208]	@ (8004164 <block_rotate+0x1150>)
 8004092:	00c3      	lsls	r3, r0, #3
 8004094:	440b      	add	r3, r1
 8004096:	2100      	movs	r1, #0
 8004098:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800409c:	4b2c      	ldr	r3, [pc, #176]	@ (8004150 <block_rotate+0x113c>)
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <block_rotate+0x1138>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004164 <block_rotate+0x1150>)
 80040aa:	00c3      	lsls	r3, r0, #3
 80040ac:	440b      	add	r3, r1
 80040ae:	2100      	movs	r1, #0
 80040b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80040b4:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <block_rotate+0x1144>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	4b26      	ldr	r3, [pc, #152]	@ (8004154 <block_rotate+0x1140>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <block_rotate+0x1150>)
 80040c2:	00c3      	lsls	r3, r0, #3
 80040c4:	440b      	add	r3, r1
 80040c6:	2100      	movs	r1, #0
 80040c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 80040cc:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80040d0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80040d4:	4923      	ldr	r1, [pc, #140]	@ (8004164 <block_rotate+0x1150>)
 80040d6:	00d2      	lsls	r2, r2, #3
 80040d8:	4413      	add	r3, r2
 80040da:	2201      	movs	r2, #1
 80040dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80040e0:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 80040e4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80040e8:	491e      	ldr	r1, [pc, #120]	@ (8004164 <block_rotate+0x1150>)
 80040ea:	00d2      	lsls	r2, r2, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	2201      	movs	r2, #1
 80040f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80040f4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80040f8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80040fc:	4919      	ldr	r1, [pc, #100]	@ (8004164 <block_rotate+0x1150>)
 80040fe:	00d2      	lsls	r2, r2, #3
 8004100:	4413      	add	r3, r2
 8004102:	2201      	movs	r2, #1
 8004104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8004108:	4a0f      	ldr	r2, [pc, #60]	@ (8004148 <block_rotate+0x1134>)
 800410a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800410e:	8013      	strh	r3, [r2, #0]
 8004110:	4a0f      	ldr	r2, [pc, #60]	@ (8004150 <block_rotate+0x113c>)
 8004112:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8004116:	8013      	strh	r3, [r2, #0]
 8004118:	4a0f      	ldr	r2, [pc, #60]	@ (8004158 <block_rotate+0x1144>)
 800411a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800411e:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8004120:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <block_rotate+0x1130>)
 8004122:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004126:	8013      	strh	r3, [r2, #0]
 8004128:	4a08      	ldr	r2, [pc, #32]	@ (800414c <block_rotate+0x1138>)
 800412a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800412e:	8013      	strh	r3, [r2, #0]
 8004130:	4a08      	ldr	r2, [pc, #32]	@ (8004154 <block_rotate+0x1140>)
 8004132:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8004136:	8013      	strh	r3, [r2, #0]
}
 8004138:	f000 bd9b 	b.w	8004c72 <block_rotate+0x1c5e>
 800413c:	20000344 	.word	0x20000344
 8004140:	20000000 	.word	0x20000000
 8004144:	20000338 	.word	0x20000338
 8004148:	2000033a 	.word	0x2000033a
 800414c:	2000033c 	.word	0x2000033c
 8004150:	2000033e 	.word	0x2000033e
 8004154:	20000340 	.word	0x20000340
 8004158:	20000342 	.word	0x20000342
 800415c:	20000334 	.word	0x20000334
 8004160:	20000336 	.word	0x20000336
 8004164:	200001f4 	.word	0x200001f4
		else if(rotation == 2)
 8004168:	4bbc      	ldr	r3, [pc, #752]	@ (800445c <block_rotate+0x1448>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	2b02      	cmp	r3, #2
 800416e:	f040 80b2 	bne.w	80042d6 <block_rotate+0x12c2>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos - 1;
 8004172:	4bbb      	ldr	r3, [pc, #748]	@ (8004460 <block_rotate+0x144c>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800417c:	4bb9      	ldr	r3, [pc, #740]	@ (8004464 <block_rotate+0x1450>)
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	3b01      	subs	r3, #1
 8004182:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos - 2;
 8004186:	4bb8      	ldr	r3, [pc, #736]	@ (8004468 <block_rotate+0x1454>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	3302      	adds	r3, #2
 800418c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004190:	4bb6      	ldr	r3, [pc, #728]	@ (800446c <block_rotate+0x1458>)
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	3b02      	subs	r3, #2
 8004196:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
			uint16_t nx4 = x4_pos + 3; uint16_t ny4 = y4_pos - 1;
 800419a:	4bb5      	ldr	r3, [pc, #724]	@ (8004470 <block_rotate+0x145c>)
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	3303      	adds	r3, #3
 80041a0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80041a4:	4bb3      	ldr	r3, [pc, #716]	@ (8004474 <block_rotate+0x1460>)
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
			spawn_j(x1_pos *24, y1_pos*24, LCD_COLOR_BLACK);
 80041ae:	4bb2      	ldr	r3, [pc, #712]	@ (8004478 <block_rotate+0x1464>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	0052      	lsls	r2, r2, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	b218      	sxth	r0, r3
 80041be:	4baf      	ldr	r3, [pc, #700]	@ (800447c <block_rotate+0x1468>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	0052      	lsls	r2, r2, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b21b      	sxth	r3, r3
 80041ce:	2200      	movs	r2, #0
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7fc fdca 	bl	8000d6a <spawn_j>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_MAGENTA);
 80041d6:	4ba8      	ldr	r3, [pc, #672]	@ (8004478 <block_rotate+0x1464>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4aa8      	ldr	r2, [pc, #672]	@ (800447c <block_rotate+0x1468>)
 80041dc:	8811      	ldrh	r1, [r2, #0]
 80041de:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc fb10 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_MAGENTA);
 80041e8:	f8b7 108c 	ldrh.w	r1, [r7, #140]	@ 0x8c
 80041ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80041f0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fb07 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_MAGENTA);
 80041fa:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 80041fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004202:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fafe 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_MAGENTA);
 800420c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 8004210:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004214:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc faf5 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 800421e:	4b91      	ldr	r3, [pc, #580]	@ (8004464 <block_rotate+0x1450>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	4b8e      	ldr	r3, [pc, #568]	@ (8004460 <block_rotate+0x144c>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	4a95      	ldr	r2, [pc, #596]	@ (8004480 <block_rotate+0x146c>)
 800422c:	00c3      	lsls	r3, r0, #3
 800422e:	440b      	add	r3, r1
 8004230:	2100      	movs	r1, #0
 8004232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004236:	4b8d      	ldr	r3, [pc, #564]	@ (800446c <block_rotate+0x1458>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	4b8a      	ldr	r3, [pc, #552]	@ (8004468 <block_rotate+0x1454>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	4a8f      	ldr	r2, [pc, #572]	@ (8004480 <block_rotate+0x146c>)
 8004244:	00c3      	lsls	r3, r0, #3
 8004246:	440b      	add	r3, r1
 8004248:	2100      	movs	r1, #0
 800424a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800424e:	4b89      	ldr	r3, [pc, #548]	@ (8004474 <block_rotate+0x1460>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	4b86      	ldr	r3, [pc, #536]	@ (8004470 <block_rotate+0x145c>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	4a89      	ldr	r2, [pc, #548]	@ (8004480 <block_rotate+0x146c>)
 800425c:	00c3      	lsls	r3, r0, #3
 800425e:	440b      	add	r3, r1
 8004260:	2100      	movs	r1, #0
 8004262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8004266:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800426a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800426e:	4984      	ldr	r1, [pc, #528]	@ (8004480 <block_rotate+0x146c>)
 8004270:	00d2      	lsls	r2, r2, #3
 8004272:	4413      	add	r3, r2
 8004274:	2201      	movs	r2, #1
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800427a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 800427e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004282:	497f      	ldr	r1, [pc, #508]	@ (8004480 <block_rotate+0x146c>)
 8004284:	00d2      	lsls	r2, r2, #3
 8004286:	4413      	add	r3, r2
 8004288:	2201      	movs	r2, #1
 800428a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800428e:	f8b7 2084 	ldrh.w	r2, [r7, #132]	@ 0x84
 8004292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004296:	497a      	ldr	r1, [pc, #488]	@ (8004480 <block_rotate+0x146c>)
 8004298:	00d2      	lsls	r2, r2, #3
 800429a:	4413      	add	r3, r2
 800429c:	2201      	movs	r2, #1
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 80042a2:	4a70      	ldr	r2, [pc, #448]	@ (8004464 <block_rotate+0x1450>)
 80042a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80042a8:	8013      	strh	r3, [r2, #0]
 80042aa:	4a70      	ldr	r2, [pc, #448]	@ (800446c <block_rotate+0x1458>)
 80042ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80042b0:	8013      	strh	r3, [r2, #0]
 80042b2:	4a70      	ldr	r2, [pc, #448]	@ (8004474 <block_rotate+0x1460>)
 80042b4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80042b8:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 80042ba:	4a69      	ldr	r2, [pc, #420]	@ (8004460 <block_rotate+0x144c>)
 80042bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80042c0:	8013      	strh	r3, [r2, #0]
 80042c2:	4a69      	ldr	r2, [pc, #420]	@ (8004468 <block_rotate+0x1454>)
 80042c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80042c8:	8013      	strh	r3, [r2, #0]
 80042ca:	4a69      	ldr	r2, [pc, #420]	@ (8004470 <block_rotate+0x145c>)
 80042cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042d0:	8013      	strh	r3, [r2, #0]
}
 80042d2:	f000 bcce 	b.w	8004c72 <block_rotate+0x1c5e>
		else if(rotation == 3)
 80042d6:	4b61      	ldr	r3, [pc, #388]	@ (800445c <block_rotate+0x1448>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	f040 80d2 	bne.w	8004484 <block_rotate+0x1470>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos - 1;
 80042e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004460 <block_rotate+0x144c>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 80042ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004464 <block_rotate+0x1450>)
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos - 2;
 80042f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004468 <block_rotate+0x1454>)
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	3b02      	subs	r3, #2
 80042fa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 80042fe:	4b5b      	ldr	r3, [pc, #364]	@ (800446c <block_rotate+0x1458>)
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	3b02      	subs	r3, #2
 8004304:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
			uint16_t nx4 = x4_pos - 1; uint16_t ny4 = y4_pos - 3;
 8004308:	4b59      	ldr	r3, [pc, #356]	@ (8004470 <block_rotate+0x145c>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	3b01      	subs	r3, #1
 800430e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004312:	4b58      	ldr	r3, [pc, #352]	@ (8004474 <block_rotate+0x1460>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	3b03      	subs	r3, #3
 8004318:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 800431c:	4b56      	ldr	r3, [pc, #344]	@ (8004478 <block_rotate+0x1464>)
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	4a56      	ldr	r2, [pc, #344]	@ (800447c <block_rotate+0x1468>)
 8004322:	8811      	ldrh	r1, [r2, #0]
 8004324:	2200      	movs	r2, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fa6e 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 800432c:	4b4c      	ldr	r3, [pc, #304]	@ (8004460 <block_rotate+0x144c>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	4a4c      	ldr	r2, [pc, #304]	@ (8004464 <block_rotate+0x1450>)
 8004332:	8811      	ldrh	r1, [r2, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc fa66 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 800433c:	4b4a      	ldr	r3, [pc, #296]	@ (8004468 <block_rotate+0x1454>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	4a4a      	ldr	r2, [pc, #296]	@ (800446c <block_rotate+0x1458>)
 8004342:	8811      	ldrh	r1, [r2, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fa5e 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 800434c:	4b48      	ldr	r3, [pc, #288]	@ (8004470 <block_rotate+0x145c>)
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	4a48      	ldr	r2, [pc, #288]	@ (8004474 <block_rotate+0x1460>)
 8004352:	8811      	ldrh	r1, [r2, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc fa56 	bl	8000808 <DrawBlock>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_MAGENTA);
 800435c:	4b46      	ldr	r3, [pc, #280]	@ (8004478 <block_rotate+0x1464>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	4a46      	ldr	r2, [pc, #280]	@ (800447c <block_rotate+0x1468>)
 8004362:	8811      	ldrh	r1, [r2, #0]
 8004364:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8004368:	4618      	mov	r0, r3
 800436a:	f7fc fa4d 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_MAGENTA);
 800436e:	f8b7 1098 	ldrh.w	r1, [r7, #152]	@ 0x98
 8004372:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8004376:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc fa44 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_MAGENTA);
 8004380:	f8b7 1094 	ldrh.w	r1, [r7, #148]	@ 0x94
 8004384:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004388:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800438c:	4618      	mov	r0, r3
 800438e:	f7fc fa3b 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_MAGENTA);
 8004392:	f8b7 1090 	ldrh.w	r1, [r7, #144]	@ 0x90
 8004396:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800439a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc fa32 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 80043a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004464 <block_rotate+0x1450>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <block_rotate+0x144c>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4a33      	ldr	r2, [pc, #204]	@ (8004480 <block_rotate+0x146c>)
 80043b2:	00c3      	lsls	r3, r0, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	2100      	movs	r1, #0
 80043b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80043bc:	4b2b      	ldr	r3, [pc, #172]	@ (800446c <block_rotate+0x1458>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	4b29      	ldr	r3, [pc, #164]	@ (8004468 <block_rotate+0x1454>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	4619      	mov	r1, r3
 80043c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004480 <block_rotate+0x146c>)
 80043ca:	00c3      	lsls	r3, r0, #3
 80043cc:	440b      	add	r3, r1
 80043ce:	2100      	movs	r1, #0
 80043d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80043d4:	4b27      	ldr	r3, [pc, #156]	@ (8004474 <block_rotate+0x1460>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <block_rotate+0x145c>)
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	4619      	mov	r1, r3
 80043e0:	4a27      	ldr	r2, [pc, #156]	@ (8004480 <block_rotate+0x146c>)
 80043e2:	00c3      	lsls	r3, r0, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	2100      	movs	r1, #0
 80043e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 80043ec:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 80043f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80043f4:	4922      	ldr	r1, [pc, #136]	@ (8004480 <block_rotate+0x146c>)
 80043f6:	00d2      	lsls	r2, r2, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	2201      	movs	r2, #1
 80043fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004400:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8004404:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004408:	491d      	ldr	r1, [pc, #116]	@ (8004480 <block_rotate+0x146c>)
 800440a:	00d2      	lsls	r2, r2, #3
 800440c:	4413      	add	r3, r2
 800440e:	2201      	movs	r2, #1
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004414:	f8b7 2090 	ldrh.w	r2, [r7, #144]	@ 0x90
 8004418:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800441c:	4918      	ldr	r1, [pc, #96]	@ (8004480 <block_rotate+0x146c>)
 800441e:	00d2      	lsls	r2, r2, #3
 8004420:	4413      	add	r3, r2
 8004422:	2201      	movs	r2, #1
 8004424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8004428:	4a0e      	ldr	r2, [pc, #56]	@ (8004464 <block_rotate+0x1450>)
 800442a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800442e:	8013      	strh	r3, [r2, #0]
 8004430:	4a0e      	ldr	r2, [pc, #56]	@ (800446c <block_rotate+0x1458>)
 8004432:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004436:	8013      	strh	r3, [r2, #0]
 8004438:	4a0e      	ldr	r2, [pc, #56]	@ (8004474 <block_rotate+0x1460>)
 800443a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800443e:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8004440:	4a07      	ldr	r2, [pc, #28]	@ (8004460 <block_rotate+0x144c>)
 8004442:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8004446:	8013      	strh	r3, [r2, #0]
 8004448:	4a07      	ldr	r2, [pc, #28]	@ (8004468 <block_rotate+0x1454>)
 800444a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800444e:	8013      	strh	r3, [r2, #0]
 8004450:	4a07      	ldr	r2, [pc, #28]	@ (8004470 <block_rotate+0x145c>)
 8004452:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004456:	8013      	strh	r3, [r2, #0]
}
 8004458:	f000 bc0b 	b.w	8004c72 <block_rotate+0x1c5e>
 800445c:	20000000 	.word	0x20000000
 8004460:	20000338 	.word	0x20000338
 8004464:	2000033a 	.word	0x2000033a
 8004468:	2000033c 	.word	0x2000033c
 800446c:	2000033e 	.word	0x2000033e
 8004470:	20000340 	.word	0x20000340
 8004474:	20000342 	.word	0x20000342
 8004478:	20000334 	.word	0x20000334
 800447c:	20000336 	.word	0x20000336
 8004480:	200001f4 	.word	0x200001f4
		else if(rotation == 4)
 8004484:	4b60      	ldr	r3, [pc, #384]	@ (8004608 <block_rotate+0x15f4>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	2b04      	cmp	r3, #4
 800448a:	f040 83f2 	bne.w	8004c72 <block_rotate+0x1c5e>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos + 1;
 800448e:	4b5f      	ldr	r3, [pc, #380]	@ (800460c <block_rotate+0x15f8>)
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8004498:	4b5d      	ldr	r3, [pc, #372]	@ (8004610 <block_rotate+0x15fc>)
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos + 2;
 80044a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004614 <block_rotate+0x1600>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	3b02      	subs	r3, #2
 80044a8:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 80044ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004618 <block_rotate+0x1604>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	3302      	adds	r3, #2
 80044b2:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
			uint16_t nx4 = x4_pos - 3; uint16_t ny4 = y4_pos + 1;
 80044b6:	4b59      	ldr	r3, [pc, #356]	@ (800461c <block_rotate+0x1608>)
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	3b03      	subs	r3, #3
 80044bc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 80044c0:	4b57      	ldr	r3, [pc, #348]	@ (8004620 <block_rotate+0x160c>)
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 80044ca:	4b56      	ldr	r3, [pc, #344]	@ (8004624 <block_rotate+0x1610>)
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	4a56      	ldr	r2, [pc, #344]	@ (8004628 <block_rotate+0x1614>)
 80044d0:	8811      	ldrh	r1, [r2, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fc f997 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 80044da:	4b4c      	ldr	r3, [pc, #304]	@ (800460c <block_rotate+0x15f8>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	4a4c      	ldr	r2, [pc, #304]	@ (8004610 <block_rotate+0x15fc>)
 80044e0:	8811      	ldrh	r1, [r2, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fc f98f 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80044ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004614 <block_rotate+0x1600>)
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004618 <block_rotate+0x1604>)
 80044f0:	8811      	ldrh	r1, [r2, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc f987 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80044fa:	4b48      	ldr	r3, [pc, #288]	@ (800461c <block_rotate+0x1608>)
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	4a48      	ldr	r2, [pc, #288]	@ (8004620 <block_rotate+0x160c>)
 8004500:	8811      	ldrh	r1, [r2, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7fc f97f 	bl	8000808 <DrawBlock>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_MAGENTA);
 800450a:	4b46      	ldr	r3, [pc, #280]	@ (8004624 <block_rotate+0x1610>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	4a46      	ldr	r2, [pc, #280]	@ (8004628 <block_rotate+0x1614>)
 8004510:	8811      	ldrh	r1, [r2, #0]
 8004512:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc f976 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_MAGENTA);
 800451c:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	@ 0xa4
 8004520:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004524:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc f96d 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_MAGENTA);
 800452e:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	@ 0xa0
 8004532:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8004536:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc f964 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_MAGENTA);
 8004540:	f8b7 109c 	ldrh.w	r1, [r7, #156]	@ 0x9c
 8004544:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004548:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800454c:	4618      	mov	r0, r3
 800454e:	f7fc f95b 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8004552:	4b2f      	ldr	r3, [pc, #188]	@ (8004610 <block_rotate+0x15fc>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	4b2c      	ldr	r3, [pc, #176]	@ (800460c <block_rotate+0x15f8>)
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	4619      	mov	r1, r3
 800455e:	4a33      	ldr	r2, [pc, #204]	@ (800462c <block_rotate+0x1618>)
 8004560:	00c3      	lsls	r3, r0, #3
 8004562:	440b      	add	r3, r1
 8004564:	2100      	movs	r1, #0
 8004566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800456a:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <block_rotate+0x1604>)
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	4b28      	ldr	r3, [pc, #160]	@ (8004614 <block_rotate+0x1600>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	4619      	mov	r1, r3
 8004576:	4a2d      	ldr	r2, [pc, #180]	@ (800462c <block_rotate+0x1618>)
 8004578:	00c3      	lsls	r3, r0, #3
 800457a:	440b      	add	r3, r1
 800457c:	2100      	movs	r1, #0
 800457e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004582:	4b27      	ldr	r3, [pc, #156]	@ (8004620 <block_rotate+0x160c>)
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	4b24      	ldr	r3, [pc, #144]	@ (800461c <block_rotate+0x1608>)
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	4619      	mov	r1, r3
 800458e:	4a27      	ldr	r2, [pc, #156]	@ (800462c <block_rotate+0x1618>)
 8004590:	00c3      	lsls	r3, r0, #3
 8004592:	440b      	add	r3, r1
 8004594:	2100      	movs	r1, #0
 8004596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 800459a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800459e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80045a2:	4922      	ldr	r1, [pc, #136]	@ (800462c <block_rotate+0x1618>)
 80045a4:	00d2      	lsls	r2, r2, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	2201      	movs	r2, #1
 80045aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80045ae:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 80045b2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80045b6:	491d      	ldr	r1, [pc, #116]	@ (800462c <block_rotate+0x1618>)
 80045b8:	00d2      	lsls	r2, r2, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	2201      	movs	r2, #1
 80045be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80045c2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 80045c6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80045ca:	4918      	ldr	r1, [pc, #96]	@ (800462c <block_rotate+0x1618>)
 80045cc:	00d2      	lsls	r2, r2, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	2201      	movs	r2, #1
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 80045d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004610 <block_rotate+0x15fc>)
 80045d8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80045dc:	8013      	strh	r3, [r2, #0]
 80045de:	4a0e      	ldr	r2, [pc, #56]	@ (8004618 <block_rotate+0x1604>)
 80045e0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80045e4:	8013      	strh	r3, [r2, #0]
 80045e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004620 <block_rotate+0x160c>)
 80045e8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80045ec:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 80045ee:	4a07      	ldr	r2, [pc, #28]	@ (800460c <block_rotate+0x15f8>)
 80045f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80045f4:	8013      	strh	r3, [r2, #0]
 80045f6:	4a07      	ldr	r2, [pc, #28]	@ (8004614 <block_rotate+0x1600>)
 80045f8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80045fc:	8013      	strh	r3, [r2, #0]
 80045fe:	4a07      	ldr	r2, [pc, #28]	@ (800461c <block_rotate+0x1608>)
 8004600:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004604:	8013      	strh	r3, [r2, #0]
}
 8004606:	e334      	b.n	8004c72 <block_rotate+0x1c5e>
 8004608:	20000000 	.word	0x20000000
 800460c:	20000338 	.word	0x20000338
 8004610:	2000033a 	.word	0x2000033a
 8004614:	2000033c 	.word	0x2000033c
 8004618:	2000033e 	.word	0x2000033e
 800461c:	20000340 	.word	0x20000340
 8004620:	20000342 	.word	0x20000342
 8004624:	20000334 	.word	0x20000334
 8004628:	20000336 	.word	0x20000336
 800462c:	200001f4 	.word	0x200001f4
	else if(block == t_shape)
 8004630:	4bb9      	ldr	r3, [pc, #740]	@ (8004918 <block_rotate+0x1904>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	2b06      	cmp	r3, #6
 8004636:	f040 831c 	bne.w	8004c72 <block_rotate+0x1c5e>
		if(rotation > 4)
 800463a:	4bb8      	ldr	r3, [pc, #736]	@ (800491c <block_rotate+0x1908>)
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	2b04      	cmp	r3, #4
 8004640:	d902      	bls.n	8004648 <block_rotate+0x1634>
			rotation = 1;
 8004642:	4bb6      	ldr	r3, [pc, #728]	@ (800491c <block_rotate+0x1908>)
 8004644:	2201      	movs	r2, #1
 8004646:	801a      	strh	r2, [r3, #0]
		if(rotation == 1)
 8004648:	4bb4      	ldr	r3, [pc, #720]	@ (800491c <block_rotate+0x1908>)
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 80ad 	bne.w	80047ac <block_rotate+0x1798>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos - 1;
 8004652:	4bb3      	ldr	r3, [pc, #716]	@ (8004920 <block_rotate+0x190c>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800465c:	4bb1      	ldr	r3, [pc, #708]	@ (8004924 <block_rotate+0x1910>)
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	3b01      	subs	r3, #1
 8004662:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos - 2;
 8004666:	4bb0      	ldr	r3, [pc, #704]	@ (8004928 <block_rotate+0x1914>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	3302      	adds	r3, #2
 800466c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8004670:	4bae      	ldr	r3, [pc, #696]	@ (800492c <block_rotate+0x1918>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	3b02      	subs	r3, #2
 8004676:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
			uint16_t nx4 = x4_pos + 2; uint16_t ny4 = y4_pos + 0;
 800467a:	4bad      	ldr	r3, [pc, #692]	@ (8004930 <block_rotate+0x191c>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	3302      	adds	r3, #2
 8004680:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 8004684:	4bab      	ldr	r3, [pc, #684]	@ (8004934 <block_rotate+0x1920>)
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 800468c:	4baa      	ldr	r3, [pc, #680]	@ (8004938 <block_rotate+0x1924>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	4aaa      	ldr	r2, [pc, #680]	@ (800493c <block_rotate+0x1928>)
 8004692:	8811      	ldrh	r1, [r2, #0]
 8004694:	2200      	movs	r2, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f7fc f8b6 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 800469c:	4ba0      	ldr	r3, [pc, #640]	@ (8004920 <block_rotate+0x190c>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	4aa0      	ldr	r2, [pc, #640]	@ (8004924 <block_rotate+0x1910>)
 80046a2:	8811      	ldrh	r1, [r2, #0]
 80046a4:	2200      	movs	r2, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc f8ae 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80046ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004928 <block_rotate+0x1914>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	4a9e      	ldr	r2, [pc, #632]	@ (800492c <block_rotate+0x1918>)
 80046b2:	8811      	ldrh	r1, [r2, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc f8a6 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80046bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004930 <block_rotate+0x191c>)
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004934 <block_rotate+0x1920>)
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fc f89e 	bl	8000808 <DrawBlock>
			spawn_t(x1_pos *24, y1_pos*24, LCD_COLOR_BLUE2);
 80046cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004938 <block_rotate+0x1924>)
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	0052      	lsls	r2, r2, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	b29b      	uxth	r3, r3
 80046da:	b218      	sxth	r0, r3
 80046dc:	4b97      	ldr	r3, [pc, #604]	@ (800493c <block_rotate+0x1928>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	0052      	lsls	r2, r2, #1
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b21b      	sxth	r3, r3
 80046ec:	f240 521f 	movw	r2, #1311	@ 0x51f
 80046f0:	4619      	mov	r1, r3
 80046f2:	f7fc fbb6 	bl	8000e62 <spawn_t>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 80046f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004924 <block_rotate+0x1910>)
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	4b88      	ldr	r3, [pc, #544]	@ (8004920 <block_rotate+0x190c>)
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	4a8f      	ldr	r2, [pc, #572]	@ (8004940 <block_rotate+0x192c>)
 8004704:	00c3      	lsls	r3, r0, #3
 8004706:	440b      	add	r3, r1
 8004708:	2100      	movs	r1, #0
 800470a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800470e:	4b87      	ldr	r3, [pc, #540]	@ (800492c <block_rotate+0x1918>)
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	4b84      	ldr	r3, [pc, #528]	@ (8004928 <block_rotate+0x1914>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	4a89      	ldr	r2, [pc, #548]	@ (8004940 <block_rotate+0x192c>)
 800471c:	00c3      	lsls	r3, r0, #3
 800471e:	440b      	add	r3, r1
 8004720:	2100      	movs	r1, #0
 8004722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004726:	4b83      	ldr	r3, [pc, #524]	@ (8004934 <block_rotate+0x1920>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	4b80      	ldr	r3, [pc, #512]	@ (8004930 <block_rotate+0x191c>)
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	4619      	mov	r1, r3
 8004732:	4a83      	ldr	r2, [pc, #524]	@ (8004940 <block_rotate+0x192c>)
 8004734:	00c3      	lsls	r3, r0, #3
 8004736:	440b      	add	r3, r1
 8004738:	2100      	movs	r1, #0
 800473a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 800473e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8004742:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004746:	497e      	ldr	r1, [pc, #504]	@ (8004940 <block_rotate+0x192c>)
 8004748:	00d2      	lsls	r2, r2, #3
 800474a:	4413      	add	r3, r2
 800474c:	2201      	movs	r2, #1
 800474e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004752:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 8004756:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800475a:	4979      	ldr	r1, [pc, #484]	@ (8004940 <block_rotate+0x192c>)
 800475c:	00d2      	lsls	r2, r2, #3
 800475e:	4413      	add	r3, r2
 8004760:	2201      	movs	r2, #1
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004766:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 800476a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800476e:	4974      	ldr	r1, [pc, #464]	@ (8004940 <block_rotate+0x192c>)
 8004770:	00d2      	lsls	r2, r2, #3
 8004772:	4413      	add	r3, r2
 8004774:	2201      	movs	r2, #1
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 800477a:	4a6a      	ldr	r2, [pc, #424]	@ (8004924 <block_rotate+0x1910>)
 800477c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8004780:	8013      	strh	r3, [r2, #0]
 8004782:	4a6a      	ldr	r2, [pc, #424]	@ (800492c <block_rotate+0x1918>)
 8004784:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8004788:	8013      	strh	r3, [r2, #0]
 800478a:	4a6a      	ldr	r2, [pc, #424]	@ (8004934 <block_rotate+0x1920>)
 800478c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8004790:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8004792:	4a63      	ldr	r2, [pc, #396]	@ (8004920 <block_rotate+0x190c>)
 8004794:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004798:	8013      	strh	r3, [r2, #0]
 800479a:	4a63      	ldr	r2, [pc, #396]	@ (8004928 <block_rotate+0x1914>)
 800479c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80047a0:	8013      	strh	r3, [r2, #0]
 80047a2:	4a63      	ldr	r2, [pc, #396]	@ (8004930 <block_rotate+0x191c>)
 80047a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80047a8:	8013      	strh	r3, [r2, #0]
}
 80047aa:	e262      	b.n	8004c72 <block_rotate+0x1c5e>
		else if(rotation == 2)
 80047ac:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <block_rotate+0x1908>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	f040 80c7 	bne.w	8004944 <block_rotate+0x1930>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos - 1;
 80047b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004920 <block_rotate+0x190c>)
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80047c0:	4b58      	ldr	r3, [pc, #352]	@ (8004924 <block_rotate+0x1910>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos - 2;
 80047ca:	4b57      	ldr	r3, [pc, #348]	@ (8004928 <block_rotate+0x1914>)
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	3b02      	subs	r3, #2
 80047d0:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 80047d4:	4b55      	ldr	r3, [pc, #340]	@ (800492c <block_rotate+0x1918>)
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	3b02      	subs	r3, #2
 80047da:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
			uint16_t nx4 = x4_pos + 0; uint16_t ny4 = y4_pos - 2;
 80047de:	4b54      	ldr	r3, [pc, #336]	@ (8004930 <block_rotate+0x191c>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 80047e6:	4b53      	ldr	r3, [pc, #332]	@ (8004934 <block_rotate+0x1920>)
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	3b02      	subs	r3, #2
 80047ec:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
			spawn_t(x1_pos *24, y1_pos*24, LCD_COLOR_BLACK);
 80047f0:	4b51      	ldr	r3, [pc, #324]	@ (8004938 <block_rotate+0x1924>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	0052      	lsls	r2, r2, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b218      	sxth	r0, r3
 8004800:	4b4e      	ldr	r3, [pc, #312]	@ (800493c <block_rotate+0x1928>)
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	0052      	lsls	r2, r2, #1
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	b29b      	uxth	r3, r3
 800480e:	b21b      	sxth	r3, r3
 8004810:	2200      	movs	r2, #0
 8004812:	4619      	mov	r1, r3
 8004814:	f7fc fb25 	bl	8000e62 <spawn_t>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLUE2);
 8004818:	4b47      	ldr	r3, [pc, #284]	@ (8004938 <block_rotate+0x1924>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	4a47      	ldr	r2, [pc, #284]	@ (800493c <block_rotate+0x1928>)
 800481e:	8811      	ldrh	r1, [r2, #0]
 8004820:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004824:	4618      	mov	r0, r3
 8004826:	f7fb ffef 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_BLUE2);
 800482a:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	@ 0xbc
 800482e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004832:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb ffe6 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_BLUE2);
 800483c:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	@ 0xb8
 8004840:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8004844:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004848:	4618      	mov	r0, r3
 800484a:	f7fb ffdd 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_BLUE2);
 800484e:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	@ 0xb4
 8004852:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8004856:	f240 521f 	movw	r2, #1311	@ 0x51f
 800485a:	4618      	mov	r0, r3
 800485c:	f7fb ffd4 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8004860:	4b30      	ldr	r3, [pc, #192]	@ (8004924 <block_rotate+0x1910>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	4b2e      	ldr	r3, [pc, #184]	@ (8004920 <block_rotate+0x190c>)
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4a34      	ldr	r2, [pc, #208]	@ (8004940 <block_rotate+0x192c>)
 800486e:	00c3      	lsls	r3, r0, #3
 8004870:	440b      	add	r3, r1
 8004872:	2100      	movs	r1, #0
 8004874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004878:	4b2c      	ldr	r3, [pc, #176]	@ (800492c <block_rotate+0x1918>)
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <block_rotate+0x1914>)
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	4a2e      	ldr	r2, [pc, #184]	@ (8004940 <block_rotate+0x192c>)
 8004886:	00c3      	lsls	r3, r0, #3
 8004888:	440b      	add	r3, r1
 800488a:	2100      	movs	r1, #0
 800488c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004890:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <block_rotate+0x1920>)
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	4b26      	ldr	r3, [pc, #152]	@ (8004930 <block_rotate+0x191c>)
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4a28      	ldr	r2, [pc, #160]	@ (8004940 <block_rotate+0x192c>)
 800489e:	00c3      	lsls	r3, r0, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	2100      	movs	r1, #0
 80048a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 80048a8:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 80048ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048b0:	4923      	ldr	r1, [pc, #140]	@ (8004940 <block_rotate+0x192c>)
 80048b2:	00d2      	lsls	r2, r2, #3
 80048b4:	4413      	add	r3, r2
 80048b6:	2201      	movs	r2, #1
 80048b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80048bc:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 80048c0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80048c4:	491e      	ldr	r1, [pc, #120]	@ (8004940 <block_rotate+0x192c>)
 80048c6:	00d2      	lsls	r2, r2, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	2201      	movs	r2, #1
 80048cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80048d0:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 80048d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 80048d8:	4919      	ldr	r1, [pc, #100]	@ (8004940 <block_rotate+0x192c>)
 80048da:	00d2      	lsls	r2, r2, #3
 80048dc:	4413      	add	r3, r2
 80048de:	2201      	movs	r2, #1
 80048e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 80048e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004924 <block_rotate+0x1910>)
 80048e6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 80048ea:	8013      	strh	r3, [r2, #0]
 80048ec:	4a0f      	ldr	r2, [pc, #60]	@ (800492c <block_rotate+0x1918>)
 80048ee:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80048f2:	8013      	strh	r3, [r2, #0]
 80048f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004934 <block_rotate+0x1920>)
 80048f6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80048fa:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 80048fc:	4a08      	ldr	r2, [pc, #32]	@ (8004920 <block_rotate+0x190c>)
 80048fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004902:	8013      	strh	r3, [r2, #0]
 8004904:	4a08      	ldr	r2, [pc, #32]	@ (8004928 <block_rotate+0x1914>)
 8004906:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800490a:	8013      	strh	r3, [r2, #0]
 800490c:	4a08      	ldr	r2, [pc, #32]	@ (8004930 <block_rotate+0x191c>)
 800490e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8004912:	8013      	strh	r3, [r2, #0]
}
 8004914:	e1ad      	b.n	8004c72 <block_rotate+0x1c5e>
 8004916:	bf00      	nop
 8004918:	20000344 	.word	0x20000344
 800491c:	20000000 	.word	0x20000000
 8004920:	20000338 	.word	0x20000338
 8004924:	2000033a 	.word	0x2000033a
 8004928:	2000033c 	.word	0x2000033c
 800492c:	2000033e 	.word	0x2000033e
 8004930:	20000340 	.word	0x20000340
 8004934:	20000342 	.word	0x20000342
 8004938:	20000334 	.word	0x20000334
 800493c:	20000336 	.word	0x20000336
 8004940:	200001f4 	.word	0x200001f4
		else if(rotation == 3)
 8004944:	4b60      	ldr	r3, [pc, #384]	@ (8004ac8 <block_rotate+0x1ab4>)
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	2b03      	cmp	r3, #3
 800494a:	f040 80d1 	bne.w	8004af0 <block_rotate+0x1adc>
			uint16_t nx2 = x2_pos - 1; uint16_t ny2 = y2_pos + 1;
 800494e:	4b5f      	ldr	r3, [pc, #380]	@ (8004acc <block_rotate+0x1ab8>)
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
 8004958:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad0 <block_rotate+0x1abc>)
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
			uint16_t nx3 = x3_pos - 2; uint16_t ny3 = y3_pos + 2;
 8004962:	4b5c      	ldr	r3, [pc, #368]	@ (8004ad4 <block_rotate+0x1ac0>)
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	3b02      	subs	r3, #2
 8004968:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
 800496c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ad8 <block_rotate+0x1ac4>)
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	3302      	adds	r3, #2
 8004972:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
			uint16_t nx4 = x4_pos - 2; uint16_t ny4 = y4_pos - 0;
 8004976:	4b59      	ldr	r3, [pc, #356]	@ (8004adc <block_rotate+0x1ac8>)
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	3b02      	subs	r3, #2
 800497c:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
 8004980:	4b57      	ldr	r3, [pc, #348]	@ (8004ae0 <block_rotate+0x1acc>)
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8004988:	4b56      	ldr	r3, [pc, #344]	@ (8004ae4 <block_rotate+0x1ad0>)
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	4a56      	ldr	r2, [pc, #344]	@ (8004ae8 <block_rotate+0x1ad4>)
 800498e:	8811      	ldrh	r1, [r2, #0]
 8004990:	2200      	movs	r2, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f7fb ff38 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8004998:	4b4c      	ldr	r3, [pc, #304]	@ (8004acc <block_rotate+0x1ab8>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad0 <block_rotate+0x1abc>)
 800499e:	8811      	ldrh	r1, [r2, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb ff30 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 80049a8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad4 <block_rotate+0x1ac0>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad8 <block_rotate+0x1ac4>)
 80049ae:	8811      	ldrh	r1, [r2, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb ff28 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 80049b8:	4b48      	ldr	r3, [pc, #288]	@ (8004adc <block_rotate+0x1ac8>)
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	4a48      	ldr	r2, [pc, #288]	@ (8004ae0 <block_rotate+0x1acc>)
 80049be:	8811      	ldrh	r1, [r2, #0]
 80049c0:	2200      	movs	r2, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb ff20 	bl	8000808 <DrawBlock>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLUE2);
 80049c8:	4b46      	ldr	r3, [pc, #280]	@ (8004ae4 <block_rotate+0x1ad0>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	4a46      	ldr	r2, [pc, #280]	@ (8004ae8 <block_rotate+0x1ad4>)
 80049ce:	8811      	ldrh	r1, [r2, #0]
 80049d0:	f240 521f 	movw	r2, #1311	@ 0x51f
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fb ff17 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_BLUE2);
 80049da:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	@ 0xc8
 80049de:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80049e2:	f240 521f 	movw	r2, #1311	@ 0x51f
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fb ff0e 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_BLUE2);
 80049ec:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	@ 0xc4
 80049f0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80049f4:	f240 521f 	movw	r2, #1311	@ 0x51f
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fb ff05 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_BLUE2);
 80049fe:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	@ 0xc0
 8004a02:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004a06:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fb fefc 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8004a10:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad0 <block_rotate+0x1abc>)
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	4b2d      	ldr	r3, [pc, #180]	@ (8004acc <block_rotate+0x1ab8>)
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4a33      	ldr	r2, [pc, #204]	@ (8004aec <block_rotate+0x1ad8>)
 8004a1e:	00c3      	lsls	r3, r0, #3
 8004a20:	440b      	add	r3, r1
 8004a22:	2100      	movs	r1, #0
 8004a24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <block_rotate+0x1ac4>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	4b29      	ldr	r3, [pc, #164]	@ (8004ad4 <block_rotate+0x1ac0>)
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	4a2d      	ldr	r2, [pc, #180]	@ (8004aec <block_rotate+0x1ad8>)
 8004a36:	00c3      	lsls	r3, r0, #3
 8004a38:	440b      	add	r3, r1
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004a40:	4b27      	ldr	r3, [pc, #156]	@ (8004ae0 <block_rotate+0x1acc>)
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	4b25      	ldr	r3, [pc, #148]	@ (8004adc <block_rotate+0x1ac8>)
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4a27      	ldr	r2, [pc, #156]	@ (8004aec <block_rotate+0x1ad8>)
 8004a4e:	00c3      	lsls	r3, r0, #3
 8004a50:	440b      	add	r3, r1
 8004a52:	2100      	movs	r1, #0
 8004a54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8004a58:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8004a5c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004a60:	4922      	ldr	r1, [pc, #136]	@ (8004aec <block_rotate+0x1ad8>)
 8004a62:	00d2      	lsls	r2, r2, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	2201      	movs	r2, #1
 8004a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a6c:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8004a70:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8004a74:	491d      	ldr	r1, [pc, #116]	@ (8004aec <block_rotate+0x1ad8>)
 8004a76:	00d2      	lsls	r2, r2, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a80:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	@ 0xc0
 8004a84:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004a88:	4918      	ldr	r1, [pc, #96]	@ (8004aec <block_rotate+0x1ad8>)
 8004a8a:	00d2      	lsls	r2, r2, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8004a94:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad0 <block_rotate+0x1abc>)
 8004a96:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8004a9a:	8013      	strh	r3, [r2, #0]
 8004a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad8 <block_rotate+0x1ac4>)
 8004a9e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8004aa2:	8013      	strh	r3, [r2, #0]
 8004aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae0 <block_rotate+0x1acc>)
 8004aa6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8004aaa:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8004aac:	4a07      	ldr	r2, [pc, #28]	@ (8004acc <block_rotate+0x1ab8>)
 8004aae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8004ab2:	8013      	strh	r3, [r2, #0]
 8004ab4:	4a07      	ldr	r2, [pc, #28]	@ (8004ad4 <block_rotate+0x1ac0>)
 8004ab6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8004aba:	8013      	strh	r3, [r2, #0]
 8004abc:	4a07      	ldr	r2, [pc, #28]	@ (8004adc <block_rotate+0x1ac8>)
 8004abe:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004ac2:	8013      	strh	r3, [r2, #0]
}
 8004ac4:	e0d5      	b.n	8004c72 <block_rotate+0x1c5e>
 8004ac6:	bf00      	nop
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	20000338 	.word	0x20000338
 8004ad0:	2000033a 	.word	0x2000033a
 8004ad4:	2000033c 	.word	0x2000033c
 8004ad8:	2000033e 	.word	0x2000033e
 8004adc:	20000340 	.word	0x20000340
 8004ae0:	20000342 	.word	0x20000342
 8004ae4:	20000334 	.word	0x20000334
 8004ae8:	20000336 	.word	0x20000336
 8004aec:	200001f4 	.word	0x200001f4
		else if(rotation == 4)
 8004af0:	4b62      	ldr	r3, [pc, #392]	@ (8004c7c <block_rotate+0x1c68>)
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	f040 80bc 	bne.w	8004c72 <block_rotate+0x1c5e>
			uint16_t nx2 = x2_pos + 1; uint16_t ny2 = y2_pos + 1;
 8004afa:	4b61      	ldr	r3, [pc, #388]	@ (8004c80 <block_rotate+0x1c6c>)
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
 8004b04:	4b5f      	ldr	r3, [pc, #380]	@ (8004c84 <block_rotate+0x1c70>)
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
			uint16_t nx3 = x3_pos + 2; uint16_t ny3 = y3_pos + 2;
 8004b0e:	4b5e      	ldr	r3, [pc, #376]	@ (8004c88 <block_rotate+0x1c74>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	3302      	adds	r3, #2
 8004b14:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
 8004b18:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <block_rotate+0x1c78>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
			uint16_t nx4 = x4_pos + 0; uint16_t ny4 = y4_pos + 2;
 8004b22:	4b5b      	ldr	r3, [pc, #364]	@ (8004c90 <block_rotate+0x1c7c>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8004b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004c94 <block_rotate+0x1c80>)
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	3302      	adds	r3, #2
 8004b30:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLACK);
 8004b34:	4b58      	ldr	r3, [pc, #352]	@ (8004c98 <block_rotate+0x1c84>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	4a58      	ldr	r2, [pc, #352]	@ (8004c9c <block_rotate+0x1c88>)
 8004b3a:	8811      	ldrh	r1, [r2, #0]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fb fe62 	bl	8000808 <DrawBlock>
			DrawBlock(x2_pos, y2_pos, LCD_COLOR_BLACK);
 8004b44:	4b4e      	ldr	r3, [pc, #312]	@ (8004c80 <block_rotate+0x1c6c>)
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	4a4e      	ldr	r2, [pc, #312]	@ (8004c84 <block_rotate+0x1c70>)
 8004b4a:	8811      	ldrh	r1, [r2, #0]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fb fe5a 	bl	8000808 <DrawBlock>
			DrawBlock(x3_pos, y3_pos, LCD_COLOR_BLACK);
 8004b54:	4b4c      	ldr	r3, [pc, #304]	@ (8004c88 <block_rotate+0x1c74>)
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	4a4c      	ldr	r2, [pc, #304]	@ (8004c8c <block_rotate+0x1c78>)
 8004b5a:	8811      	ldrh	r1, [r2, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fb fe52 	bl	8000808 <DrawBlock>
			DrawBlock(x4_pos, y4_pos, LCD_COLOR_BLACK);
 8004b64:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <block_rotate+0x1c7c>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	4a4a      	ldr	r2, [pc, #296]	@ (8004c94 <block_rotate+0x1c80>)
 8004b6a:	8811      	ldrh	r1, [r2, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fb fe4a 	bl	8000808 <DrawBlock>
			DrawBlock(x1_pos, y1_pos, LCD_COLOR_BLUE2);
 8004b74:	4b48      	ldr	r3, [pc, #288]	@ (8004c98 <block_rotate+0x1c84>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	4a48      	ldr	r2, [pc, #288]	@ (8004c9c <block_rotate+0x1c88>)
 8004b7a:	8811      	ldrh	r1, [r2, #0]
 8004b7c:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fb fe41 	bl	8000808 <DrawBlock>
			DrawBlock(nx2, ny2, LCD_COLOR_BLUE2);
 8004b86:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	@ 0xd4
 8004b8a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8004b8e:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fb fe38 	bl	8000808 <DrawBlock>
			DrawBlock(nx3, ny3, LCD_COLOR_BLUE2);
 8004b98:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	@ 0xd0
 8004b9c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8004ba0:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fb fe2f 	bl	8000808 <DrawBlock>
			DrawBlock(nx4, ny4, LCD_COLOR_BLUE2);
 8004baa:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	@ 0xcc
 8004bae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bb2:	f240 521f 	movw	r2, #1311	@ 0x51f
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fb fe26 	bl	8000808 <DrawBlock>
			game[y2_pos][x2_pos] = 0; game[y3_pos][x3_pos] = 0; game[y4_pos][x4_pos] = 0;
 8004bbc:	4b31      	ldr	r3, [pc, #196]	@ (8004c84 <block_rotate+0x1c70>)
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c80 <block_rotate+0x1c6c>)
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4a35      	ldr	r2, [pc, #212]	@ (8004ca0 <block_rotate+0x1c8c>)
 8004bca:	00c3      	lsls	r3, r0, #3
 8004bcc:	440b      	add	r3, r1
 8004bce:	2100      	movs	r1, #0
 8004bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c8c <block_rotate+0x1c78>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	4b2b      	ldr	r3, [pc, #172]	@ (8004c88 <block_rotate+0x1c74>)
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca0 <block_rotate+0x1c8c>)
 8004be2:	00c3      	lsls	r3, r0, #3
 8004be4:	440b      	add	r3, r1
 8004be6:	2100      	movs	r1, #0
 8004be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004bec:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <block_rotate+0x1c80>)
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	4b27      	ldr	r3, [pc, #156]	@ (8004c90 <block_rotate+0x1c7c>)
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4a29      	ldr	r2, [pc, #164]	@ (8004ca0 <block_rotate+0x1c8c>)
 8004bfa:	00c3      	lsls	r3, r0, #3
 8004bfc:	440b      	add	r3, r1
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			game[ny2][nx2] = 1; game[ny3][nx3] = 1; game[ny4][nx4] = 1;
 8004c04:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	@ 0xd4
 8004c08:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8004c0c:	4924      	ldr	r1, [pc, #144]	@ (8004ca0 <block_rotate+0x1c8c>)
 8004c0e:	00d2      	lsls	r2, r2, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	2201      	movs	r2, #1
 8004c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c18:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8004c1c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8004c20:	491f      	ldr	r1, [pc, #124]	@ (8004ca0 <block_rotate+0x1c8c>)
 8004c22:	00d2      	lsls	r2, r2, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	2201      	movs	r2, #1
 8004c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c2c:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	@ 0xcc
 8004c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c34:	491a      	ldr	r1, [pc, #104]	@ (8004ca0 <block_rotate+0x1c8c>)
 8004c36:	00d2      	lsls	r2, r2, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			y2_pos = ny2; y3_pos = ny3; y4_pos = ny4;
 8004c40:	4a10      	ldr	r2, [pc, #64]	@ (8004c84 <block_rotate+0x1c70>)
 8004c42:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8004c46:	8013      	strh	r3, [r2, #0]
 8004c48:	4a10      	ldr	r2, [pc, #64]	@ (8004c8c <block_rotate+0x1c78>)
 8004c4a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8004c4e:	8013      	strh	r3, [r2, #0]
 8004c50:	4a10      	ldr	r2, [pc, #64]	@ (8004c94 <block_rotate+0x1c80>)
 8004c52:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8004c56:	8013      	strh	r3, [r2, #0]
			x2_pos = nx2; x3_pos = nx3; x4_pos = nx4;
 8004c58:	4a09      	ldr	r2, [pc, #36]	@ (8004c80 <block_rotate+0x1c6c>)
 8004c5a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8004c5e:	8013      	strh	r3, [r2, #0]
 8004c60:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <block_rotate+0x1c74>)
 8004c62:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8004c66:	8013      	strh	r3, [r2, #0]
 8004c68:	4a09      	ldr	r2, [pc, #36]	@ (8004c90 <block_rotate+0x1c7c>)
 8004c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c6e:	8013      	strh	r3, [r2, #0]
}
 8004c70:	e7ff      	b.n	8004c72 <block_rotate+0x1c5e>
 8004c72:	bf00      	nop
 8004c74:	37d8      	adds	r7, #216	@ 0xd8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	20000338 	.word	0x20000338
 8004c84:	2000033a 	.word	0x2000033a
 8004c88:	2000033c 	.word	0x2000033c
 8004c8c:	2000033e 	.word	0x2000033e
 8004c90:	20000340 	.word	0x20000340
 8004c94:	20000342 	.word	0x20000342
 8004c98:	20000334 	.word	0x20000334
 8004c9c:	20000336 	.word	0x20000336
 8004ca0:	200001f4 	.word	0x200001f4

08004ca4 <check_gameEnd>:

uint16_t check_gameEnd()
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
	//after a block spawns and sets its game status, check if the spot below the game status on the board is 1
	for(int i =0; i < 9; i++)
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	bf00      	nop
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	dc09      	bgt.n	8004cca <check_gameEnd+0x26>
	{
		if(board[0][i] == 1)
 8004cb6:	4a08      	ldr	r2, [pc, #32]	@ (8004cd8 <check_gameEnd+0x34>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <check_gameEnd+0x22>
			return 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e002      	b.n	8004ccc <check_gameEnd+0x28>
		else return 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <check_gameEnd+0x28>
	}
	return 0;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	200000b4 	.word	0x200000b4

08004cdc <game_Run>:

void game_Run()
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
	while(check_gameEnd() == 0)
 8004ce0:	e003      	b.n	8004cea <game_Run+0xe>
	{
		spawn_block();
 8004ce2:	f7fc f943 	bl	8000f6c <spawn_block>
		block_fall();
 8004ce6:	f7fc fcc1 	bl	800166c <block_fall>
	while(check_gameEnd() == 0)
 8004cea:	f7ff ffdb 	bl	8004ca4 <check_gameEnd>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f6      	beq.n	8004ce2 <game_Run+0x6>
	}
	game_End();
 8004cf4:	f000 f802 	bl	8004cfc <game_End>
}
 8004cf8:	bf00      	nop
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <game_End>:

void game_End()
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
	for(int i = 0; i < 240; i++)
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e009      	b.n	8004d1c <game_End+0x20>
	{
		LCD_Draw_Vertical_Line(i, 120, 40, LCD_COLOR_BLACK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	b298      	uxth	r0, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2228      	movs	r2, #40	@ 0x28
 8004d10:	2178      	movs	r1, #120	@ 0x78
 8004d12:	f000 fa3d 	bl	8005190 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < 240; i++)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2bef      	cmp	r3, #239	@ 0xef
 8004d20:	ddf2      	ble.n	8004d08 <game_End+0xc>
	}

	LCD_DisplayChar(100,140,'G');
 8004d22:	2247      	movs	r2, #71	@ 0x47
 8004d24:	218c      	movs	r1, #140	@ 0x8c
 8004d26:	2064      	movs	r0, #100	@ 0x64
 8004d28:	f000 fb76 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'a');
 8004d2c:	2261      	movs	r2, #97	@ 0x61
 8004d2e:	218c      	movs	r1, #140	@ 0x8c
 8004d30:	2073      	movs	r0, #115	@ 0x73
 8004d32:	f000 fb71 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'m');
 8004d36:	226d      	movs	r2, #109	@ 0x6d
 8004d38:	218c      	movs	r1, #140	@ 0x8c
 8004d3a:	207d      	movs	r0, #125	@ 0x7d
 8004d3c:	f000 fb6c 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'e');
 8004d40:	2265      	movs	r2, #101	@ 0x65
 8004d42:	218c      	movs	r1, #140	@ 0x8c
 8004d44:	2082      	movs	r0, #130	@ 0x82
 8004d46:	f000 fb67 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,' ');
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	218c      	movs	r1, #140	@ 0x8c
 8004d4e:	208c      	movs	r0, #140	@ 0x8c
 8004d50:	f000 fb62 	bl	8005418 <LCD_DisplayChar>

	LCD_DisplayChar(100,160,' ');
 8004d54:	2220      	movs	r2, #32
 8004d56:	21a0      	movs	r1, #160	@ 0xa0
 8004d58:	2064      	movs	r0, #100	@ 0x64
 8004d5a:	f000 fb5d 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'O');
 8004d5e:	224f      	movs	r2, #79	@ 0x4f
 8004d60:	21a0      	movs	r1, #160	@ 0xa0
 8004d62:	2073      	movs	r0, #115	@ 0x73
 8004d64:	f000 fb58 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'v');
 8004d68:	2276      	movs	r2, #118	@ 0x76
 8004d6a:	21a0      	movs	r1, #160	@ 0xa0
 8004d6c:	207d      	movs	r0, #125	@ 0x7d
 8004d6e:	f000 fb53 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'e');
 8004d72:	2265      	movs	r2, #101	@ 0x65
 8004d74:	21a0      	movs	r1, #160	@ 0xa0
 8004d76:	2082      	movs	r0, #130	@ 0x82
 8004d78:	f000 fb4e 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'r');
 8004d7c:	2272      	movs	r2, #114	@ 0x72
 8004d7e:	21a0      	movs	r1, #160	@ 0xa0
 8004d80:	208c      	movs	r0, #140	@ 0x8c
 8004d82:	f000 fb49 	bl	8005418 <LCD_DisplayChar>

	HAL_Delay(3000);
 8004d86:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004d8a:	f001 fe29 	bl	80069e0 <HAL_Delay>

	LCD_Clear(0, LCD_COLOR_BLACK);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2000      	movs	r0, #0
 8004d92:	f000 fa91 	bl	80052b8 <LCD_Clear>

	//writing out time elapsed
	char timeElapsed[4];
	itoa(timer_getTime(), timeElapsed, 10);
 8004d96:	f000 fc19 	bl	80055cc <timer_getTime>
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	220a      	movs	r2, #10
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f005 f9cb 	bl	800a13a <itoa>

	LCD_DisplayChar(90, 160, timeElapsed[0]);
 8004da4:	783b      	ldrb	r3, [r7, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	21a0      	movs	r1, #160	@ 0xa0
 8004daa:	205a      	movs	r0, #90	@ 0x5a
 8004dac:	f000 fb34 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(110, 160, timeElapsed[1]);
 8004db0:	787b      	ldrb	r3, [r7, #1]
 8004db2:	461a      	mov	r2, r3
 8004db4:	21a0      	movs	r1, #160	@ 0xa0
 8004db6:	206e      	movs	r0, #110	@ 0x6e
 8004db8:	f000 fb2e 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(130, 160, timeElapsed[2]);
 8004dbc:	78bb      	ldrb	r3, [r7, #2]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	21a0      	movs	r1, #160	@ 0xa0
 8004dc2:	2082      	movs	r0, #130	@ 0x82
 8004dc4:	f000 fb28 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(150, 160, timeElapsed[3]);
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	21a0      	movs	r1, #160	@ 0xa0
 8004dce:	2096      	movs	r0, #150	@ 0x96
 8004dd0:	f000 fb22 	bl	8005418 <LCD_DisplayChar>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <button_clockEnable>:
	__HAL_RCC_GPIOA_CLK_ENABLE();
}


void	button_clockEnable()
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <button_clockEnable+0x30>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <button_clockEnable+0x30>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <button_clockEnable+0x30>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <buttonInterruptMode>:
	else
		return BUTTON_NOTPRESS;
}

void buttonInterruptMode()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef button = {0};
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	611a      	str	r2, [r3, #16]

	button.Pin = BUTTON_PIN;
 8004e24:	2301      	movs	r3, #1
 8004e26:	607b      	str	r3, [r7, #4]
	button.Mode = GPIO_MODE_IT_RISING ;
 8004e28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004e2c:	60bb      	str	r3, [r7, #8]
	button.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_NOPULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
	button_clockEnable();
 8004e36:	f7ff ffd1 	bl	8004ddc <button_clockEnable>
	HAL_GPIO_Init (GPIOA, &button);
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4805      	ldr	r0, [pc, #20]	@ (8004e54 <buttonInterruptMode+0x44>)
 8004e40:	f001 ff7a 	bl	8006d38 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQNum);
 8004e44:	2006      	movs	r0, #6
 8004e46:	f001 ff28 	bl	8006c9a <HAL_NVIC_EnableIRQ>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40020000 	.word	0x40020000

08004e58 <EXTI_ClearPendingBit>:
			*NVIC_ICPR0 |= (1 << IRQ_Num);
	if(IRQ_Num >= IRQComp)
			*NVIC_ICPR0 |= (1 << IRQ_Num%32);
}
void EXTI_ClearPendingBit(uint8_t pinNum)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (1 << pinNum);
 8004e62:	4b08      	ldr	r3, [pc, #32]	@ (8004e84 <EXTI_ClearPendingBit+0x2c>)
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	79fa      	ldrb	r2, [r7, #7]
 8004e68:	2101      	movs	r1, #1
 8004e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4a04      	ldr	r2, [pc, #16]	@ (8004e84 <EXTI_ClearPendingBit+0x2c>)
 8004e72:	430b      	orrs	r3, r1
 8004e74:	6153      	str	r3, [r2, #20]
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40013c00 	.word	0x40013c00

08004e88 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	@ 0x30
 8004e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	4b5a      	ldr	r3, [pc, #360]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	4a59      	ldr	r2, [pc, #356]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004e98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e9e:	4b57      	ldr	r3, [pc, #348]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	4b53      	ldr	r3, [pc, #332]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	4a52      	ldr	r2, [pc, #328]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eba:	4b50      	ldr	r3, [pc, #320]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	4b4c      	ldr	r3, [pc, #304]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	4a4b      	ldr	r2, [pc, #300]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ed6:	4b49      	ldr	r3, [pc, #292]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	4b45      	ldr	r3, [pc, #276]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	4a44      	ldr	r2, [pc, #272]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ef2:	4b42      	ldr	r3, [pc, #264]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	4b3e      	ldr	r3, [pc, #248]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	4a3d      	ldr	r2, [pc, #244]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f08:	f043 0308 	orr.w	r3, r3, #8
 8004f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	4b37      	ldr	r3, [pc, #220]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	4a36      	ldr	r2, [pc, #216]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2a:	4b34      	ldr	r3, [pc, #208]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4b30      	ldr	r3, [pc, #192]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f46:	4b2d      	ldr	r3, [pc, #180]	@ (8004ffc <LCD_GPIO_Init+0x174>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004f52:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004f56:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004f60:	2302      	movs	r3, #2
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004f64:	230e      	movs	r3, #14
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004f68:	f107 031c 	add.w	r3, r7, #28
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4824      	ldr	r0, [pc, #144]	@ (8005000 <LCD_GPIO_Init+0x178>)
 8004f70:	f001 fee2 	bl	8006d38 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004f74:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004f78:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004f7a:	f107 031c 	add.w	r3, r7, #28
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4820      	ldr	r0, [pc, #128]	@ (8005004 <LCD_GPIO_Init+0x17c>)
 8004f82:	f001 fed9 	bl	8006d38 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004f86:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004f8c:	f107 031c 	add.w	r3, r7, #28
 8004f90:	4619      	mov	r1, r3
 8004f92:	481d      	ldr	r0, [pc, #116]	@ (8005008 <LCD_GPIO_Init+0x180>)
 8004f94:	f001 fed0 	bl	8006d38 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004f98:	2348      	movs	r3, #72	@ 0x48
 8004f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	481a      	ldr	r0, [pc, #104]	@ (800500c <LCD_GPIO_Init+0x184>)
 8004fa4:	f001 fec8 	bl	8006d38 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004fae:	f107 031c 	add.w	r3, r7, #28
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4816      	ldr	r0, [pc, #88]	@ (8005010 <LCD_GPIO_Init+0x188>)
 8004fb6:	f001 febf 	bl	8006d38 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004fba:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004fbe:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4813      	ldr	r0, [pc, #76]	@ (8005014 <LCD_GPIO_Init+0x18c>)
 8004fc8:	f001 feb6 	bl	8006d38 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004fd0:	2309      	movs	r3, #9
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004fd4:	f107 031c 	add.w	r3, r7, #28
 8004fd8:	4619      	mov	r1, r3
 8004fda:	480a      	ldr	r0, [pc, #40]	@ (8005004 <LCD_GPIO_Init+0x17c>)
 8004fdc:	f001 feac 	bl	8006d38 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004fe0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004fe6:	f107 031c 	add.w	r3, r7, #28
 8004fea:	4619      	mov	r1, r3
 8004fec:	4809      	ldr	r0, [pc, #36]	@ (8005014 <LCD_GPIO_Init+0x18c>)
 8004fee:	f001 fea3 	bl	8006d38 <HAL_GPIO_Init>
}
 8004ff2:	bf00      	nop
 8004ff4:	3730      	adds	r7, #48	@ 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40020000 	.word	0x40020000
 8005004:	40020400 	.word	0x40020400
 8005008:	40020800 	.word	0x40020800
 800500c:	40020c00 	.word	0x40020c00
 8005010:	40021400 	.word	0x40021400
 8005014:	40021800 	.word	0x40021800

08005018 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b090      	sub	sp, #64	@ 0x40
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8005026:	23f0      	movs	r3, #240	@ 0xf0
 8005028:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800502e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8005032:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8005034:	2302      	movs	r3, #2
 8005036:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8005038:	23ff      	movs	r3, #255	@ 0xff
 800503a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8005040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8005046:	2305      	movs	r3, #5
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8005050:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <LTCD_Layer_Init+0x78>)
 8005052:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8005054:	23f0      	movs	r3, #240	@ 0xf0
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8005058:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800505c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8005070:	79fa      	ldrb	r2, [r7, #7]
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	4619      	mov	r1, r3
 8005078:	4806      	ldr	r0, [pc, #24]	@ (8005094 <LTCD_Layer_Init+0x7c>)
 800507a:	f003 fa23 	bl	80084c4 <HAL_LTDC_ConfigLayer>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8005084:	f000 fa18 	bl	80054b8 <LCD_Error_Handler>
	}
}
 8005088:	bf00      	nop
 800508a:	3740      	adds	r7, #64	@ 0x40
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000424 	.word	0x20000424
 8005094:	20000348 	.word	0x20000348

08005098 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800509c:	4b2a      	ldr	r3, [pc, #168]	@ (8005148 <LTCD__Init+0xb0>)
 800509e:	4a2b      	ldr	r2, [pc, #172]	@ (800514c <LTCD__Init+0xb4>)
 80050a0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80050a2:	4b29      	ldr	r3, [pc, #164]	@ (8005148 <LTCD__Init+0xb0>)
 80050a4:	2209      	movs	r2, #9
 80050a6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80050a8:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <LTCD__Init+0xb0>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80050ae:	4b26      	ldr	r3, [pc, #152]	@ (8005148 <LTCD__Init+0xb0>)
 80050b0:	221d      	movs	r2, #29
 80050b2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80050b4:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <LTCD__Init+0xb0>)
 80050b6:	2203      	movs	r2, #3
 80050b8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80050ba:	4b23      	ldr	r3, [pc, #140]	@ (8005148 <LTCD__Init+0xb0>)
 80050bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80050c0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80050c2:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <LTCD__Init+0xb0>)
 80050c4:	f240 1243 	movw	r2, #323	@ 0x143
 80050c8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <LTCD__Init+0xb0>)
 80050cc:	f240 1217 	movw	r2, #279	@ 0x117
 80050d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80050d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005148 <LTCD__Init+0xb0>)
 80050d4:	f240 1247 	movw	r2, #327	@ 0x147
 80050d8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80050da:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <LTCD__Init+0xb0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80050e2:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <LTCD__Init+0xb0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80050ea:	4b17      	ldr	r3, [pc, #92]	@ (8005148 <LTCD__Init+0xb0>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80050f2:	4b17      	ldr	r3, [pc, #92]	@ (8005150 <LTCD__Init+0xb8>)
 80050f4:	2208      	movs	r2, #8
 80050f6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <LTCD__Init+0xb8>)
 80050fa:	22c0      	movs	r2, #192	@ 0xc0
 80050fc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80050fe:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <LTCD__Init+0xb8>)
 8005100:	2204      	movs	r2, #4
 8005102:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005104:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <LTCD__Init+0xb8>)
 8005106:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800510c:	4810      	ldr	r0, [pc, #64]	@ (8005150 <LTCD__Init+0xb8>)
 800510e:	f004 f833 	bl	8009178 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <LTCD__Init+0xb0>)
 8005114:	2200      	movs	r2, #0
 8005116:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <LTCD__Init+0xb0>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <LTCD__Init+0xb0>)
 8005120:	2200      	movs	r2, #0
 8005122:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005124:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <LTCD__Init+0xb0>)
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800512a:	f7ff fead 	bl	8004e88 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800512e:	4806      	ldr	r0, [pc, #24]	@ (8005148 <LTCD__Init+0xb0>)
 8005130:	f003 f8f8 	bl	8008324 <HAL_LTDC_Init>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800513a:	f000 f9bd 	bl	80054b8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800513e:	f000 fa5b 	bl	80055f8 <ili9341_Init>
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000348 	.word	0x20000348
 800514c:	40016800 	.word	0x40016800
 8005150:	200003f0 	.word	0x200003f0

08005154 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	80fb      	strh	r3, [r7, #6]
 800515e:	460b      	mov	r3, r1
 8005160:	80bb      	strh	r3, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8005166:	88ba      	ldrh	r2, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	461a      	mov	r2, r3
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4413      	add	r3, r2
 8005176:	4905      	ldr	r1, [pc, #20]	@ (800518c <LCD_Draw_Pixel+0x38>)
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000424 	.word	0x20000424

08005190 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	4611      	mov	r1, r2
 800519c:	461a      	mov	r2, r3
 800519e:	4623      	mov	r3, r4
 80051a0:	80fb      	strh	r3, [r7, #6]
 80051a2:	4603      	mov	r3, r0
 80051a4:	80bb      	strh	r3, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	807b      	strh	r3, [r7, #2]
 80051aa:	4613      	mov	r3, r2
 80051ac:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	81fb      	strh	r3, [r7, #14]
 80051b2:	e00b      	b.n	80051cc <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80051b4:	89fa      	ldrh	r2, [r7, #14]
 80051b6:	88bb      	ldrh	r3, [r7, #4]
 80051b8:	4413      	add	r3, r2
 80051ba:	b299      	uxth	r1, r3
 80051bc:	883a      	ldrh	r2, [r7, #0]
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ffc7 	bl	8005154 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80051c6:	89fb      	ldrh	r3, [r7, #14]
 80051c8:	3301      	adds	r3, #1
 80051ca:	81fb      	strh	r3, [r7, #14]
 80051cc:	89fa      	ldrh	r2, [r7, #14]
 80051ce:	887b      	ldrh	r3, [r7, #2]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d3ef      	bcc.n	80051b4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd90      	pop	{r4, r7, pc}

080051de <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80051de:	b590      	push	{r4, r7, lr}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	4604      	mov	r4, r0
 80051e6:	4608      	mov	r0, r1
 80051e8:	4611      	mov	r1, r2
 80051ea:	461a      	mov	r2, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	80fb      	strh	r3, [r7, #6]
 80051f0:	4603      	mov	r3, r0
 80051f2:	80bb      	strh	r3, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
 80051f8:	4613      	mov	r3, r2
 80051fa:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	81fb      	strh	r3, [r7, #14]
 8005200:	e00b      	b.n	800521a <LCD_Draw_Horizontal_Line+0x3c>
	 {
		LCD_Draw_Pixel(i+x, y, color);
 8005202:	89fa      	ldrh	r2, [r7, #14]
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	4413      	add	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	883a      	ldrh	r2, [r7, #0]
 800520c:	88b9      	ldrh	r1, [r7, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ffa0 	bl	8005154 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	3301      	adds	r3, #1
 8005218:	81fb      	strh	r3, [r7, #14]
 800521a:	89fa      	ldrh	r2, [r7, #14]
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	429a      	cmp	r2, r3
 8005220:	d3ef      	bcc.n	8005202 <LCD_Draw_Horizontal_Line+0x24>
	 }
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}

0800522c <LCD_DrawGrid>:

//void LCD_Draw_Square()

void LCD_DrawGrid()
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 8005232:	2100      	movs	r1, #0
 8005234:	2000      	movs	r0, #0
 8005236:	f000 f83f 	bl	80052b8 <LCD_Clear>
	int16_t xpos_inc = 24;
 800523a:	2318      	movs	r3, #24
 800523c:	80fb      	strh	r3, [r7, #6]
	int16_t ypos_inc = 24;
 800523e:	2318      	movs	r3, #24
 8005240:	80bb      	strh	r3, [r7, #4]
	//draw vertical lines
	for(int16_t i =0; i < 9; i++)
 8005242:	2300      	movs	r3, #0
 8005244:	807b      	strh	r3, [r7, #2]
 8005246:	e010      	b.n	800526a <LCD_DrawGrid+0x3e>
	{
		LCD_Draw_Vertical_Line(xpos_inc ,0,240,LCD_COLOR_WHITE);
 8005248:	88f8      	ldrh	r0, [r7, #6]
 800524a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800524e:	22f0      	movs	r2, #240	@ 0xf0
 8005250:	2100      	movs	r1, #0
 8005252:	f7ff ff9d 	bl	8005190 <LCD_Draw_Vertical_Line>
		xpos_inc = xpos_inc + 24;
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	3318      	adds	r3, #24
 800525a:	b29b      	uxth	r3, r3
 800525c:	80fb      	strh	r3, [r7, #6]
	for(int16_t i =0; i < 9; i++)
 800525e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005262:	b29b      	uxth	r3, r3
 8005264:	3301      	adds	r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	807b      	strh	r3, [r7, #2]
 800526a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800526e:	2b08      	cmp	r3, #8
 8005270:	ddea      	ble.n	8005248 <LCD_DrawGrid+0x1c>
	}
	//draw horizontal lines
	for(int16_t i =0; i < 10; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	803b      	strh	r3, [r7, #0]
 8005276:	e010      	b.n	800529a <LCD_DrawGrid+0x6e>
	{
		LCD_Draw_Horizontal_Line(24, ypos_inc, 192, LCD_COLOR_WHITE);
 8005278:	88b9      	ldrh	r1, [r7, #4]
 800527a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800527e:	22c0      	movs	r2, #192	@ 0xc0
 8005280:	2018      	movs	r0, #24
 8005282:	f7ff ffac 	bl	80051de <LCD_Draw_Horizontal_Line>
		ypos_inc = ypos_inc + 24;
 8005286:	88bb      	ldrh	r3, [r7, #4]
 8005288:	3318      	adds	r3, #24
 800528a:	b29b      	uxth	r3, r3
 800528c:	80bb      	strh	r3, [r7, #4]
	for(int16_t i =0; i < 10; i++)
 800528e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005292:	b29b      	uxth	r3, r3
 8005294:	3301      	adds	r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	803b      	strh	r3, [r7, #0]
 800529a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800529e:	2b09      	cmp	r3, #9
 80052a0:	ddea      	ble.n	8005278 <LCD_DrawGrid+0x4c>
	}
	LCD_Draw_Horizontal_Line(0,0,10, LCD_COLOR_RED);
 80052a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80052a6:	220a      	movs	r2, #10
 80052a8:	2100      	movs	r1, #0
 80052aa:	2000      	movs	r0, #0
 80052ac:	f7ff ff97 	bl	80051de <LCD_Draw_Horizontal_Line>
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	460a      	mov	r2, r1
 80052c2:	71fb      	strb	r3, [r7, #7]
 80052c4:	4613      	mov	r3, r2
 80052c6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10e      	bne.n	80052ec <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e007      	b.n	80052e4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80052d4:	4908      	ldr	r1, [pc, #32]	@ (80052f8 <LCD_Clear+0x40>)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88ba      	ldrh	r2, [r7, #4]
 80052da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80052ea:	d3f3      	bcc.n	80052d4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	20000424 	.word	0x20000424

080052fc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8005306:	4a04      	ldr	r2, [pc, #16]	@ (8005318 <LCD_SetTextColor+0x1c>)
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	8013      	strh	r3, [r2, #0]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	20000002 	.word	0x20000002

0800531c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8005324:	4a04      	ldr	r2, [pc, #16]	@ (8005338 <LCD_SetFont+0x1c>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6013      	str	r3, [r2, #0]
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	20000420 	.word	0x20000420

0800533c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	603a      	str	r2, [r7, #0]
 8005346:	80fb      	strh	r3, [r7, #6]
 8005348:	460b      	mov	r3, r1
 800534a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	2300      	movs	r3, #0
 8005352:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e04c      	b.n	80053f4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	e03f      	b.n	80053e0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	4b27      	ldr	r3, [pc, #156]	@ (800540c <LCD_Draw_Char+0xd0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	889b      	ldrh	r3, [r3, #4]
 8005372:	4a27      	ldr	r2, [pc, #156]	@ (8005410 <LCD_Draw_Char+0xd4>)
 8005374:	fba2 2303 	umull	r2, r3, r2, r3
 8005378:	08db      	lsrs	r3, r3, #3
 800537a:	b29b      	uxth	r3, r3
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	2280      	movs	r2, #128	@ 0x80
 8005380:	409a      	lsls	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	fa42 f303 	asr.w	r3, r2, r3
 8005388:	400b      	ands	r3, r1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <LCD_Draw_Char+0x5c>
 800538e:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <LCD_Draw_Char+0xd0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	889b      	ldrh	r3, [r3, #4]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d920      	bls.n	80053da <LCD_Draw_Char+0x9e>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	fa42 f303 	asr.w	r3, r2, r3
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <LCD_Draw_Char+0x80>
 80053b2:	4b16      	ldr	r3, [pc, #88]	@ (800540c <LCD_Draw_Char+0xd0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	889b      	ldrh	r3, [r3, #4]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d80e      	bhi.n	80053da <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	4413      	add	r3, r2
 80053c4:	b298      	uxth	r0, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	88bb      	ldrh	r3, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4a10      	ldr	r2, [pc, #64]	@ (8005414 <LCD_Draw_Char+0xd8>)
 80053d2:	8812      	ldrh	r2, [r2, #0]
 80053d4:	4619      	mov	r1, r3
 80053d6:	f7ff febd 	bl	8005154 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3301      	adds	r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <LCD_Draw_Char+0xd0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	889b      	ldrh	r3, [r3, #4]
 80053e6:	461a      	mov	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d3b8      	bcc.n	8005360 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	4b05      	ldr	r3, [pc, #20]	@ (800540c <LCD_Draw_Char+0xd0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d3ab      	bcc.n	800535a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000420 	.word	0x20000420
 8005410:	aaaaaaab 	.word	0xaaaaaaab
 8005414:	20000002 	.word	0x20000002

08005418 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
 8005422:	460b      	mov	r3, r1
 8005424:	80bb      	strh	r3, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	3b20      	subs	r3, #32
 800542e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8005430:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <LCD_DisplayChar+0x40>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	4907      	ldr	r1, [pc, #28]	@ (8005458 <LCD_DisplayChar+0x40>)
 800543a:	6809      	ldr	r1, [r1, #0]
 800543c:	88c9      	ldrh	r1, [r1, #6]
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	441a      	add	r2, r3
 8005446:	88b9      	ldrh	r1, [r7, #4]
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ff76 	bl	800533c <LCD_Draw_Char>
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000420 	.word	0x20000420

0800545c <LCD_StartScreen>:
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void LCD_StartScreen()
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8005460:	211f      	movs	r1, #31
 8005462:	2000      	movs	r0, #0
 8005464:	f7ff ff28 	bl	80052b8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8005468:	2000      	movs	r0, #0
 800546a:	f7ff ff47 	bl	80052fc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800546e:	4811      	ldr	r0, [pc, #68]	@ (80054b4 <LCD_StartScreen+0x58>)
 8005470:	f7ff ff54 	bl	800531c <LCD_SetFont>

	LCD_DisplayChar(85,140,'T');
 8005474:	2254      	movs	r2, #84	@ 0x54
 8005476:	218c      	movs	r1, #140	@ 0x8c
 8005478:	2055      	movs	r0, #85	@ 0x55
 800547a:	f7ff ffcd 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(100,140,'e');
 800547e:	2265      	movs	r2, #101	@ 0x65
 8005480:	218c      	movs	r1, #140	@ 0x8c
 8005482:	2064      	movs	r0, #100	@ 0x64
 8005484:	f7ff ffc8 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(112.5,140,'t');
 8005488:	2274      	movs	r2, #116	@ 0x74
 800548a:	218c      	movs	r1, #140	@ 0x8c
 800548c:	2070      	movs	r0, #112	@ 0x70
 800548e:	f7ff ffc3 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'r');
 8005492:	2272      	movs	r2, #114	@ 0x72
 8005494:	218c      	movs	r1, #140	@ 0x8c
 8005496:	207d      	movs	r0, #125	@ 0x7d
 8005498:	f7ff ffbe 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'i');
 800549c:	2269      	movs	r2, #105	@ 0x69
 800549e:	218c      	movs	r1, #140	@ 0x8c
 80054a0:	2087      	movs	r0, #135	@ 0x87
 80054a2:	f7ff ffb9 	bl	8005418 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'s');
 80054a6:	2273      	movs	r2, #115	@ 0x73
 80054a8:	218c      	movs	r1, #140	@ 0x8c
 80054aa:	2091      	movs	r0, #145	@ 0x91
 80054ac:	f7ff ffb4 	bl	8005418 <LCD_DisplayChar>
}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000004 	.word	0x20000004

080054b8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054bc:	b672      	cpsid	i
}
 80054be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <LCD_Error_Handler+0x8>

080054c4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80054c8:	f000 fe4e 	bl	8006168 <STMPE811_Init>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d001      	beq.n	80054d6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80054d2:	bf00      	nop
 80054d4:	e7fd      	b.n	80054d2 <InitializeLCDTouch+0xe>
  }
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}

080054da <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 ff2a 	bl	800633c <STMPE811_DetermineTouchPosition>
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fefa 	bl	80062f6 <STMPE811_Read>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	460a      	mov	r2, r1
 8005516:	71fb      	strb	r3, [r7, #7]
 8005518:	4613      	mov	r3, r2
 800551a:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 800551c:	79ba      	ldrb	r2, [r7, #6]
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fef8 	bl	8006318 <STMPE811_Write>
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <RNGInit>:
#include <RNG_Driver.h>

static RNG_HandleTypeDef RNG_1 = {0};

void RNGInit()
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <RNGInit+0x38>)
 800553c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553e:	4a0a      	ldr	r2, [pc, #40]	@ (8005568 <RNGInit+0x38>)
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	6353      	str	r3, [r2, #52]	@ 0x34
 8005546:	4b08      	ldr	r3, [pc, #32]	@ (8005568 <RNGInit+0x38>)
 8005548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
	RNG_1.Instance = RNG;
 8005552:	4b06      	ldr	r3, [pc, #24]	@ (800556c <RNGInit+0x3c>)
 8005554:	4a06      	ldr	r2, [pc, #24]	@ (8005570 <RNGInit+0x40>)
 8005556:	601a      	str	r2, [r3, #0]
	HAL_RNG_Init(&RNG_1);
 8005558:	4804      	ldr	r0, [pc, #16]	@ (800556c <RNGInit+0x3c>)
 800555a:	f003 ffcd 	bl	80094f8 <HAL_RNG_Init>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	20025c24 	.word	0x20025c24
 8005570:	50060800 	.word	0x50060800

08005574 <RNG_getVal>:
uint32_t RNG_getVal()
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
	uint32_t block_val = HAL_RNG_GetRandomNumber(&RNG_1);
 800557a:	4804      	ldr	r0, [pc, #16]	@ (800558c <RNG_getVal+0x18>)
 800557c:	f004 f83c 	bl	80095f8 <HAL_RNG_GetRandomNumber>
 8005580:	6078      	str	r0, [r7, #4]
	return block_val;
 8005582:	687b      	ldr	r3, [r7, #4]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20025c24 	.word	0x20025c24

08005590 <addSchedulerEvent>:
#include <Scheduler.h>

static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t event)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event; //sets event bit to 1 (add)
 8005598:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <addSchedulerEvent+0x20>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4313      	orrs	r3, r2
 80055a0:	4a03      	ldr	r2, [pc, #12]	@ (80055b0 <addSchedulerEvent+0x20>)
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20025c34 	.word	0x20025c34

080055b4 <getScheduledEvents>:
{
	scheduledEvents &= ~event; //sets event bit to 0 (erase)
}

uint32_t getScheduledEvents()
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80055b8:	4b03      	ldr	r3, [pc, #12]	@ (80055c8 <getScheduledEvents+0x14>)
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20025c34 	.word	0x20025c34

080055cc <timer_getTime>:
	HAL_TIM_Base_Init(&Timer2);
	__HAL_TIM_ENABLE(&Timer2);
}

uint32_t timer_getTime()
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
	uint32_t time = __HAL_TIM_GET_COUNTER(&Timer2) / 200;
 80055d2:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <timer_getTime+0x24>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	4a06      	ldr	r2, [pc, #24]	@ (80055f4 <timer_getTime+0x28>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	607b      	str	r3, [r7, #4]
	return time;
 80055e2:	687b      	ldr	r3, [r7, #4]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20025c38 	.word	0x20025c38
 80055f4:	51eb851f 	.word	0x51eb851f

080055f8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80055fc:	f000 f9fe 	bl	80059fc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8005600:	20ca      	movs	r0, #202	@ 0xca
 8005602:	f000 f943 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8005606:	20c3      	movs	r0, #195	@ 0xc3
 8005608:	f000 f94d 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800560c:	2008      	movs	r0, #8
 800560e:	f000 f94a 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8005612:	2050      	movs	r0, #80	@ 0x50
 8005614:	f000 f947 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8005618:	20cf      	movs	r0, #207	@ 0xcf
 800561a:	f000 f937 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800561e:	2000      	movs	r0, #0
 8005620:	f000 f941 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8005624:	20c1      	movs	r0, #193	@ 0xc1
 8005626:	f000 f93e 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800562a:	2030      	movs	r0, #48	@ 0x30
 800562c:	f000 f93b 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8005630:	20ed      	movs	r0, #237	@ 0xed
 8005632:	f000 f92b 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8005636:	2064      	movs	r0, #100	@ 0x64
 8005638:	f000 f935 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800563c:	2003      	movs	r0, #3
 800563e:	f000 f932 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8005642:	2012      	movs	r0, #18
 8005644:	f000 f92f 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8005648:	2081      	movs	r0, #129	@ 0x81
 800564a:	f000 f92c 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800564e:	20e8      	movs	r0, #232	@ 0xe8
 8005650:	f000 f91c 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8005654:	2085      	movs	r0, #133	@ 0x85
 8005656:	f000 f926 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800565a:	2000      	movs	r0, #0
 800565c:	f000 f923 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8005660:	2078      	movs	r0, #120	@ 0x78
 8005662:	f000 f920 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8005666:	20cb      	movs	r0, #203	@ 0xcb
 8005668:	f000 f910 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800566c:	2039      	movs	r0, #57	@ 0x39
 800566e:	f000 f91a 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8005672:	202c      	movs	r0, #44	@ 0x2c
 8005674:	f000 f917 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8005678:	2000      	movs	r0, #0
 800567a:	f000 f914 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800567e:	2034      	movs	r0, #52	@ 0x34
 8005680:	f000 f911 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8005684:	2002      	movs	r0, #2
 8005686:	f000 f90e 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800568a:	20f7      	movs	r0, #247	@ 0xf7
 800568c:	f000 f8fe 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8005690:	2020      	movs	r0, #32
 8005692:	f000 f908 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8005696:	20ea      	movs	r0, #234	@ 0xea
 8005698:	f000 f8f8 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800569c:	2000      	movs	r0, #0
 800569e:	f000 f902 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80056a2:	2000      	movs	r0, #0
 80056a4:	f000 f8ff 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80056a8:	20b1      	movs	r0, #177	@ 0xb1
 80056aa:	f000 f8ef 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80056ae:	2000      	movs	r0, #0
 80056b0:	f000 f8f9 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80056b4:	201b      	movs	r0, #27
 80056b6:	f000 f8f6 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80056ba:	20b6      	movs	r0, #182	@ 0xb6
 80056bc:	f000 f8e6 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80056c0:	200a      	movs	r0, #10
 80056c2:	f000 f8f0 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80056c6:	20a2      	movs	r0, #162	@ 0xa2
 80056c8:	f000 f8ed 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80056cc:	20c0      	movs	r0, #192	@ 0xc0
 80056ce:	f000 f8dd 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80056d2:	2010      	movs	r0, #16
 80056d4:	f000 f8e7 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80056d8:	20c1      	movs	r0, #193	@ 0xc1
 80056da:	f000 f8d7 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80056de:	2010      	movs	r0, #16
 80056e0:	f000 f8e1 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80056e4:	20c5      	movs	r0, #197	@ 0xc5
 80056e6:	f000 f8d1 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80056ea:	2045      	movs	r0, #69	@ 0x45
 80056ec:	f000 f8db 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80056f0:	2015      	movs	r0, #21
 80056f2:	f000 f8d8 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80056f6:	20c7      	movs	r0, #199	@ 0xc7
 80056f8:	f000 f8c8 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80056fc:	2090      	movs	r0, #144	@ 0x90
 80056fe:	f000 f8d2 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8005702:	2036      	movs	r0, #54	@ 0x36
 8005704:	f000 f8c2 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8005708:	20c8      	movs	r0, #200	@ 0xc8
 800570a:	f000 f8cc 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800570e:	20f2      	movs	r0, #242	@ 0xf2
 8005710:	f000 f8bc 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8005714:	2000      	movs	r0, #0
 8005716:	f000 f8c6 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800571a:	20b0      	movs	r0, #176	@ 0xb0
 800571c:	f000 f8b6 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8005720:	20c2      	movs	r0, #194	@ 0xc2
 8005722:	f000 f8c0 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8005726:	20b6      	movs	r0, #182	@ 0xb6
 8005728:	f000 f8b0 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800572c:	200a      	movs	r0, #10
 800572e:	f000 f8ba 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8005732:	20a7      	movs	r0, #167	@ 0xa7
 8005734:	f000 f8b7 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8005738:	2027      	movs	r0, #39	@ 0x27
 800573a:	f000 f8b4 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800573e:	2004      	movs	r0, #4
 8005740:	f000 f8b1 	bl	80058a6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8005744:	202a      	movs	r0, #42	@ 0x2a
 8005746:	f000 f8a1 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800574a:	2000      	movs	r0, #0
 800574c:	f000 f8ab 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8005750:	2000      	movs	r0, #0
 8005752:	f000 f8a8 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8005756:	2000      	movs	r0, #0
 8005758:	f000 f8a5 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800575c:	20ef      	movs	r0, #239	@ 0xef
 800575e:	f000 f8a2 	bl	80058a6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8005762:	202b      	movs	r0, #43	@ 0x2b
 8005764:	f000 f892 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8005768:	2000      	movs	r0, #0
 800576a:	f000 f89c 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800576e:	2000      	movs	r0, #0
 8005770:	f000 f899 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8005774:	2001      	movs	r0, #1
 8005776:	f000 f896 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800577a:	203f      	movs	r0, #63	@ 0x3f
 800577c:	f000 f893 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8005780:	20f6      	movs	r0, #246	@ 0xf6
 8005782:	f000 f883 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8005786:	2001      	movs	r0, #1
 8005788:	f000 f88d 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800578c:	2000      	movs	r0, #0
 800578e:	f000 f88a 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8005792:	2006      	movs	r0, #6
 8005794:	f000 f887 	bl	80058a6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8005798:	202c      	movs	r0, #44	@ 0x2c
 800579a:	f000 f877 	bl	800588c <ili9341_Write_Reg>
  LCD_Delay(200);
 800579e:	20c8      	movs	r0, #200	@ 0xc8
 80057a0:	f000 f9e8 	bl	8005b74 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80057a4:	2026      	movs	r0, #38	@ 0x26
 80057a6:	f000 f871 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80057aa:	2001      	movs	r0, #1
 80057ac:	f000 f87b 	bl	80058a6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80057b0:	20e0      	movs	r0, #224	@ 0xe0
 80057b2:	f000 f86b 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80057b6:	200f      	movs	r0, #15
 80057b8:	f000 f875 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80057bc:	2029      	movs	r0, #41	@ 0x29
 80057be:	f000 f872 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80057c2:	2024      	movs	r0, #36	@ 0x24
 80057c4:	f000 f86f 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80057c8:	200c      	movs	r0, #12
 80057ca:	f000 f86c 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80057ce:	200e      	movs	r0, #14
 80057d0:	f000 f869 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80057d4:	2009      	movs	r0, #9
 80057d6:	f000 f866 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80057da:	204e      	movs	r0, #78	@ 0x4e
 80057dc:	f000 f863 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80057e0:	2078      	movs	r0, #120	@ 0x78
 80057e2:	f000 f860 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80057e6:	203c      	movs	r0, #60	@ 0x3c
 80057e8:	f000 f85d 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80057ec:	2009      	movs	r0, #9
 80057ee:	f000 f85a 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80057f2:	2013      	movs	r0, #19
 80057f4:	f000 f857 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80057f8:	2005      	movs	r0, #5
 80057fa:	f000 f854 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80057fe:	2017      	movs	r0, #23
 8005800:	f000 f851 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8005804:	2011      	movs	r0, #17
 8005806:	f000 f84e 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800580a:	2000      	movs	r0, #0
 800580c:	f000 f84b 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8005810:	20e1      	movs	r0, #225	@ 0xe1
 8005812:	f000 f83b 	bl	800588c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8005816:	2000      	movs	r0, #0
 8005818:	f000 f845 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800581c:	2016      	movs	r0, #22
 800581e:	f000 f842 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8005822:	201b      	movs	r0, #27
 8005824:	f000 f83f 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8005828:	2004      	movs	r0, #4
 800582a:	f000 f83c 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800582e:	2011      	movs	r0, #17
 8005830:	f000 f839 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8005834:	2007      	movs	r0, #7
 8005836:	f000 f836 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800583a:	2031      	movs	r0, #49	@ 0x31
 800583c:	f000 f833 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8005840:	2033      	movs	r0, #51	@ 0x33
 8005842:	f000 f830 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8005846:	2042      	movs	r0, #66	@ 0x42
 8005848:	f000 f82d 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800584c:	2005      	movs	r0, #5
 800584e:	f000 f82a 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8005852:	200c      	movs	r0, #12
 8005854:	f000 f827 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8005858:	200a      	movs	r0, #10
 800585a:	f000 f824 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800585e:	2028      	movs	r0, #40	@ 0x28
 8005860:	f000 f821 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8005864:	202f      	movs	r0, #47	@ 0x2f
 8005866:	f000 f81e 	bl	80058a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800586a:	200f      	movs	r0, #15
 800586c:	f000 f81b 	bl	80058a6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8005870:	2011      	movs	r0, #17
 8005872:	f000 f80b 	bl	800588c <ili9341_Write_Reg>
  LCD_Delay(200);
 8005876:	20c8      	movs	r0, #200	@ 0xc8
 8005878:	f000 f97c 	bl	8005b74 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800587c:	2029      	movs	r0, #41	@ 0x29
 800587e:	f000 f805 	bl	800588c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8005882:	202c      	movs	r0, #44	@ 0x2c
 8005884:	f000 f802 	bl	800588c <ili9341_Write_Reg>
}
 8005888:	bf00      	nop
 800588a:	bd80      	pop	{r7, pc}

0800588c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f949 	bl	8005b30 <LCD_IO_WriteReg>
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	4603      	mov	r3, r0
 80058ae:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f91a 	bl	8005aec <LCD_IO_WriteData>
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80058c4:	4819      	ldr	r0, [pc, #100]	@ (800592c <SPI_Init+0x6c>)
 80058c6:	f004 f8a1 	bl	8009a0c <HAL_SPI_GetState>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d12b      	bne.n	8005928 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80058d0:	4b16      	ldr	r3, [pc, #88]	@ (800592c <SPI_Init+0x6c>)
 80058d2:	4a17      	ldr	r2, [pc, #92]	@ (8005930 <SPI_Init+0x70>)
 80058d4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <SPI_Init+0x6c>)
 80058d8:	2218      	movs	r2, #24
 80058da:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80058dc:	4b13      	ldr	r3, [pc, #76]	@ (800592c <SPI_Init+0x6c>)
 80058de:	2200      	movs	r2, #0
 80058e0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80058e2:	4b12      	ldr	r3, [pc, #72]	@ (800592c <SPI_Init+0x6c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80058e8:	4b10      	ldr	r3, [pc, #64]	@ (800592c <SPI_Init+0x6c>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80058ee:	4b0f      	ldr	r3, [pc, #60]	@ (800592c <SPI_Init+0x6c>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80058f4:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <SPI_Init+0x6c>)
 80058f6:	2207      	movs	r2, #7
 80058f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <SPI_Init+0x6c>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8005900:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <SPI_Init+0x6c>)
 8005902:	2200      	movs	r2, #0
 8005904:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8005906:	4b09      	ldr	r3, [pc, #36]	@ (800592c <SPI_Init+0x6c>)
 8005908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800590c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800590e:	4b07      	ldr	r3, [pc, #28]	@ (800592c <SPI_Init+0x6c>)
 8005910:	2200      	movs	r2, #0
 8005912:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <SPI_Init+0x6c>)
 8005916:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800591a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800591c:	4803      	ldr	r0, [pc, #12]	@ (800592c <SPI_Init+0x6c>)
 800591e:	f000 f833 	bl	8005988 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8005922:	4802      	ldr	r0, [pc, #8]	@ (800592c <SPI_Init+0x6c>)
 8005924:	f003 fe7d 	bl	8009622 <HAL_SPI_Init>
  }
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20025c80 	.word	0x20025c80
 8005930:	40015000 	.word	0x40015000

08005934 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	4603      	mov	r3, r0
 800593c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8005942:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <SPI_Write+0x34>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1db9      	adds	r1, r7, #6
 8005948:	2201      	movs	r2, #1
 800594a:	4808      	ldr	r0, [pc, #32]	@ (800596c <SPI_Write+0x38>)
 800594c:	f003 ff1a 	bl	8009784 <HAL_SPI_Transmit>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800595a:	f000 f809 	bl	8005970 <SPI_Error>
  }
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	2000000c 	.word	0x2000000c
 800596c:	20025c80 	.word	0x20025c80

08005970 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8005974:	4803      	ldr	r0, [pc, #12]	@ (8005984 <SPI_Error+0x14>)
 8005976:	f003 fedd 	bl	8009734 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800597a:	f7ff ffa1 	bl	80058c0 <SPI_Init>
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20025c80 	.word	0x20025c80

08005988 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	@ 0x28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	4b17      	ldr	r3, [pc, #92]	@ (80059f4 <SPI_MspInit+0x6c>)
 8005996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005998:	4a16      	ldr	r2, [pc, #88]	@ (80059f4 <SPI_MspInit+0x6c>)
 800599a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800599e:	6453      	str	r3, [r2, #68]	@ 0x44
 80059a0:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <SPI_MspInit+0x6c>)
 80059a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	4b10      	ldr	r3, [pc, #64]	@ (80059f4 <SPI_MspInit+0x6c>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	4a0f      	ldr	r2, [pc, #60]	@ (80059f4 <SPI_MspInit+0x6c>)
 80059b6:	f043 0320 	orr.w	r3, r3, #32
 80059ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80059bc:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <SPI_MspInit+0x6c>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80059c8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80059cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80059ce:	2302      	movs	r3, #2
 80059d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80059d2:	2302      	movs	r3, #2
 80059d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80059d6:	2301      	movs	r3, #1
 80059d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80059da:	2305      	movs	r3, #5
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80059de:	f107 0314 	add.w	r3, r7, #20
 80059e2:	4619      	mov	r1, r3
 80059e4:	4804      	ldr	r0, [pc, #16]	@ (80059f8 <SPI_MspInit+0x70>)
 80059e6:	f001 f9a7 	bl	8006d38 <HAL_GPIO_Init>
}
 80059ea:	bf00      	nop
 80059ec:	3728      	adds	r7, #40	@ 0x28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40021400 	.word	0x40021400

080059fc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8005a02:	4b36      	ldr	r3, [pc, #216]	@ (8005adc <LCD_IO_Init+0xe0>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d164      	bne.n	8005ad4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8005a0a:	4b34      	ldr	r3, [pc, #208]	@ (8005adc <LCD_IO_Init+0xe0>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8005a10:	2300      	movs	r3, #0
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	4b32      	ldr	r3, [pc, #200]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	4a31      	ldr	r2, [pc, #196]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a1a:	f043 0308 	orr.w	r3, r3, #8
 8005a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a20:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8005a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005a32:	2301      	movs	r3, #1
 8005a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4619      	mov	r1, r3
 8005a44:	4827      	ldr	r0, [pc, #156]	@ (8005ae4 <LCD_IO_Init+0xe8>)
 8005a46:	f001 f977 	bl	8006d38 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	4b24      	ldr	r3, [pc, #144]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	4a23      	ldr	r2, [pc, #140]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a54:	f043 0308 	orr.w	r3, r3, #8
 8005a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a5a:	4b21      	ldr	r3, [pc, #132]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8005a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005a74:	2302      	movs	r3, #2
 8005a76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4819      	ldr	r0, [pc, #100]	@ (8005ae4 <LCD_IO_Init+0xe8>)
 8005a80:	f001 f95a 	bl	8006d38 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4b15      	ldr	r3, [pc, #84]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a8e:	f043 0304 	orr.w	r3, r3, #4
 8005a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a94:	4b12      	ldr	r3, [pc, #72]	@ (8005ae0 <LCD_IO_Init+0xe4>)
 8005a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005aac:	2302      	movs	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	480c      	ldr	r0, [pc, #48]	@ (8005ae8 <LCD_IO_Init+0xec>)
 8005ab8:	f001 f93e 	bl	8006d38 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8005abc:	2200      	movs	r2, #0
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4809      	ldr	r0, [pc, #36]	@ (8005ae8 <LCD_IO_Init+0xec>)
 8005ac2:	f001 fbf1 	bl	80072a8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2104      	movs	r1, #4
 8005aca:	4807      	ldr	r0, [pc, #28]	@ (8005ae8 <LCD_IO_Init+0xec>)
 8005acc:	f001 fbec 	bl	80072a8 <HAL_GPIO_WritePin>

    SPI_Init();
 8005ad0:	f7ff fef6 	bl	80058c0 <SPI_Init>
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20025cd8 	.word	0x20025cd8
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40020c00 	.word	0x40020c00
 8005ae8:	40020800 	.word	0x40020800

08005aec <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8005af6:	2201      	movs	r2, #1
 8005af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005afc:	480a      	ldr	r0, [pc, #40]	@ (8005b28 <LCD_IO_WriteData+0x3c>)
 8005afe:	f001 fbd3 	bl	80072a8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8005b02:	2200      	movs	r2, #0
 8005b04:	2104      	movs	r1, #4
 8005b06:	4809      	ldr	r0, [pc, #36]	@ (8005b2c <LCD_IO_WriteData+0x40>)
 8005b08:	f001 fbce 	bl	80072a8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff10 	bl	8005934 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005b14:	2201      	movs	r2, #1
 8005b16:	2104      	movs	r1, #4
 8005b18:	4804      	ldr	r0, [pc, #16]	@ (8005b2c <LCD_IO_WriteData+0x40>)
 8005b1a:	f001 fbc5 	bl	80072a8 <HAL_GPIO_WritePin>
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40020c00 	.word	0x40020c00
 8005b2c:	40020800 	.word	0x40020800

08005b30 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b40:	480a      	ldr	r0, [pc, #40]	@ (8005b6c <LCD_IO_WriteReg+0x3c>)
 8005b42:	f001 fbb1 	bl	80072a8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8005b46:	2200      	movs	r2, #0
 8005b48:	2104      	movs	r1, #4
 8005b4a:	4809      	ldr	r0, [pc, #36]	@ (8005b70 <LCD_IO_WriteReg+0x40>)
 8005b4c:	f001 fbac 	bl	80072a8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff feed 	bl	8005934 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	4804      	ldr	r0, [pc, #16]	@ (8005b70 <LCD_IO_WriteReg+0x40>)
 8005b60:	f001 fba2 	bl	80072a8 <HAL_GPIO_WritePin>
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40020c00 	.word	0x40020c00
 8005b70:	40020800 	.word	0x40020800

08005b74 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 ff2f 	bl	80069e0 <HAL_Delay>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8005b90:	f000 feb4 	bl	80068fc <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8005b94:	f000 f812 	bl	8005bbc <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8005b98:	f7fa fd42 	bl	8000620 <ApplicationInit>

  LCD_StartScreen();
 8005b9c:	f7ff fc5e 	bl	800545c <LCD_StartScreen>
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  for(;;)
  {
	  uint32_t eventsToRun = getScheduledEvents();
 8005ba0:	f7ff fd08 	bl	80055b4 <getScheduledEvents>
 8005ba4:	6078      	str	r0, [r7, #4]
	  if(eventsToRun & START_GAME)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f7      	beq.n	8005ba0 <main+0x16>
	  {
		  LCD_DrawGrid();
 8005bb0:	f7ff fb3c 	bl	800522c <LCD_DrawGrid>
		  gameRun();
 8005bb4:	f7fa fd2e 	bl	8000614 <gameRun>
  {
 8005bb8:	e7f2      	b.n	8005ba0 <main+0x16>
	...

08005bbc <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b092      	sub	sp, #72	@ 0x48
 8005bc0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c38 <SystemClockOverride+0x7c>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <SystemClockOverride+0x7c>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bd2:	4b19      	ldr	r3, [pc, #100]	@ (8005c38 <SystemClockOverride+0x7c>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005be2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005be6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005be8:	2302      	movs	r3, #2
 8005bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005bec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005bf6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005c00:	2307      	movs	r3, #7
 8005c02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f002 fe32 	bl	8008870 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005c0c:	230f      	movs	r3, #15
 8005c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c10:	2302      	movs	r3, #2
 8005c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c14:	2300      	movs	r3, #0
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c22:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005c24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005c28:	2105      	movs	r1, #5
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f003 f898 	bl	8008d60 <HAL_RCC_ClockConfig>
}
 8005c30:	bf00      	nop
 8005c32:	3748      	adds	r7, #72	@ 0x48
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40023800 	.word	0x40023800

08005c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005c40:	b672      	cpsid	i
}
 8005c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <Error_Handler+0x8>

08005c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <HAL_MspInit+0x4c>)
 8005c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c56:	4a0f      	ldr	r2, [pc, #60]	@ (8005c94 <HAL_MspInit+0x4c>)
 8005c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c94 <HAL_MspInit+0x4c>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <HAL_MspInit+0x4c>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	4a08      	ldr	r2, [pc, #32]	@ (8005c94 <HAL_MspInit+0x4c>)
 8005c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c7a:	4b06      	ldr	r3, [pc, #24]	@ (8005c94 <HAL_MspInit+0x4c>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005c86:	2007      	movs	r0, #7
 8005c88:	f000 ffe0 	bl	8006c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800

08005c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a29      	ldr	r2, [pc, #164]	@ (8005d5c <HAL_I2C_MspInit+0xc4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d14b      	bne.n	8005d52 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	4b28      	ldr	r3, [pc, #160]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	4a27      	ldr	r2, [pc, #156]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005cc4:	f043 0304 	orr.w	r3, r3, #4
 8005cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cca:	4b25      	ldr	r3, [pc, #148]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	4b21      	ldr	r3, [pc, #132]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cde:	4a20      	ldr	r2, [pc, #128]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8005cf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cf8:	2312      	movs	r3, #18
 8005cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d00:	2300      	movs	r3, #0
 8005d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005d04:	2304      	movs	r3, #4
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4815      	ldr	r0, [pc, #84]	@ (8005d64 <HAL_I2C_MspInit+0xcc>)
 8005d10:	f001 f812 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8005d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d1a:	2312      	movs	r3, #18
 8005d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d22:	2300      	movs	r3, #0
 8005d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005d26:	2304      	movs	r3, #4
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8005d2a:	f107 0314 	add.w	r3, r7, #20
 8005d2e:	4619      	mov	r1, r3
 8005d30:	480d      	ldr	r0, [pc, #52]	@ (8005d68 <HAL_I2C_MspInit+0xd0>)
 8005d32:	f001 f801 	bl	8006d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	4a08      	ldr	r2, [pc, #32]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <HAL_I2C_MspInit+0xc8>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8005d52:	bf00      	nop
 8005d54:	3728      	adds	r7, #40	@ 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40005c00 	.word	0x40005c00
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40020800 	.word	0x40020800
 8005d68:	40020000 	.word	0x40020000

08005d6c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b09a      	sub	sp, #104	@ 0x68
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d88:	2230      	movs	r2, #48	@ 0x30
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fc23 	bl	800a5d8 <memset>
  if(hltdc->Instance==LTDC)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a81      	ldr	r2, [pc, #516]	@ (8005f9c <HAL_LTDC_MspInit+0x230>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	f040 80fa 	bne.w	8005f92 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005d9e:	2308      	movs	r3, #8
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8005da2:	2332      	movs	r3, #50	@ 0x32
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005da6:	2302      	movs	r3, #2
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005daa:	2300      	movs	r3, #0
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005db2:	4618      	mov	r0, r3
 8005db4:	f003 f9e0 	bl	8009178 <HAL_RCCEx_PeriphCLKConfig>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8005dbe:	f7ff ff3d 	bl	8005c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	4b76      	ldr	r3, [pc, #472]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	4a75      	ldr	r2, [pc, #468]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005dcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dd2:	4b73      	ldr	r3, [pc, #460]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	4b6f      	ldr	r3, [pc, #444]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	4a6e      	ldr	r2, [pc, #440]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005de8:	f043 0320 	orr.w	r3, r3, #32
 8005dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dee:	4b6c      	ldr	r3, [pc, #432]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	4b68      	ldr	r3, [pc, #416]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	4a67      	ldr	r2, [pc, #412]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e0a:	4b65      	ldr	r3, [pc, #404]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	4b61      	ldr	r3, [pc, #388]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	4a60      	ldr	r2, [pc, #384]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e26:	4b5e      	ldr	r3, [pc, #376]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	4b5a      	ldr	r3, [pc, #360]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	4a59      	ldr	r2, [pc, #356]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e42:	4b57      	ldr	r3, [pc, #348]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	4b53      	ldr	r3, [pc, #332]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	4a52      	ldr	r2, [pc, #328]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e58:	f043 0304 	orr.w	r3, r3, #4
 8005e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e5e:	4b50      	ldr	r3, [pc, #320]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	4a4b      	ldr	r2, [pc, #300]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e74:	f043 0308 	orr.w	r3, r3, #8
 8005e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e7a:	4b49      	ldr	r3, [pc, #292]	@ (8005fa0 <HAL_LTDC_MspInit+0x234>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	60bb      	str	r3, [r7, #8]
 8005e84:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8005e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e94:	2300      	movs	r3, #0
 8005e96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005e98:	230e      	movs	r3, #14
 8005e9a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8005e9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4840      	ldr	r0, [pc, #256]	@ (8005fa4 <HAL_LTDC_MspInit+0x238>)
 8005ea4:	f000 ff48 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8005ea8:	f641 0358 	movw	r3, #6232	@ 0x1858
 8005eac:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005eba:	230e      	movs	r3, #14
 8005ebc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ebe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4838      	ldr	r0, [pc, #224]	@ (8005fa8 <HAL_LTDC_MspInit+0x23c>)
 8005ec6:	f000 ff37 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005eda:	2309      	movs	r3, #9
 8005edc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ede:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4831      	ldr	r0, [pc, #196]	@ (8005fac <HAL_LTDC_MspInit+0x240>)
 8005ee6:	f000 ff27 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8005eea:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8005eee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005efc:	230e      	movs	r3, #14
 8005efe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f04:	4619      	mov	r1, r3
 8005f06:	4829      	ldr	r0, [pc, #164]	@ (8005fac <HAL_LTDC_MspInit+0x240>)
 8005f08:	f000 ff16 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8005f0c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8005f10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f12:	2302      	movs	r3, #2
 8005f14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f1e:	230e      	movs	r3, #14
 8005f20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f26:	4619      	mov	r1, r3
 8005f28:	4821      	ldr	r0, [pc, #132]	@ (8005fb0 <HAL_LTDC_MspInit+0x244>)
 8005f2a:	f000 ff05 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8005f2e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8005f32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f34:	2302      	movs	r3, #2
 8005f36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f40:	230e      	movs	r3, #14
 8005f42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f48:	4619      	mov	r1, r3
 8005f4a:	481a      	ldr	r0, [pc, #104]	@ (8005fb4 <HAL_LTDC_MspInit+0x248>)
 8005f4c:	f000 fef4 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8005f50:	2348      	movs	r3, #72	@ 0x48
 8005f52:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f54:	2302      	movs	r3, #2
 8005f56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f60:	230e      	movs	r3, #14
 8005f62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4813      	ldr	r0, [pc, #76]	@ (8005fb8 <HAL_LTDC_MspInit+0x24c>)
 8005f6c:	f000 fee4 	bl	8006d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8005f70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005f74:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f76:	2302      	movs	r3, #2
 8005f78:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005f82:	2309      	movs	r3, #9
 8005f84:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4808      	ldr	r0, [pc, #32]	@ (8005fb0 <HAL_LTDC_MspInit+0x244>)
 8005f8e:	f000 fed3 	bl	8006d38 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8005f92:	bf00      	nop
 8005f94:	3768      	adds	r7, #104	@ 0x68
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40016800 	.word	0x40016800
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	40021400 	.word	0x40021400
 8005fa8:	40020000 	.word	0x40020000
 8005fac:	40020400 	.word	0x40020400
 8005fb0:	40021800 	.word	0x40021800
 8005fb4:	40020800 	.word	0x40020800
 8005fb8:	40020c00 	.word	0x40020c00

08005fbc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ff8 <HAL_RNG_MspInit+0x3c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <HAL_RNG_MspInit+0x40>)
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd6:	4a09      	ldr	r2, [pc, #36]	@ (8005ffc <HAL_RNG_MspInit+0x40>)
 8005fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fdc:	6353      	str	r3, [r2, #52]	@ 0x34
 8005fde:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <HAL_RNG_MspInit+0x40>)
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	50060800 	.word	0x50060800
 8005ffc:	40023800 	.word	0x40023800

08006000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	@ 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	@ (8006084 <HAL_SPI_MspInit+0x84>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d12c      	bne.n	800607c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	4b18      	ldr	r3, [pc, #96]	@ (8006088 <HAL_SPI_MspInit+0x88>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	4a17      	ldr	r2, [pc, #92]	@ (8006088 <HAL_SPI_MspInit+0x88>)
 800602c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006030:	6453      	str	r3, [r2, #68]	@ 0x44
 8006032:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <HAL_SPI_MspInit+0x88>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	4b11      	ldr	r3, [pc, #68]	@ (8006088 <HAL_SPI_MspInit+0x88>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	4a10      	ldr	r2, [pc, #64]	@ (8006088 <HAL_SPI_MspInit+0x88>)
 8006048:	f043 0320 	orr.w	r3, r3, #32
 800604c:	6313      	str	r3, [r2, #48]	@ 0x30
 800604e:	4b0e      	ldr	r3, [pc, #56]	@ (8006088 <HAL_SPI_MspInit+0x88>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800605a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800605e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	2302      	movs	r3, #2
 8006062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006068:	2300      	movs	r3, #0
 800606a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800606c:	2305      	movs	r3, #5
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	4619      	mov	r1, r3
 8006076:	4805      	ldr	r0, [pc, #20]	@ (800608c <HAL_SPI_MspInit+0x8c>)
 8006078:	f000 fe5e 	bl	8006d38 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800607c:	bf00      	nop
 800607e:	3728      	adds	r7, #40	@ 0x28
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40015000 	.word	0x40015000
 8006088:	40023800 	.word	0x40023800
 800608c:	40021400 	.word	0x40021400

08006090 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <HAL_SPI_MspDeInit+0x30>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10a      	bne.n	80060b8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80060a2:	4b08      	ldr	r3, [pc, #32]	@ (80060c4 <HAL_SPI_MspDeInit+0x34>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	4a07      	ldr	r2, [pc, #28]	@ (80060c4 <HAL_SPI_MspDeInit+0x34>)
 80060a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80060ac:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80060ae:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80060b2:	4805      	ldr	r0, [pc, #20]	@ (80060c8 <HAL_SPI_MspDeInit+0x38>)
 80060b4:	f000 ffec 	bl	8007090 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40015000 	.word	0x40015000
 80060c4:	40023800 	.word	0x40023800
 80060c8:	40021400 	.word	0x40021400

080060cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <NMI_Handler+0x4>

080060d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <HardFault_Handler+0x4>

080060dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <MemManage_Handler+0x4>

080060e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <BusFault_Handler+0x4>

080060ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <UsageFault_Handler+0x4>

080060f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006122:	f000 fc3d 	bl	80069a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006126:	bf00      	nop
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <__NVIC_EnableIRQ>:
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613a:	2b00      	cmp	r3, #0
 800613c:	db0b      	blt.n	8006156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	f003 021f 	and.w	r2, r3, #31
 8006144:	4907      	ldr	r1, [pc, #28]	@ (8006164 <__NVIC_EnableIRQ+0x38>)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2001      	movs	r0, #1
 800614e:	fa00 f202 	lsl.w	r2, r0, r2
 8006152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	e000e100 	.word	0xe000e100

08006168 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800616e:	f000 f9dd 	bl	800652c <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8006172:	f000 f99d 	bl	80064b0 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8006176:	2202      	movs	r2, #2
 8006178:	2103      	movs	r1, #3
 800617a:	2082      	movs	r0, #130	@ 0x82
 800617c:	f000 fa2a 	bl	80065d4 <I2C3_Write>
    HAL_Delay(5);
 8006180:	2005      	movs	r0, #5
 8006182:	f000 fc2d 	bl	80069e0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8006186:	2200      	movs	r2, #0
 8006188:	2103      	movs	r1, #3
 800618a:	2082      	movs	r0, #130	@ 0x82
 800618c:	f000 fa22 	bl	80065d4 <I2C3_Write>
    HAL_Delay(2);
 8006190:	2002      	movs	r0, #2
 8006192:	f000 fc25 	bl	80069e0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8006196:	1cba      	adds	r2, r7, #2
 8006198:	2302      	movs	r3, #2
 800619a:	2100      	movs	r1, #0
 800619c:	2082      	movs	r0, #130	@ 0x82
 800619e:	f000 fa69 	bl	8006674 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80061a2:	887b      	ldrh	r3, [r7, #2]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	0a1b      	lsrs	r3, r3, #8
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	f640 0211 	movw	r2, #2065	@ 0x811
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d001      	beq.n	80061c2 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80061be:	2303      	movs	r3, #3
 80061c0:	e095      	b.n	80062ee <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80061c2:	2202      	movs	r2, #2
 80061c4:	2103      	movs	r1, #3
 80061c6:	2082      	movs	r0, #130	@ 0x82
 80061c8:	f000 fa04 	bl	80065d4 <I2C3_Write>
    HAL_Delay(5);
 80061cc:	2005      	movs	r0, #5
 80061ce:	f000 fc07 	bl	80069e0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80061d2:	2200      	movs	r2, #0
 80061d4:	2103      	movs	r1, #3
 80061d6:	2082      	movs	r0, #130	@ 0x82
 80061d8:	f000 f9fc 	bl	80065d4 <I2C3_Write>
    HAL_Delay(2);
 80061dc:	2002      	movs	r0, #2
 80061de:	f000 fbff 	bl	80069e0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80061e2:	2004      	movs	r0, #4
 80061e4:	f000 f887 	bl	80062f6 <STMPE811_Read>
 80061e8:	4603      	mov	r3, r0
 80061ea:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80061ec:	797b      	ldrb	r3, [r7, #5]
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80061f4:	797b      	ldrb	r3, [r7, #5]
 80061f6:	461a      	mov	r2, r3
 80061f8:	2104      	movs	r1, #4
 80061fa:	2082      	movs	r0, #130	@ 0x82
 80061fc:	f000 f9ea 	bl	80065d4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8006200:	2004      	movs	r0, #4
 8006202:	f000 f878 	bl	80062f6 <STMPE811_Read>
 8006206:	4603      	mov	r3, r0
 8006208:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800620a:	797b      	ldrb	r3, [r7, #5]
 800620c:	f023 0302 	bic.w	r3, r3, #2
 8006210:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8006212:	797b      	ldrb	r3, [r7, #5]
 8006214:	461a      	mov	r2, r3
 8006216:	2104      	movs	r1, #4
 8006218:	2082      	movs	r0, #130	@ 0x82
 800621a:	f000 f9db 	bl	80065d4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 800621e:	2249      	movs	r2, #73	@ 0x49
 8006220:	2120      	movs	r1, #32
 8006222:	2082      	movs	r0, #130	@ 0x82
 8006224:	f000 f9d6 	bl	80065d4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8006228:	2002      	movs	r0, #2
 800622a:	f000 fbd9 	bl	80069e0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 800622e:	2201      	movs	r2, #1
 8006230:	2121      	movs	r1, #33	@ 0x21
 8006232:	2082      	movs	r0, #130	@ 0x82
 8006234:	f000 f9ce 	bl	80065d4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8006238:	2017      	movs	r0, #23
 800623a:	f000 f85c 	bl	80062f6 <STMPE811_Read>
 800623e:	4603      	mov	r3, r0
 8006240:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8006242:	797b      	ldrb	r3, [r7, #5]
 8006244:	f043 031e 	orr.w	r3, r3, #30
 8006248:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800624a:	797b      	ldrb	r3, [r7, #5]
 800624c:	461a      	mov	r2, r3
 800624e:	2117      	movs	r1, #23
 8006250:	2082      	movs	r0, #130	@ 0x82
 8006252:	f000 f9bf 	bl	80065d4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8006256:	229a      	movs	r2, #154	@ 0x9a
 8006258:	2141      	movs	r1, #65	@ 0x41
 800625a:	2082      	movs	r0, #130	@ 0x82
 800625c:	f000 f9ba 	bl	80065d4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8006260:	2201      	movs	r2, #1
 8006262:	214a      	movs	r1, #74	@ 0x4a
 8006264:	2082      	movs	r0, #130	@ 0x82
 8006266:	f000 f9b5 	bl	80065d4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800626a:	2201      	movs	r2, #1
 800626c:	214b      	movs	r1, #75	@ 0x4b
 800626e:	2082      	movs	r0, #130	@ 0x82
 8006270:	f000 f9b0 	bl	80065d4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8006274:	2200      	movs	r2, #0
 8006276:	214b      	movs	r1, #75	@ 0x4b
 8006278:	2082      	movs	r0, #130	@ 0x82
 800627a:	f000 f9ab 	bl	80065d4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800627e:	2201      	movs	r2, #1
 8006280:	2156      	movs	r1, #86	@ 0x56
 8006282:	2082      	movs	r0, #130	@ 0x82
 8006284:	f000 f9a6 	bl	80065d4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8006288:	2201      	movs	r2, #1
 800628a:	2158      	movs	r1, #88	@ 0x58
 800628c:	2082      	movs	r0, #130	@ 0x82
 800628e:	f000 f9a1 	bl	80065d4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8006292:	2203      	movs	r2, #3
 8006294:	2140      	movs	r1, #64	@ 0x40
 8006296:	2082      	movs	r0, #130	@ 0x82
 8006298:	f000 f99c 	bl	80065d4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800629c:	22ff      	movs	r2, #255	@ 0xff
 800629e:	210b      	movs	r1, #11
 80062a0:	2082      	movs	r0, #130	@ 0x82
 80062a2:	f000 f997 	bl	80065d4 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80062a6:	f000 f8c1 	bl	800642c <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80062aa:	2009      	movs	r0, #9
 80062ac:	f000 f823 	bl	80062f6 <STMPE811_Read>
 80062b0:	4603      	mov	r3, r0
 80062b2:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80062b4:	797b      	ldrb	r3, [r7, #5]
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80062bc:	797b      	ldrb	r3, [r7, #5]
 80062be:	461a      	mov	r2, r3
 80062c0:	2109      	movs	r1, #9
 80062c2:	2082      	movs	r0, #130	@ 0x82
 80062c4:	f000 f986 	bl	80065d4 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80062c8:	200a      	movs	r0, #10
 80062ca:	f000 f814 	bl	80062f6 <STMPE811_Read>
 80062ce:	4603      	mov	r3, r0
 80062d0:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80062d2:	797b      	ldrb	r3, [r7, #5]
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80062da:	797b      	ldrb	r3, [r7, #5]
 80062dc:	461a      	mov	r2, r3
 80062de:	210a      	movs	r1, #10
 80062e0:	2082      	movs	r0, #130	@ 0x82
 80062e2:	f000 f977 	bl	80065d4 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80062e6:	20c8      	movs	r0, #200	@ 0xc8
 80062e8:	f000 fb7a 	bl	80069e0 <HAL_Delay>

    return STMPE811_State_Ok;
 80062ec:	2302      	movs	r3, #2

}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	4603      	mov	r3, r0
 80062fe:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8006300:	f107 020f 	add.w	r2, r7, #15
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	4619      	mov	r1, r3
 8006308:	2082      	movs	r0, #130	@ 0x82
 800630a:	f000 f98d 	bl	8006628 <I2C3_Read>

    return readData;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	460a      	mov	r2, r1
 8006322:	71fb      	strb	r3, [r7, #7]
 8006324:	4613      	mov	r3, r2
 8006326:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8006328:	79ba      	ldrb	r2, [r7, #6]
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	4619      	mov	r1, r3
 800632e:	2082      	movs	r0, #130	@ 0x82
 8006330:	f000 f950 	bl	80065d4 <I2C3_Write>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	799b      	ldrb	r3, [r3, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d117      	bne.n	800637c <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f9b1 	bl	80066b8 <TM_STMPE811_ReadX>
 8006356:	4603      	mov	r3, r0
 8006358:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800635c:	b29a      	uxth	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	885b      	ldrh	r3, [r3, #2]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fa04 	bl	8006774 <TM_STMPE811_ReadY>
 800636c:	4603      	mov	r3, r0
 800636e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8006372:	3301      	adds	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	805a      	strh	r2, [r3, #2]
 800637a:	e048      	b.n	800640e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	799b      	ldrb	r3, [r3, #6]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d112      	bne.n	80063aa <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f995 	bl	80066b8 <TM_STMPE811_ReadX>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	885b      	ldrh	r3, [r3, #2]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f9ea 	bl	8006774 <TM_STMPE811_ReadY>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	805a      	strh	r2, [r3, #2]
 80063a8:	e031      	b.n	800640e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	799b      	ldrb	r3, [r3, #6]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d115      	bne.n	80063de <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	885b      	ldrh	r3, [r3, #2]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f97e 	bl	80066b8 <TM_STMPE811_ReadX>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f9d3 	bl	8006774 <TM_STMPE811_ReadY>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80063d4:	3301      	adds	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e017      	b.n	800640e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	799b      	ldrb	r3, [r3, #6]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d113      	bne.n	800640e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f964 	bl	80066b8 <TM_STMPE811_ReadX>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 f9b7 	bl	8006774 <TM_STMPE811_ReadY>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800640e:	2201      	movs	r2, #1
 8006410:	214b      	movs	r1, #75	@ 0x4b
 8006412:	2082      	movs	r0, #130	@ 0x82
 8006414:	f000 f8de 	bl	80065d4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8006418:	2200      	movs	r2, #0
 800641a:	214b      	movs	r1, #75	@ 0x4b
 800641c:	2082      	movs	r0, #130	@ 0x82
 800641e:	f000 f8d9 	bl	80065d4 <I2C3_Write>
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4b14      	ldr	r3, [pc, #80]	@ (8006488 <enableInterruptSupportForTouch+0x5c>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643a:	4a13      	ldr	r2, [pc, #76]	@ (8006488 <enableInterruptSupportForTouch+0x5c>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6313      	str	r3, [r2, #48]	@ 0x30
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <enableInterruptSupportForTouch+0x5c>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800645c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006460:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006462:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006466:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800646c:	2302      	movs	r3, #2
 800646e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4805      	ldr	r0, [pc, #20]	@ (800648c <enableInterruptSupportForTouch+0x60>)
 8006476:	f000 fc5f 	bl	8006d38 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800647a:	2028      	movs	r0, #40	@ 0x28
 800647c:	f7ff fe56 	bl	800612c <__NVIC_EnableIRQ>

}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40023800 	.word	0x40023800
 800648c:	40020000 	.word	0x40020000

08006490 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8006494:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <verifyHAL_I2C_IS_OKAY+0x1c>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20025d30 	.word	0x20025d30

080064b0 <I2C3_Init>:

static void I2C3_Init()
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80064b6:	2300      	movs	r3, #0
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	4b18      	ldr	r3, [pc, #96]	@ (800651c <I2C3_Init+0x6c>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	4a17      	ldr	r2, [pc, #92]	@ (800651c <I2C3_Init+0x6c>)
 80064c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80064c6:	4b15      	ldr	r3, [pc, #84]	@ (800651c <I2C3_Init+0x6c>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80064d2:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <I2C3_Init+0x70>)
 80064d4:	4a13      	ldr	r2, [pc, #76]	@ (8006524 <I2C3_Init+0x74>)
 80064d6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80064d8:	4b11      	ldr	r3, [pc, #68]	@ (8006520 <I2C3_Init+0x70>)
 80064da:	4a13      	ldr	r2, [pc, #76]	@ (8006528 <I2C3_Init+0x78>)
 80064dc:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80064de:	4b10      	ldr	r3, [pc, #64]	@ (8006520 <I2C3_Init+0x70>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80064e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006520 <I2C3_Init+0x70>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <I2C3_Init+0x70>)
 80064ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80064f0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80064f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <I2C3_Init+0x70>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064f8:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <I2C3_Init+0x70>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80064fe:	4808      	ldr	r0, [pc, #32]	@ (8006520 <I2C3_Init+0x70>)
 8006500:	f000 feec 	bl	80072dc <HAL_I2C_Init>
 8006504:	4603      	mov	r3, r0
 8006506:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <I2C3_Init+0x5e>
    }
    return;
 8006512:	bf00      	nop
}
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800
 8006520:	20025cdc 	.word	0x20025cdc
 8006524:	40005c00 	.word	0x40005c00
 8006528:	000186a0 	.word	0x000186a0

0800652c <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006532:	f107 030c 	add.w	r3, r7, #12
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	605a      	str	r2, [r3, #4]
 800653c:	609a      	str	r2, [r3, #8]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	4b20      	ldr	r3, [pc, #128]	@ (80065c8 <I2C3_MspInit+0x9c>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654a:	4a1f      	ldr	r2, [pc, #124]	@ (80065c8 <I2C3_MspInit+0x9c>)
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	6313      	str	r3, [r2, #48]	@ 0x30
 8006552:	4b1d      	ldr	r3, [pc, #116]	@ (80065c8 <I2C3_MspInit+0x9c>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	60bb      	str	r3, [r7, #8]
 800655c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	607b      	str	r3, [r7, #4]
 8006562:	4b19      	ldr	r3, [pc, #100]	@ (80065c8 <I2C3_MspInit+0x9c>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	4a18      	ldr	r2, [pc, #96]	@ (80065c8 <I2C3_MspInit+0x9c>)
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6313      	str	r3, [r2, #48]	@ 0x30
 800656e:	4b16      	ldr	r3, [pc, #88]	@ (80065c8 <I2C3_MspInit+0x9c>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800657a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800657e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006580:	2312      	movs	r3, #18
 8006582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800658c:	2304      	movs	r3, #4
 800658e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	4619      	mov	r1, r3
 8006596:	480d      	ldr	r0, [pc, #52]	@ (80065cc <I2C3_MspInit+0xa0>)
 8006598:	f000 fbce 	bl	8006d38 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800659c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065a2:	2312      	movs	r3, #18
 80065a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80065ae:	2304      	movs	r3, #4
 80065b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	4619      	mov	r1, r3
 80065b8:	4805      	ldr	r0, [pc, #20]	@ (80065d0 <I2C3_MspInit+0xa4>)
 80065ba:	f000 fbbd 	bl	8006d38 <HAL_GPIO_Init>
    
}
 80065be:	bf00      	nop
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800
 80065cc:	40020800 	.word	0x40020800
 80065d0:	40020000 	.word	0x40020000

080065d4 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af04      	add	r7, sp, #16
 80065da:	4603      	mov	r3, r0
 80065dc:	80fb      	strh	r3, [r7, #6]
 80065de:	460b      	mov	r3, r1
 80065e0:	717b      	strb	r3, [r7, #5]
 80065e2:	4613      	mov	r3, r2
 80065e4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80065e6:	793b      	ldrb	r3, [r7, #4]
 80065e8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80065ea:	797b      	ldrb	r3, [r7, #5]
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	88f9      	ldrh	r1, [r7, #6]
 80065f0:	4b0a      	ldr	r3, [pc, #40]	@ (800661c <I2C3_Write+0x48>)
 80065f2:	9302      	str	r3, [sp, #8]
 80065f4:	2301      	movs	r3, #1
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	f107 030f 	add.w	r3, r7, #15
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	2301      	movs	r3, #1
 8006600:	4807      	ldr	r0, [pc, #28]	@ (8006620 <I2C3_Write+0x4c>)
 8006602:	f000 ffaf 	bl	8007564 <HAL_I2C_Mem_Write>
 8006606:	4603      	mov	r3, r0
 8006608:	461a      	mov	r2, r3
 800660a:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <I2C3_Write+0x50>)
 800660c:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800660e:	f7ff ff3f 	bl	8006490 <verifyHAL_I2C_IS_OKAY>
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	0003d090 	.word	0x0003d090
 8006620:	20025cdc 	.word	0x20025cdc
 8006624:	20025d30 	.word	0x20025d30

08006628 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af04      	add	r7, sp, #16
 800662e:	4603      	mov	r3, r0
 8006630:	603a      	str	r2, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
 8006634:	460b      	mov	r3, r1
 8006636:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	b299      	uxth	r1, r3
 800663c:	79bb      	ldrb	r3, [r7, #6]
 800663e:	b29a      	uxth	r2, r3
 8006640:	4b09      	ldr	r3, [pc, #36]	@ (8006668 <I2C3_Read+0x40>)
 8006642:	9302      	str	r3, [sp, #8]
 8006644:	2301      	movs	r3, #1
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	2301      	movs	r3, #1
 800664e:	4807      	ldr	r0, [pc, #28]	@ (800666c <I2C3_Read+0x44>)
 8006650:	f001 f882 	bl	8007758 <HAL_I2C_Mem_Read>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <I2C3_Read+0x48>)
 800665a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800665c:	f7ff ff18 	bl	8006490 <verifyHAL_I2C_IS_OKAY>
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	0003d090 	.word	0x0003d090
 800666c:	20025cdc 	.word	0x20025cdc
 8006670:	20025d30 	.word	0x20025d30

08006674 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af04      	add	r7, sp, #16
 800667a:	603a      	str	r2, [r7, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	4603      	mov	r3, r0
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	460b      	mov	r3, r1
 8006684:	71bb      	strb	r3, [r7, #6]
 8006686:	4613      	mov	r3, r2
 8006688:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	b299      	uxth	r1, r3
 800668e:	79bb      	ldrb	r3, [r7, #6]
 8006690:	b29a      	uxth	r2, r3
 8006692:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <I2C3_MulitByteRead+0x3c>)
 8006694:	9302      	str	r3, [sp, #8]
 8006696:	88bb      	ldrh	r3, [r7, #4]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	2301      	movs	r3, #1
 80066a0:	4804      	ldr	r0, [pc, #16]	@ (80066b4 <I2C3_MulitByteRead+0x40>)
 80066a2:	f001 f859 	bl	8007758 <HAL_I2C_Mem_Read>
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	0003d090 	.word	0x0003d090
 80066b4:	20025cdc 	.word	0x20025cdc

080066b8 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80066c2:	204d      	movs	r0, #77	@ 0x4d
 80066c4:	f7ff fe17 	bl	80062f6 <STMPE811_Read>
 80066c8:	4603      	mov	r3, r0
 80066ca:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80066cc:	204e      	movs	r0, #78	@ 0x4e
 80066ce:	f7ff fe12 	bl	80062f6 <STMPE811_Read>
 80066d2:	4603      	mov	r3, r0
 80066d4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80066d6:	7a7b      	ldrb	r3, [r7, #9]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	b21a      	sxth	r2, r3
 80066dc:	7a3b      	ldrb	r3, [r7, #8]
 80066de:	b21b      	sxth	r3, r3
 80066e0:	4313      	orrs	r3, r2
 80066e2:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80066e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80066ec:	4293      	cmp	r3, r2
 80066ee:	dc06      	bgt.n	80066fe <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80066f6:	330c      	adds	r3, #12
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	81fb      	strh	r3, [r7, #14]
 80066fc:	e005      	b.n	800670a <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8006704:	3308      	adds	r3, #8
 8006706:	b29b      	uxth	r3, r3
 8006708:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800670a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800670e:	4a18      	ldr	r2, [pc, #96]	@ (8006770 <TM_STMPE811_ReadX+0xb8>)
 8006710:	fb82 1203 	smull	r1, r2, r2, r3
 8006714:	441a      	add	r2, r3
 8006716:	10d2      	asrs	r2, r2, #3
 8006718:	17db      	asrs	r3, r3, #31
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800671e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006722:	2bef      	cmp	r3, #239	@ 0xef
 8006724:	dd02      	ble.n	800672c <TM_STMPE811_ReadX+0x74>
        val = 239;
 8006726:	23ef      	movs	r3, #239	@ 0xef
 8006728:	81fb      	strh	r3, [r7, #14]
 800672a:	e005      	b.n	8006738 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 800672c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	da01      	bge.n	8006738 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8006738:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	429a      	cmp	r2, r3
 8006740:	dd05      	ble.n	800674e <TM_STMPE811_ReadX+0x96>
 8006742:	89fa      	ldrh	r2, [r7, #14]
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	b29b      	uxth	r3, r3
 800674a:	b21b      	sxth	r3, r3
 800674c:	e004      	b.n	8006758 <TM_STMPE811_ReadX+0xa0>
 800674e:	89fb      	ldrh	r3, [r7, #14]
 8006750:	88fa      	ldrh	r2, [r7, #6]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	b21b      	sxth	r3, r3
 8006758:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800675a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800675e:	2b04      	cmp	r3, #4
 8006760:	dd01      	ble.n	8006766 <TM_STMPE811_ReadX+0xae>
        return val;
 8006762:	89fb      	ldrh	r3, [r7, #14]
 8006764:	e000      	b.n	8006768 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8006766:	88fb      	ldrh	r3, [r7, #6]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	88888889 	.word	0x88888889

08006774 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800677e:	204f      	movs	r0, #79	@ 0x4f
 8006780:	f7ff fdb9 	bl	80062f6 <STMPE811_Read>
 8006784:	4603      	mov	r3, r0
 8006786:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8006788:	2050      	movs	r0, #80	@ 0x50
 800678a:	f7ff fdb4 	bl	80062f6 <STMPE811_Read>
 800678e:	4603      	mov	r3, r0
 8006790:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8006792:	7a7b      	ldrb	r3, [r7, #9]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	b21a      	sxth	r2, r3
 8006798:	7a3b      	ldrb	r3, [r7, #8]
 800679a:	b21b      	sxth	r3, r3
 800679c:	4313      	orrs	r3, r2
 800679e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80067a0:	89fb      	ldrh	r3, [r7, #14]
 80067a2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80067aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067ae:	4a19      	ldr	r2, [pc, #100]	@ (8006814 <TM_STMPE811_ReadY+0xa0>)
 80067b0:	fb82 1203 	smull	r1, r2, r2, r3
 80067b4:	1052      	asrs	r2, r2, #1
 80067b6:	17db      	asrs	r3, r3, #31
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80067bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dc02      	bgt.n	80067ca <TM_STMPE811_ReadY+0x56>
        val = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	81fb      	strh	r3, [r7, #14]
 80067c8:	e007      	b.n	80067da <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80067ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80067d2:	db02      	blt.n	80067da <TM_STMPE811_ReadY+0x66>
        val = 319;
 80067d4:	f240 133f 	movw	r3, #319	@ 0x13f
 80067d8:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80067da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	dd05      	ble.n	80067f0 <TM_STMPE811_ReadY+0x7c>
 80067e4:	89fa      	ldrh	r2, [r7, #14]
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	e004      	b.n	80067fa <TM_STMPE811_ReadY+0x86>
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80067fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006800:	2b04      	cmp	r3, #4
 8006802:	dd01      	ble.n	8006808 <TM_STMPE811_ReadY+0x94>
        return val;
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	e000      	b.n	800680a <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8006808:	88fb      	ldrh	r3, [r7, #6]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2e8ba2e9 	.word	0x2e8ba2e9

08006818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006820:	4a14      	ldr	r2, [pc, #80]	@ (8006874 <_sbrk+0x5c>)
 8006822:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <_sbrk+0x60>)
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800682c:	4b13      	ldr	r3, [pc, #76]	@ (800687c <_sbrk+0x64>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006834:	4b11      	ldr	r3, [pc, #68]	@ (800687c <_sbrk+0x64>)
 8006836:	4a12      	ldr	r2, [pc, #72]	@ (8006880 <_sbrk+0x68>)
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800683a:	4b10      	ldr	r3, [pc, #64]	@ (800687c <_sbrk+0x64>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	429a      	cmp	r2, r3
 8006846:	d207      	bcs.n	8006858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006848:	f003 ff14 	bl	800a674 <__errno>
 800684c:	4603      	mov	r3, r0
 800684e:	220c      	movs	r2, #12
 8006850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	e009      	b.n	800686c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006858:	4b08      	ldr	r3, [pc, #32]	@ (800687c <_sbrk+0x64>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800685e:	4b07      	ldr	r3, [pc, #28]	@ (800687c <_sbrk+0x64>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4413      	add	r3, r2
 8006866:	4a05      	ldr	r2, [pc, #20]	@ (800687c <_sbrk+0x64>)
 8006868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20030000 	.word	0x20030000
 8006878:	00000400 	.word	0x00000400
 800687c:	20025d34 	.word	0x20025d34
 8006880:	20025f38 	.word	0x20025f38

08006884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <SystemInit+0x20>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688e:	4a05      	ldr	r2, [pc, #20]	@ (80068a4 <SystemInit+0x20>)
 8006890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	e000ed00 	.word	0xe000ed00

080068a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80068a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80068ac:	f7ff ffea 	bl	8006884 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068b0:	480c      	ldr	r0, [pc, #48]	@ (80068e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068b2:	490d      	ldr	r1, [pc, #52]	@ (80068e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068b4:	4a0d      	ldr	r2, [pc, #52]	@ (80068ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068b8:	e002      	b.n	80068c0 <LoopCopyDataInit>

080068ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068be:	3304      	adds	r3, #4

080068c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068c4:	d3f9      	bcc.n	80068ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068c6:	4a0a      	ldr	r2, [pc, #40]	@ (80068f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068c8:	4c0a      	ldr	r4, [pc, #40]	@ (80068f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80068ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068cc:	e001      	b.n	80068d2 <LoopFillZerobss>

080068ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068d0:	3204      	adds	r2, #4

080068d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068d4:	d3fb      	bcc.n	80068ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80068d6:	f003 fed3 	bl	800a680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068da:	f7ff f956 	bl	8005b8a <main>
  bx  lr    
 80068de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80068e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80068e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068e8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80068ec:	0800c3b8 	.word	0x0800c3b8
  ldr r2, =_sbss
 80068f0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80068f4:	20025f34 	.word	0x20025f34

080068f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068f8:	e7fe      	b.n	80068f8 <ADC_IRQHandler>
	...

080068fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006900:	4b0e      	ldr	r3, [pc, #56]	@ (800693c <HAL_Init+0x40>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a0d      	ldr	r2, [pc, #52]	@ (800693c <HAL_Init+0x40>)
 8006906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800690a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800690c:	4b0b      	ldr	r3, [pc, #44]	@ (800693c <HAL_Init+0x40>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0a      	ldr	r2, [pc, #40]	@ (800693c <HAL_Init+0x40>)
 8006912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006918:	4b08      	ldr	r3, [pc, #32]	@ (800693c <HAL_Init+0x40>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a07      	ldr	r2, [pc, #28]	@ (800693c <HAL_Init+0x40>)
 800691e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006924:	2003      	movs	r0, #3
 8006926:	f000 f991 	bl	8006c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800692a:	2000      	movs	r0, #0
 800692c:	f000 f808 	bl	8006940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006930:	f7ff f98a 	bl	8005c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40023c00 	.word	0x40023c00

08006940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006948:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <HAL_InitTick+0x54>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <HAL_InitTick+0x58>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006956:	fbb3 f3f1 	udiv	r3, r3, r1
 800695a:	fbb2 f3f3 	udiv	r3, r2, r3
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f9b7 	bl	8006cd2 <HAL_SYSTICK_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e00e      	b.n	800698c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b0f      	cmp	r3, #15
 8006972:	d80a      	bhi.n	800698a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006974:	2200      	movs	r2, #0
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	f000 f971 	bl	8006c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006980:	4a06      	ldr	r2, [pc, #24]	@ (800699c <HAL_InitTick+0x5c>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	e000      	b.n	800698c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000010 	.word	0x20000010
 8006998:	20000018 	.word	0x20000018
 800699c:	20000014 	.word	0x20000014

080069a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069a4:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_IncTick+0x20>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <HAL_IncTick+0x24>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	4a04      	ldr	r2, [pc, #16]	@ (80069c4 <HAL_IncTick+0x24>)
 80069b2:	6013      	str	r3, [r2, #0]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	20000018 	.word	0x20000018
 80069c4:	20025d38 	.word	0x20025d38

080069c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return uwTick;
 80069cc:	4b03      	ldr	r3, [pc, #12]	@ (80069dc <HAL_GetTick+0x14>)
 80069ce:	681b      	ldr	r3, [r3, #0]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20025d38 	.word	0x20025d38

080069e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069e8:	f7ff ffee 	bl	80069c8 <HAL_GetTick>
 80069ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d005      	beq.n	8006a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006a24 <HAL_Delay+0x44>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a06:	bf00      	nop
 8006a08:	f7ff ffde 	bl	80069c8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d8f7      	bhi.n	8006a08 <HAL_Delay+0x28>
  {
  }
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000018 	.word	0x20000018

08006a28 <__NVIC_SetPriorityGrouping>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a38:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <__NVIC_SetPriorityGrouping+0x44>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a44:	4013      	ands	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a5a:	4a04      	ldr	r2, [pc, #16]	@ (8006a6c <__NVIC_SetPriorityGrouping+0x44>)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	60d3      	str	r3, [r2, #12]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	e000ed00 	.word	0xe000ed00

08006a70 <__NVIC_GetPriorityGrouping>:
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a74:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <__NVIC_GetPriorityGrouping+0x18>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	0a1b      	lsrs	r3, r3, #8
 8006a7a:	f003 0307 	and.w	r3, r3, #7
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	e000ed00 	.word	0xe000ed00

08006a8c <__NVIC_EnableIRQ>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db0b      	blt.n	8006ab6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	f003 021f 	and.w	r2, r3, #31
 8006aa4:	4907      	ldr	r1, [pc, #28]	@ (8006ac4 <__NVIC_EnableIRQ+0x38>)
 8006aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2001      	movs	r0, #1
 8006aae:	fa00 f202 	lsl.w	r2, r0, r2
 8006ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	e000e100 	.word	0xe000e100

08006ac8 <__NVIC_DisableIRQ>:
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	db12      	blt.n	8006b00 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	f003 021f 	and.w	r2, r3, #31
 8006ae0:	490a      	ldr	r1, [pc, #40]	@ (8006b0c <__NVIC_DisableIRQ+0x44>)
 8006ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2001      	movs	r0, #1
 8006aea:	fa00 f202 	lsl.w	r2, r0, r2
 8006aee:	3320      	adds	r3, #32
 8006af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006af4:	f3bf 8f4f 	dsb	sy
}
 8006af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006afa:	f3bf 8f6f 	isb	sy
}
 8006afe:	bf00      	nop
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	e000e100 	.word	0xe000e100

08006b10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	db0c      	blt.n	8006b3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	f003 021f 	and.w	r2, r3, #31
 8006b28:	4907      	ldr	r1, [pc, #28]	@ (8006b48 <__NVIC_ClearPendingIRQ+0x38>)
 8006b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	2001      	movs	r0, #1
 8006b32:	fa00 f202 	lsl.w	r2, r0, r2
 8006b36:	3360      	adds	r3, #96	@ 0x60
 8006b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	e000e100 	.word	0xe000e100

08006b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db0a      	blt.n	8006b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	490c      	ldr	r1, [pc, #48]	@ (8006b98 <__NVIC_SetPriority+0x4c>)
 8006b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6a:	0112      	lsls	r2, r2, #4
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	440b      	add	r3, r1
 8006b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b74:	e00a      	b.n	8006b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	4908      	ldr	r1, [pc, #32]	@ (8006b9c <__NVIC_SetPriority+0x50>)
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	3b04      	subs	r3, #4
 8006b84:	0112      	lsls	r2, r2, #4
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	440b      	add	r3, r1
 8006b8a:	761a      	strb	r2, [r3, #24]
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	e000e100 	.word	0xe000e100
 8006b9c:	e000ed00 	.word	0xe000ed00

08006ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	@ 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f1c3 0307 	rsb	r3, r3, #7
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	bf28      	it	cs
 8006bbe:	2304      	movcs	r3, #4
 8006bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	2b06      	cmp	r3, #6
 8006bc8:	d902      	bls.n	8006bd0 <NVIC_EncodePriority+0x30>
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3b03      	subs	r3, #3
 8006bce:	e000      	b.n	8006bd2 <NVIC_EncodePriority+0x32>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43da      	mvns	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	401a      	ands	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006be8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf2:	43d9      	mvns	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf8:	4313      	orrs	r3, r2
         );
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3724      	adds	r7, #36	@ 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c18:	d301      	bcc.n	8006c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e00f      	b.n	8006c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c48 <SysTick_Config+0x40>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c26:	210f      	movs	r1, #15
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	f7ff ff8e 	bl	8006b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c30:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <SysTick_Config+0x40>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c36:	4b04      	ldr	r3, [pc, #16]	@ (8006c48 <SysTick_Config+0x40>)
 8006c38:	2207      	movs	r2, #7
 8006c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	e000e010 	.word	0xe000e010

08006c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff fee7 	bl	8006a28 <__NVIC_SetPriorityGrouping>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b086      	sub	sp, #24
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	4603      	mov	r3, r0
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c74:	f7ff fefc 	bl	8006a70 <__NVIC_GetPriorityGrouping>
 8006c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	6978      	ldr	r0, [r7, #20]
 8006c80:	f7ff ff8e 	bl	8006ba0 <NVIC_EncodePriority>
 8006c84:	4602      	mov	r2, r0
 8006c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff ff5d 	bl	8006b4c <__NVIC_SetPriority>
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff feef 	bl	8006a8c <__NVIC_EnableIRQ>
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff feff 	bl	8006ac8 <__NVIC_DisableIRQ>
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff ff94 	bl	8006c08 <SysTick_Config>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff ff09 	bl	8006b10 <__NVIC_ClearPendingIRQ>
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8006d22:	4a04      	ldr	r2, [pc, #16]	@ (8006d34 <HAL_EXTI_ClearPending+0x2c>)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6153      	str	r3, [r2, #20]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40013c00 	.word	0x40013c00

08006d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b089      	sub	sp, #36	@ 0x24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	e177      	b.n	8007044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d54:	2201      	movs	r2, #1
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4013      	ands	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	f040 8166 	bne.w	800703e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d005      	beq.n	8006d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d130      	bne.n	8006dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	2203      	movs	r2, #3
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	091b      	lsrs	r3, r3, #4
 8006dd6:	f003 0201 	and.w	r2, r3, #1
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d017      	beq.n	8006e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	2203      	movs	r2, #3
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 0303 	and.w	r3, r3, #3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d123      	bne.n	8006e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	08da      	lsrs	r2, r3, #3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3208      	adds	r2, #8
 8006e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	220f      	movs	r2, #15
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	43db      	mvns	r3, r3
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4013      	ands	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	08da      	lsrs	r2, r3, #3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3208      	adds	r2, #8
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	2203      	movs	r2, #3
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	4013      	ands	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 0203 	and.w	r2, r3, #3
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80c0 	beq.w	800703e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	4b66      	ldr	r3, [pc, #408]	@ (800705c <HAL_GPIO_Init+0x324>)
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec6:	4a65      	ldr	r2, [pc, #404]	@ (800705c <HAL_GPIO_Init+0x324>)
 8006ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ece:	4b63      	ldr	r3, [pc, #396]	@ (800705c <HAL_GPIO_Init+0x324>)
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006eda:	4a61      	ldr	r2, [pc, #388]	@ (8007060 <HAL_GPIO_Init+0x328>)
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	089b      	lsrs	r3, r3, #2
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	220f      	movs	r2, #15
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a58      	ldr	r2, [pc, #352]	@ (8007064 <HAL_GPIO_Init+0x32c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d037      	beq.n	8006f76 <HAL_GPIO_Init+0x23e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a57      	ldr	r2, [pc, #348]	@ (8007068 <HAL_GPIO_Init+0x330>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d031      	beq.n	8006f72 <HAL_GPIO_Init+0x23a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a56      	ldr	r2, [pc, #344]	@ (800706c <HAL_GPIO_Init+0x334>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d02b      	beq.n	8006f6e <HAL_GPIO_Init+0x236>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a55      	ldr	r2, [pc, #340]	@ (8007070 <HAL_GPIO_Init+0x338>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d025      	beq.n	8006f6a <HAL_GPIO_Init+0x232>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a54      	ldr	r2, [pc, #336]	@ (8007074 <HAL_GPIO_Init+0x33c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d01f      	beq.n	8006f66 <HAL_GPIO_Init+0x22e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a53      	ldr	r2, [pc, #332]	@ (8007078 <HAL_GPIO_Init+0x340>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d019      	beq.n	8006f62 <HAL_GPIO_Init+0x22a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a52      	ldr	r2, [pc, #328]	@ (800707c <HAL_GPIO_Init+0x344>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_GPIO_Init+0x226>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a51      	ldr	r2, [pc, #324]	@ (8007080 <HAL_GPIO_Init+0x348>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00d      	beq.n	8006f5a <HAL_GPIO_Init+0x222>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a50      	ldr	r2, [pc, #320]	@ (8007084 <HAL_GPIO_Init+0x34c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d007      	beq.n	8006f56 <HAL_GPIO_Init+0x21e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a4f      	ldr	r2, [pc, #316]	@ (8007088 <HAL_GPIO_Init+0x350>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d101      	bne.n	8006f52 <HAL_GPIO_Init+0x21a>
 8006f4e:	2309      	movs	r3, #9
 8006f50:	e012      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f52:	230a      	movs	r3, #10
 8006f54:	e010      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f56:	2308      	movs	r3, #8
 8006f58:	e00e      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	e00c      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f5e:	2306      	movs	r3, #6
 8006f60:	e00a      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f62:	2305      	movs	r3, #5
 8006f64:	e008      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f66:	2304      	movs	r3, #4
 8006f68:	e006      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e004      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e002      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <HAL_GPIO_Init+0x240>
 8006f76:	2300      	movs	r3, #0
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	f002 0203 	and.w	r2, r2, #3
 8006f7e:	0092      	lsls	r2, r2, #2
 8006f80:	4093      	lsls	r3, r2
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f88:	4935      	ldr	r1, [pc, #212]	@ (8007060 <HAL_GPIO_Init+0x328>)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	089b      	lsrs	r3, r3, #2
 8006f8e:	3302      	adds	r3, #2
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f96:	4b3d      	ldr	r3, [pc, #244]	@ (800708c <HAL_GPIO_Init+0x354>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006fba:	4a34      	ldr	r2, [pc, #208]	@ (800708c <HAL_GPIO_Init+0x354>)
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006fc0:	4b32      	ldr	r3, [pc, #200]	@ (800708c <HAL_GPIO_Init+0x354>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006fe4:	4a29      	ldr	r2, [pc, #164]	@ (800708c <HAL_GPIO_Init+0x354>)
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006fea:	4b28      	ldr	r3, [pc, #160]	@ (800708c <HAL_GPIO_Init+0x354>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800700e:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <HAL_GPIO_Init+0x354>)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007014:	4b1d      	ldr	r3, [pc, #116]	@ (800708c <HAL_GPIO_Init+0x354>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	43db      	mvns	r3, r3
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4013      	ands	r3, r2
 8007022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007038:	4a14      	ldr	r2, [pc, #80]	@ (800708c <HAL_GPIO_Init+0x354>)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3301      	adds	r3, #1
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	f67f ae84 	bls.w	8006d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	3724      	adds	r7, #36	@ 0x24
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40023800 	.word	0x40023800
 8007060:	40013800 	.word	0x40013800
 8007064:	40020000 	.word	0x40020000
 8007068:	40020400 	.word	0x40020400
 800706c:	40020800 	.word	0x40020800
 8007070:	40020c00 	.word	0x40020c00
 8007074:	40021000 	.word	0x40021000
 8007078:	40021400 	.word	0x40021400
 800707c:	40021800 	.word	0x40021800
 8007080:	40021c00 	.word	0x40021c00
 8007084:	40022000 	.word	0x40022000
 8007088:	40022400 	.word	0x40022400
 800708c:	40013c00 	.word	0x40013c00

08007090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	e0d9      	b.n	8007260 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070ac:	2201      	movs	r2, #1
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4013      	ands	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	f040 80c9 	bne.w	800725a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80070c8:	4a6b      	ldr	r2, [pc, #428]	@ (8007278 <HAL_GPIO_DeInit+0x1e8>)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	089b      	lsrs	r3, r3, #2
 80070ce:	3302      	adds	r3, #2
 80070d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	220f      	movs	r2, #15
 80070e0:	fa02 f303 	lsl.w	r3, r2, r3
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	4013      	ands	r3, r2
 80070e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a63      	ldr	r2, [pc, #396]	@ (800727c <HAL_GPIO_DeInit+0x1ec>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d037      	beq.n	8007162 <HAL_GPIO_DeInit+0xd2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a62      	ldr	r2, [pc, #392]	@ (8007280 <HAL_GPIO_DeInit+0x1f0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d031      	beq.n	800715e <HAL_GPIO_DeInit+0xce>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a61      	ldr	r2, [pc, #388]	@ (8007284 <HAL_GPIO_DeInit+0x1f4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d02b      	beq.n	800715a <HAL_GPIO_DeInit+0xca>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a60      	ldr	r2, [pc, #384]	@ (8007288 <HAL_GPIO_DeInit+0x1f8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d025      	beq.n	8007156 <HAL_GPIO_DeInit+0xc6>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a5f      	ldr	r2, [pc, #380]	@ (800728c <HAL_GPIO_DeInit+0x1fc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d01f      	beq.n	8007152 <HAL_GPIO_DeInit+0xc2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a5e      	ldr	r2, [pc, #376]	@ (8007290 <HAL_GPIO_DeInit+0x200>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d019      	beq.n	800714e <HAL_GPIO_DeInit+0xbe>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a5d      	ldr	r2, [pc, #372]	@ (8007294 <HAL_GPIO_DeInit+0x204>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <HAL_GPIO_DeInit+0xba>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a5c      	ldr	r2, [pc, #368]	@ (8007298 <HAL_GPIO_DeInit+0x208>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00d      	beq.n	8007146 <HAL_GPIO_DeInit+0xb6>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a5b      	ldr	r2, [pc, #364]	@ (800729c <HAL_GPIO_DeInit+0x20c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <HAL_GPIO_DeInit+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a5a      	ldr	r2, [pc, #360]	@ (80072a0 <HAL_GPIO_DeInit+0x210>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_GPIO_DeInit+0xae>
 800713a:	2309      	movs	r3, #9
 800713c:	e012      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 800713e:	230a      	movs	r3, #10
 8007140:	e010      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 8007142:	2308      	movs	r3, #8
 8007144:	e00e      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 8007146:	2307      	movs	r3, #7
 8007148:	e00c      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 800714a:	2306      	movs	r3, #6
 800714c:	e00a      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 800714e:	2305      	movs	r3, #5
 8007150:	e008      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 8007152:	2304      	movs	r3, #4
 8007154:	e006      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 8007156:	2303      	movs	r3, #3
 8007158:	e004      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 800715a:	2302      	movs	r3, #2
 800715c:	e002      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <HAL_GPIO_DeInit+0xd4>
 8007162:	2300      	movs	r3, #0
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	f002 0203 	and.w	r2, r2, #3
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	4093      	lsls	r3, r2
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d132      	bne.n	80071da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007174:	4b4b      	ldr	r3, [pc, #300]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	43db      	mvns	r3, r3
 800717c:	4949      	ldr	r1, [pc, #292]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 800717e:	4013      	ands	r3, r2
 8007180:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007182:	4b48      	ldr	r3, [pc, #288]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	43db      	mvns	r3, r3
 800718a:	4946      	ldr	r1, [pc, #280]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 800718c:	4013      	ands	r3, r2
 800718e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007190:	4b44      	ldr	r3, [pc, #272]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	43db      	mvns	r3, r3
 8007198:	4942      	ldr	r1, [pc, #264]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 800719a:	4013      	ands	r3, r2
 800719c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800719e:	4b41      	ldr	r3, [pc, #260]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	493f      	ldr	r1, [pc, #252]	@ (80072a4 <HAL_GPIO_DeInit+0x214>)
 80071a8:	4013      	ands	r3, r2
 80071aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	220f      	movs	r2, #15
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80071bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007278 <HAL_GPIO_DeInit+0x1e8>)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	089b      	lsrs	r3, r3, #2
 80071c2:	3302      	adds	r3, #2
 80071c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	43da      	mvns	r2, r3
 80071cc:	482a      	ldr	r0, [pc, #168]	@ (8007278 <HAL_GPIO_DeInit+0x1e8>)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	089b      	lsrs	r3, r3, #2
 80071d2:	400a      	ands	r2, r1
 80071d4:	3302      	adds	r3, #2
 80071d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	2103      	movs	r1, #3
 80071e4:	fa01 f303 	lsl.w	r3, r1, r3
 80071e8:	43db      	mvns	r3, r3
 80071ea:	401a      	ands	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	08da      	lsrs	r2, r3, #3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3208      	adds	r2, #8
 80071f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	220f      	movs	r2, #15
 8007206:	fa02 f303 	lsl.w	r3, r2, r3
 800720a:	43db      	mvns	r3, r3
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	08d2      	lsrs	r2, r2, #3
 8007210:	4019      	ands	r1, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3208      	adds	r2, #8
 8007216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	2103      	movs	r1, #3
 8007224:	fa01 f303 	lsl.w	r3, r1, r3
 8007228:	43db      	mvns	r3, r3
 800722a:	401a      	ands	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	2101      	movs	r1, #1
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	43db      	mvns	r3, r3
 800723e:	401a      	ands	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	2103      	movs	r1, #3
 800724e:	fa01 f303 	lsl.w	r3, r1, r3
 8007252:	43db      	mvns	r3, r3
 8007254:	401a      	ands	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	3301      	adds	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b0f      	cmp	r3, #15
 8007264:	f67f af22 	bls.w	80070ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40013800 	.word	0x40013800
 800727c:	40020000 	.word	0x40020000
 8007280:	40020400 	.word	0x40020400
 8007284:	40020800 	.word	0x40020800
 8007288:	40020c00 	.word	0x40020c00
 800728c:	40021000 	.word	0x40021000
 8007290:	40021400 	.word	0x40021400
 8007294:	40021800 	.word	0x40021800
 8007298:	40021c00 	.word	0x40021c00
 800729c:	40022000 	.word	0x40022000
 80072a0:	40022400 	.word	0x40022400
 80072a4:	40013c00 	.word	0x40013c00

080072a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	807b      	strh	r3, [r7, #2]
 80072b4:	4613      	mov	r3, r2
 80072b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072b8:	787b      	ldrb	r3, [r7, #1]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072be:	887a      	ldrh	r2, [r7, #2]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80072c4:	e003      	b.n	80072ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80072c6:	887b      	ldrh	r3, [r7, #2]
 80072c8:	041a      	lsls	r2, r3, #16
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	619a      	str	r2, [r3, #24]
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e12b      	b.n	8007546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fe fcc8 	bl	8005c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2224      	movs	r2, #36	@ 0x24
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800732e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800733e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007340:	f001 ff06 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
 8007344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	4a81      	ldr	r2, [pc, #516]	@ (8007550 <HAL_I2C_Init+0x274>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d807      	bhi.n	8007360 <HAL_I2C_Init+0x84>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a80      	ldr	r2, [pc, #512]	@ (8007554 <HAL_I2C_Init+0x278>)
 8007354:	4293      	cmp	r3, r2
 8007356:	bf94      	ite	ls
 8007358:	2301      	movls	r3, #1
 800735a:	2300      	movhi	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	e006      	b.n	800736e <HAL_I2C_Init+0x92>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a7d      	ldr	r2, [pc, #500]	@ (8007558 <HAL_I2C_Init+0x27c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	bf94      	ite	ls
 8007368:	2301      	movls	r3, #1
 800736a:	2300      	movhi	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e0e7      	b.n	8007546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a78      	ldr	r2, [pc, #480]	@ (800755c <HAL_I2C_Init+0x280>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	0c9b      	lsrs	r3, r3, #18
 8007380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	430a      	orrs	r2, r1
 8007394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4a6a      	ldr	r2, [pc, #424]	@ (8007550 <HAL_I2C_Init+0x274>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d802      	bhi.n	80073b0 <HAL_I2C_Init+0xd4>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3301      	adds	r3, #1
 80073ae:	e009      	b.n	80073c4 <HAL_I2C_Init+0xe8>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	4a69      	ldr	r2, [pc, #420]	@ (8007560 <HAL_I2C_Init+0x284>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	3301      	adds	r3, #1
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80073d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	495c      	ldr	r1, [pc, #368]	@ (8007550 <HAL_I2C_Init+0x274>)
 80073e0:	428b      	cmp	r3, r1
 80073e2:	d819      	bhi.n	8007418 <HAL_I2C_Init+0x13c>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	1e59      	subs	r1, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80073f2:	1c59      	adds	r1, r3, #1
 80073f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80073f8:	400b      	ands	r3, r1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_I2C_Init+0x138>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1e59      	subs	r1, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	fbb1 f3f3 	udiv	r3, r1, r3
 800740c:	3301      	adds	r3, #1
 800740e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007412:	e051      	b.n	80074b8 <HAL_I2C_Init+0x1dc>
 8007414:	2304      	movs	r3, #4
 8007416:	e04f      	b.n	80074b8 <HAL_I2C_Init+0x1dc>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d111      	bne.n	8007444 <HAL_I2C_Init+0x168>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1e58      	subs	r0, r3, #1
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6859      	ldr	r1, [r3, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	440b      	add	r3, r1
 800742e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007432:	3301      	adds	r3, #1
 8007434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	e012      	b.n	800746a <HAL_I2C_Init+0x18e>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	1e58      	subs	r0, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6859      	ldr	r1, [r3, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	0099      	lsls	r1, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	fbb0 f3f3 	udiv	r3, r0, r3
 800745a:	3301      	adds	r3, #1
 800745c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007460:	2b00      	cmp	r3, #0
 8007462:	bf0c      	ite	eq
 8007464:	2301      	moveq	r3, #1
 8007466:	2300      	movne	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <HAL_I2C_Init+0x196>
 800746e:	2301      	movs	r3, #1
 8007470:	e022      	b.n	80074b8 <HAL_I2C_Init+0x1dc>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10e      	bne.n	8007498 <HAL_I2C_Init+0x1bc>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1e58      	subs	r0, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6859      	ldr	r1, [r3, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	440b      	add	r3, r1
 8007488:	fbb0 f3f3 	udiv	r3, r0, r3
 800748c:	3301      	adds	r3, #1
 800748e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007496:	e00f      	b.n	80074b8 <HAL_I2C_Init+0x1dc>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	1e58      	subs	r0, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6859      	ldr	r1, [r3, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	0099      	lsls	r1, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80074ae:	3301      	adds	r3, #1
 80074b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	6809      	ldr	r1, [r1, #0]
 80074bc:	4313      	orrs	r3, r2
 80074be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69da      	ldr	r2, [r3, #28]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80074e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6911      	ldr	r1, [r2, #16]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68d2      	ldr	r2, [r2, #12]
 80074f2:	4311      	orrs	r1, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	695a      	ldr	r2, [r3, #20]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	000186a0 	.word	0x000186a0
 8007554:	001e847f 	.word	0x001e847f
 8007558:	003d08ff 	.word	0x003d08ff
 800755c:	431bde83 	.word	0x431bde83
 8007560:	10624dd3 	.word	0x10624dd3

08007564 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af02      	add	r7, sp, #8
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	4608      	mov	r0, r1
 800756e:	4611      	mov	r1, r2
 8007570:	461a      	mov	r2, r3
 8007572:	4603      	mov	r3, r0
 8007574:	817b      	strh	r3, [r7, #10]
 8007576:	460b      	mov	r3, r1
 8007578:	813b      	strh	r3, [r7, #8]
 800757a:	4613      	mov	r3, r2
 800757c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800757e:	f7ff fa23 	bl	80069c8 <HAL_GetTick>
 8007582:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b20      	cmp	r3, #32
 800758e:	f040 80d9 	bne.w	8007744 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2319      	movs	r3, #25
 8007598:	2201      	movs	r2, #1
 800759a:	496d      	ldr	r1, [pc, #436]	@ (8007750 <HAL_I2C_Mem_Write+0x1ec>)
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fc8b 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80075a8:	2302      	movs	r3, #2
 80075aa:	e0cc      	b.n	8007746 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_I2C_Mem_Write+0x56>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e0c5      	b.n	8007746 <HAL_I2C_Mem_Write+0x1e2>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d007      	beq.n	80075e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2221      	movs	r2, #33	@ 0x21
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2240      	movs	r2, #64	@ 0x40
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a4d      	ldr	r2, [pc, #308]	@ (8007754 <HAL_I2C_Mem_Write+0x1f0>)
 8007620:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007622:	88f8      	ldrh	r0, [r7, #6]
 8007624:	893a      	ldrh	r2, [r7, #8]
 8007626:	8979      	ldrh	r1, [r7, #10]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fac2 	bl	8007bbc <I2C_RequestMemoryWrite>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d052      	beq.n	80076e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e081      	b.n	8007746 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fd50 	bl	80080ec <I2C_WaitOnTXEFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007656:	2b04      	cmp	r3, #4
 8007658:	d107      	bne.n	800766a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007668:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e06b      	b.n	8007746 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d11b      	bne.n	80076e4 <HAL_I2C_Mem_Write+0x180>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d017      	beq.n	80076e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1aa      	bne.n	8007642 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fd43 	bl	800817c <I2C_WaitOnBTFFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00d      	beq.n	8007718 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007700:	2b04      	cmp	r3, #4
 8007702:	d107      	bne.n	8007714 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007712:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e016      	b.n	8007746 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e000      	b.n	8007746 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007744:	2302      	movs	r3, #2
  }
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	00100002 	.word	0x00100002
 8007754:	ffff0000 	.word	0xffff0000

08007758 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08c      	sub	sp, #48	@ 0x30
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	4608      	mov	r0, r1
 8007762:	4611      	mov	r1, r2
 8007764:	461a      	mov	r2, r3
 8007766:	4603      	mov	r3, r0
 8007768:	817b      	strh	r3, [r7, #10]
 800776a:	460b      	mov	r3, r1
 800776c:	813b      	strh	r3, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007772:	f7ff f929 	bl	80069c8 <HAL_GetTick>
 8007776:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b20      	cmp	r3, #32
 8007782:	f040 8214 	bne.w	8007bae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2319      	movs	r3, #25
 800778c:	2201      	movs	r2, #1
 800778e:	497b      	ldr	r1, [pc, #492]	@ (800797c <HAL_I2C_Mem_Read+0x224>)
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fb91 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800779c:	2302      	movs	r3, #2
 800779e:	e207      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_I2C_Mem_Read+0x56>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e200      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d007      	beq.n	80077d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2222      	movs	r2, #34	@ 0x22
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2240      	movs	r2, #64	@ 0x40
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a5b      	ldr	r2, [pc, #364]	@ (8007980 <HAL_I2C_Mem_Read+0x228>)
 8007814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007816:	88f8      	ldrh	r0, [r7, #6]
 8007818:	893a      	ldrh	r2, [r7, #8]
 800781a:	8979      	ldrh	r1, [r7, #10]
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4603      	mov	r3, r0
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fa5e 	bl	8007ce8 <I2C_RequestMemoryRead>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e1bc      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783a:	2b00      	cmp	r3, #0
 800783c:	d113      	bne.n	8007866 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800783e:	2300      	movs	r3, #0
 8007840:	623b      	str	r3, [r7, #32]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	623b      	str	r3, [r7, #32]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	623b      	str	r3, [r7, #32]
 8007852:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e190      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800786a:	2b01      	cmp	r3, #1
 800786c:	d11b      	bne.n	80078a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800787c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787e:	2300      	movs	r3, #0
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e170      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d11b      	bne.n	80078e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	e150      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078fc:	e144      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007902:	2b03      	cmp	r3, #3
 8007904:	f200 80f1 	bhi.w	8007aea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790c:	2b01      	cmp	r3, #1
 800790e:	d123      	bne.n	8007958 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007912:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fc79 	bl	800820c <I2C_WaitOnRXNEFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e145      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007956:	e117      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800795c:	2b02      	cmp	r3, #2
 800795e:	d14e      	bne.n	80079fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	2200      	movs	r2, #0
 8007968:	4906      	ldr	r1, [pc, #24]	@ (8007984 <HAL_I2C_Mem_Read+0x22c>)
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 faa4 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e11a      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
 800797a:	bf00      	nop
 800797c:	00100002 	.word	0x00100002
 8007980:	ffff0000 	.word	0xffff0000
 8007984:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	b2d2      	uxtb	r2, r2
 80079d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80079fc:	e0c4      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	2200      	movs	r2, #0
 8007a06:	496c      	ldr	r1, [pc, #432]	@ (8007bb8 <HAL_I2C_Mem_Read+0x460>)
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fa55 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0cb      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	2200      	movs	r2, #0
 8007a62:	4955      	ldr	r1, [pc, #340]	@ (8007bb8 <HAL_I2C_Mem_Read+0x460>)
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fa27 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e09d      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ae8:	e04e      	b.n	8007b88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fb8c 	bl	800820c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e058      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d124      	bne.n	8007b88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d107      	bne.n	8007b56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f aeb6 	bne.w	80078fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e000      	b.n	8007bb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007bae:	2302      	movs	r3, #2
  }
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3728      	adds	r7, #40	@ 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	00010004 	.word	0x00010004

08007bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	817b      	strh	r3, [r7, #10]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	813b      	strh	r3, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f960 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00d      	beq.n	8007c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c0c:	d103      	bne.n	8007c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e05f      	b.n	8007cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c1a:	897b      	ldrh	r3, [r7, #10]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	6a3a      	ldr	r2, [r7, #32]
 8007c2e:	492d      	ldr	r1, [pc, #180]	@ (8007ce4 <I2C_RequestMemoryWrite+0x128>)
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f9bb 	bl	8007fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e04c      	b.n	8007cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c58:	6a39      	ldr	r1, [r7, #32]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fa46 	bl	80080ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00d      	beq.n	8007c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d107      	bne.n	8007c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e02b      	b.n	8007cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d105      	bne.n	8007c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c88:	893b      	ldrh	r3, [r7, #8]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	611a      	str	r2, [r3, #16]
 8007c92:	e021      	b.n	8007cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c94:	893b      	ldrh	r3, [r7, #8]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca4:	6a39      	ldr	r1, [r7, #32]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fa20 	bl	80080ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00d      	beq.n	8007cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d107      	bne.n	8007cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e005      	b.n	8007cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cce:	893b      	ldrh	r3, [r7, #8]
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	00010002 	.word	0x00010002

08007ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	817b      	strh	r3, [r7, #10]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	813b      	strh	r3, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f8c2 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00d      	beq.n	8007d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d48:	d103      	bne.n	8007d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e0aa      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d56:	897b      	ldrh	r3, [r7, #10]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	4952      	ldr	r1, [pc, #328]	@ (8007eb4 <I2C_RequestMemoryRead+0x1cc>)
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f91d 	bl	8007fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e097      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d94:	6a39      	ldr	r1, [r7, #32]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f9a8 	bl	80080ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d107      	bne.n	8007dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e076      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d105      	bne.n	8007dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc4:	893b      	ldrh	r3, [r7, #8]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	611a      	str	r2, [r3, #16]
 8007dce:	e021      	b.n	8007e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007dd0:	893b      	ldrh	r3, [r7, #8]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de0:	6a39      	ldr	r1, [r7, #32]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f982 	bl	80080ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d107      	bne.n	8007e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e050      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e0a:	893b      	ldrh	r3, [r7, #8]
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e16:	6a39      	ldr	r1, [r7, #32]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f967 	bl	80080ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00d      	beq.n	8007e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d107      	bne.n	8007e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e035      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f82b 	bl	8007eb8 <I2C_WaitOnFlagUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00d      	beq.n	8007e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e76:	d103      	bne.n	8007e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e013      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e84:	897b      	ldrh	r3, [r7, #10]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e96:	6a3a      	ldr	r2, [r7, #32]
 8007e98:	4906      	ldr	r1, [pc, #24]	@ (8007eb4 <I2C_RequestMemoryRead+0x1cc>)
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f886 	bl	8007fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	00010002 	.word	0x00010002

08007eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec8:	e048      	b.n	8007f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d044      	beq.n	8007f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed2:	f7fe fd79 	bl	80069c8 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d302      	bcc.n	8007ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d139      	bne.n	8007f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d10d      	bne.n	8007f0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	43da      	mvns	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4013      	ands	r3, r2
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	e00c      	b.n	8007f28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	43da      	mvns	r2, r3
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bf0c      	ite	eq
 8007f20:	2301      	moveq	r3, #1
 8007f22:	2300      	movne	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	461a      	mov	r2, r3
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d116      	bne.n	8007f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e023      	b.n	8007fa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	0c1b      	lsrs	r3, r3, #16
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d10d      	bne.n	8007f82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	43da      	mvns	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	e00c      	b.n	8007f9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	43da      	mvns	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d093      	beq.n	8007eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fba:	e071      	b.n	80080a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fca:	d123      	bne.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	f043 0204 	orr.w	r2, r3, #4
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e067      	b.n	80080e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	d041      	beq.n	80080a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801c:	f7fe fcd4 	bl	80069c8 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	429a      	cmp	r2, r3
 800802a:	d302      	bcc.n	8008032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d136      	bne.n	80080a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	d10c      	bne.n	8008056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	43da      	mvns	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4013      	ands	r3, r2
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	bf14      	ite	ne
 800804e:	2301      	movne	r3, #1
 8008050:	2300      	moveq	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	e00b      	b.n	800806e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	43da      	mvns	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	4013      	ands	r3, r2
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d016      	beq.n	80080a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	f043 0220 	orr.w	r2, r3, #32
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e021      	b.n	80080e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10c      	bne.n	80080c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	43da      	mvns	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4013      	ands	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	e00b      	b.n	80080dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	43da      	mvns	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4013      	ands	r3, r2
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bf14      	ite	ne
 80080d6:	2301      	movne	r3, #1
 80080d8:	2300      	moveq	r3, #0
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f47f af6d 	bne.w	8007fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080f8:	e034      	b.n	8008164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f8e3 	bl	80082c6 <I2C_IsAcknowledgeFailed>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e034      	b.n	8008174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d028      	beq.n	8008164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fe fc59 	bl	80069c8 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d11d      	bne.n	8008164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008132:	2b80      	cmp	r3, #128	@ 0x80
 8008134:	d016      	beq.n	8008164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008150:	f043 0220 	orr.w	r2, r3, #32
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e007      	b.n	8008174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800816e:	2b80      	cmp	r3, #128	@ 0x80
 8008170:	d1c3      	bne.n	80080fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008188:	e034      	b.n	80081f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f89b 	bl	80082c6 <I2C_IsAcknowledgeFailed>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e034      	b.n	8008204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d028      	beq.n	80081f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a2:	f7fe fc11 	bl	80069c8 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d302      	bcc.n	80081b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d11d      	bne.n	80081f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d016      	beq.n	80081f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e0:	f043 0220 	orr.w	r2, r3, #32
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e007      	b.n	8008204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d1c3      	bne.n	800818a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008218:	e049      	b.n	80082ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b10      	cmp	r3, #16
 8008226:	d119      	bne.n	800825c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f06f 0210 	mvn.w	r2, #16
 8008230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2220      	movs	r2, #32
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e030      	b.n	80082be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800825c:	f7fe fbb4 	bl	80069c8 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	429a      	cmp	r2, r3
 800826a:	d302      	bcc.n	8008272 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d11d      	bne.n	80082ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827c:	2b40      	cmp	r3, #64	@ 0x40
 800827e:	d016      	beq.n	80082ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e007      	b.n	80082be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b8:	2b40      	cmp	r3, #64	@ 0x40
 80082ba:	d1ae      	bne.n	800821a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082dc:	d11b      	bne.n	8008316 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80082e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	f043 0204 	orr.w	r2, r3, #4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e0bf      	b.n	80084b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fd fd0e 	bl	8005d6c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008366:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6999      	ldr	r1, [r3, #24]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800837c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6899      	ldr	r1, [r3, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b4a      	ldr	r3, [pc, #296]	@ (80084c0 <HAL_LTDC_Init+0x19c>)
 8008398:	400b      	ands	r3, r1
 800839a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6899      	ldr	r1, [r3, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68d9      	ldr	r1, [r3, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	4b3e      	ldr	r3, [pc, #248]	@ (80084c0 <HAL_LTDC_Init+0x19c>)
 80083c6:	400b      	ands	r3, r1
 80083c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68d9      	ldr	r1, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6919      	ldr	r1, [r3, #16]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4b33      	ldr	r3, [pc, #204]	@ (80084c0 <HAL_LTDC_Init+0x19c>)
 80083f4:	400b      	ands	r3, r1
 80083f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6919      	ldr	r1, [r3, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6959      	ldr	r1, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b27      	ldr	r3, [pc, #156]	@ (80084c0 <HAL_LTDC_Init+0x19c>)
 8008422:	400b      	ands	r3, r1
 8008424:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6959      	ldr	r1, [r3, #20]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0206 	orr.w	r2, r2, #6
 8008492:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	f000f800 	.word	0xf000f800

080084c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084c4:	b5b0      	push	{r4, r5, r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_LTDC_ConfigLayer+0x1a>
 80084da:	2302      	movs	r3, #2
 80084dc:	e02c      	b.n	8008538 <HAL_LTDC_ConfigLayer+0x74>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2134      	movs	r1, #52	@ 0x34
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	4413      	add	r3, r2
 80084fa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4614      	mov	r4, r2
 8008502:	461d      	mov	r5, r3
 8008504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800850a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800850e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f811 	bl	8008540 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bdb0      	pop	{r4, r5, r7, pc}

08008540 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008540:	b480      	push	{r7}
 8008542:	b089      	sub	sp, #36	@ 0x24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800855c:	4413      	add	r3, r2
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	01db      	lsls	r3, r3, #7
 800856c:	4413      	add	r3, r2
 800856e:	3384      	adds	r3, #132	@ 0x84
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	4611      	mov	r1, r2
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	01d2      	lsls	r2, r2, #7
 800857c:	440a      	add	r2, r1
 800857e:	3284      	adds	r2, #132	@ 0x84
 8008580:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008584:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	0c1b      	lsrs	r3, r3, #16
 8008592:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008596:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008598:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	01db      	lsls	r3, r3, #7
 80085a4:	440b      	add	r3, r1
 80085a6:	3384      	adds	r3, #132	@ 0x84
 80085a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80085ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085be:	4413      	add	r3, r2
 80085c0:	041b      	lsls	r3, r3, #16
 80085c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	01db      	lsls	r3, r3, #7
 80085ce:	4413      	add	r3, r2
 80085d0:	3384      	adds	r3, #132	@ 0x84
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	4611      	mov	r1, r2
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	01d2      	lsls	r2, r2, #7
 80085de:	440a      	add	r2, r1
 80085e0:	3284      	adds	r2, #132	@ 0x84
 80085e2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80085e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085f6:	4413      	add	r3, r2
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4619      	mov	r1, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	01db      	lsls	r3, r3, #7
 8008604:	440b      	add	r3, r1
 8008606:	3384      	adds	r3, #132	@ 0x84
 8008608:	4619      	mov	r1, r3
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4313      	orrs	r3, r2
 800860e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	01db      	lsls	r3, r3, #7
 800861a:	4413      	add	r3, r2
 800861c:	3384      	adds	r3, #132	@ 0x84
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	6812      	ldr	r2, [r2, #0]
 8008624:	4611      	mov	r1, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	01d2      	lsls	r2, r2, #7
 800862a:	440a      	add	r2, r1
 800862c:	3284      	adds	r2, #132	@ 0x84
 800862e:	f023 0307 	bic.w	r3, r3, #7
 8008632:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	01db      	lsls	r3, r3, #7
 800863e:	4413      	add	r3, r2
 8008640:	3384      	adds	r3, #132	@ 0x84
 8008642:	461a      	mov	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008650:	021b      	lsls	r3, r3, #8
 8008652:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800865a:	041b      	lsls	r3, r3, #16
 800865c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	061b      	lsls	r3, r3, #24
 8008664:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	01db      	lsls	r3, r3, #7
 8008670:	4413      	add	r3, r2
 8008672:	3384      	adds	r3, #132	@ 0x84
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	01db      	lsls	r3, r3, #7
 8008680:	4413      	add	r3, r2
 8008682:	3384      	adds	r3, #132	@ 0x84
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008690:	461a      	mov	r2, r3
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	431a      	orrs	r2, r3
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4619      	mov	r1, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	01db      	lsls	r3, r3, #7
 80086a4:	440b      	add	r3, r1
 80086a6:	3384      	adds	r3, #132	@ 0x84
 80086a8:	4619      	mov	r1, r3
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	01db      	lsls	r3, r3, #7
 80086ba:	4413      	add	r3, r2
 80086bc:	3384      	adds	r3, #132	@ 0x84
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	4611      	mov	r1, r2
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	01d2      	lsls	r2, r2, #7
 80086ca:	440a      	add	r2, r1
 80086cc:	3284      	adds	r2, #132	@ 0x84
 80086ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	01db      	lsls	r3, r3, #7
 80086de:	4413      	add	r3, r2
 80086e0:	3384      	adds	r3, #132	@ 0x84
 80086e2:	461a      	mov	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	01db      	lsls	r3, r3, #7
 80086f4:	4413      	add	r3, r2
 80086f6:	3384      	adds	r3, #132	@ 0x84
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	6812      	ldr	r2, [r2, #0]
 80086fe:	4611      	mov	r1, r2
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	01d2      	lsls	r2, r2, #7
 8008704:	440a      	add	r2, r1
 8008706:	3284      	adds	r2, #132	@ 0x84
 8008708:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800870c:	f023 0307 	bic.w	r3, r3, #7
 8008710:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	69da      	ldr	r2, [r3, #28]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	6809      	ldr	r1, [r1, #0]
 800871e:	4608      	mov	r0, r1
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	01c9      	lsls	r1, r1, #7
 8008724:	4401      	add	r1, r0
 8008726:	3184      	adds	r1, #132	@ 0x84
 8008728:	4313      	orrs	r3, r2
 800872a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	01db      	lsls	r3, r3, #7
 8008736:	4413      	add	r3, r2
 8008738:	3384      	adds	r3, #132	@ 0x84
 800873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	01db      	lsls	r3, r3, #7
 8008746:	4413      	add	r3, r2
 8008748:	3384      	adds	r3, #132	@ 0x84
 800874a:	461a      	mov	r2, r3
 800874c:	2300      	movs	r3, #0
 800874e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	01db      	lsls	r3, r3, #7
 800875a:	4413      	add	r3, r2
 800875c:	3384      	adds	r3, #132	@ 0x84
 800875e:	461a      	mov	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008764:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800876e:	2304      	movs	r3, #4
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	e01b      	b.n	80087ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d102      	bne.n	8008782 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800877c:	2303      	movs	r3, #3
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e014      	b.n	80087ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d00b      	beq.n	80087a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800878e:	2b02      	cmp	r3, #2
 8008790:	d007      	beq.n	80087a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008796:	2b03      	cmp	r3, #3
 8008798:	d003      	beq.n	80087a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800879e:	2b07      	cmp	r3, #7
 80087a0:	d102      	bne.n	80087a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80087a2:	2302      	movs	r3, #2
 80087a4:	61fb      	str	r3, [r7, #28]
 80087a6:	e001      	b.n	80087ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80087a8:	2301      	movs	r3, #1
 80087aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	01db      	lsls	r3, r3, #7
 80087b6:	4413      	add	r3, r2
 80087b8:	3384      	adds	r3, #132	@ 0x84
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	6812      	ldr	r2, [r2, #0]
 80087c0:	4611      	mov	r1, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	01d2      	lsls	r2, r2, #7
 80087c6:	440a      	add	r2, r1
 80087c8:	3284      	adds	r2, #132	@ 0x84
 80087ca:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80087ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6859      	ldr	r1, [r3, #4]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	1acb      	subs	r3, r1, r3
 80087e6:	69f9      	ldr	r1, [r7, #28]
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	6809      	ldr	r1, [r1, #0]
 80087f2:	4608      	mov	r0, r1
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	01c9      	lsls	r1, r1, #7
 80087f8:	4401      	add	r1, r0
 80087fa:	3184      	adds	r1, #132	@ 0x84
 80087fc:	4313      	orrs	r3, r2
 80087fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	01db      	lsls	r3, r3, #7
 800880a:	4413      	add	r3, r2
 800880c:	3384      	adds	r3, #132	@ 0x84
 800880e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	4611      	mov	r1, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	01d2      	lsls	r2, r2, #7
 800881a:	440a      	add	r2, r1
 800881c:	3284      	adds	r2, #132	@ 0x84
 800881e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	01db      	lsls	r3, r3, #7
 8008832:	4413      	add	r3, r2
 8008834:	3384      	adds	r3, #132	@ 0x84
 8008836:	461a      	mov	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	01db      	lsls	r3, r3, #7
 8008848:	4413      	add	r3, r2
 800884a:	3384      	adds	r3, #132	@ 0x84
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	4611      	mov	r1, r2
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	01d2      	lsls	r2, r2, #7
 8008858:	440a      	add	r2, r1
 800885a:	3284      	adds	r2, #132	@ 0x84
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6013      	str	r3, [r2, #0]
}
 8008862:	bf00      	nop
 8008864:	3724      	adds	r7, #36	@ 0x24
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
	...

08008870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e267      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d075      	beq.n	800897a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800888e:	4b88      	ldr	r3, [pc, #544]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f003 030c 	and.w	r3, r3, #12
 8008896:	2b04      	cmp	r3, #4
 8008898:	d00c      	beq.n	80088b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800889a:	4b85      	ldr	r3, [pc, #532]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d112      	bne.n	80088cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088a6:	4b82      	ldr	r3, [pc, #520]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088b2:	d10b      	bne.n	80088cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d05b      	beq.n	8008978 <HAL_RCC_OscConfig+0x108>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d157      	bne.n	8008978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e242      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d4:	d106      	bne.n	80088e4 <HAL_RCC_OscConfig+0x74>
 80088d6:	4b76      	ldr	r3, [pc, #472]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a75      	ldr	r2, [pc, #468]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	e01d      	b.n	8008920 <HAL_RCC_OscConfig+0xb0>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088ec:	d10c      	bne.n	8008908 <HAL_RCC_OscConfig+0x98>
 80088ee:	4b70      	ldr	r3, [pc, #448]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a6f      	ldr	r2, [pc, #444]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	4b6d      	ldr	r3, [pc, #436]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a6c      	ldr	r2, [pc, #432]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	e00b      	b.n	8008920 <HAL_RCC_OscConfig+0xb0>
 8008908:	4b69      	ldr	r3, [pc, #420]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a68      	ldr	r2, [pc, #416]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 800890e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	4b66      	ldr	r3, [pc, #408]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a65      	ldr	r2, [pc, #404]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 800891a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800891e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d013      	beq.n	8008950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008928:	f7fe f84e 	bl	80069c8 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008930:	f7fe f84a 	bl	80069c8 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b64      	cmp	r3, #100	@ 0x64
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e207      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008942:	4b5b      	ldr	r3, [pc, #364]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0xc0>
 800894e:	e014      	b.n	800897a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008950:	f7fe f83a 	bl	80069c8 <HAL_GetTick>
 8008954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008958:	f7fe f836 	bl	80069c8 <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b64      	cmp	r3, #100	@ 0x64
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e1f3      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800896a:	4b51      	ldr	r3, [pc, #324]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1f0      	bne.n	8008958 <HAL_RCC_OscConfig+0xe8>
 8008976:	e000      	b.n	800897a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d063      	beq.n	8008a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008986:	4b4a      	ldr	r3, [pc, #296]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 030c 	and.w	r3, r3, #12
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00b      	beq.n	80089aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008992:	4b47      	ldr	r3, [pc, #284]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800899a:	2b08      	cmp	r3, #8
 800899c:	d11c      	bne.n	80089d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800899e:	4b44      	ldr	r3, [pc, #272]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d116      	bne.n	80089d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089aa:	4b41      	ldr	r3, [pc, #260]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <HAL_RCC_OscConfig+0x152>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d001      	beq.n	80089c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e1c7      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	4937      	ldr	r1, [pc, #220]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089d6:	e03a      	b.n	8008a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d020      	beq.n	8008a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089e0:	4b34      	ldr	r3, [pc, #208]	@ (8008ab4 <HAL_RCC_OscConfig+0x244>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e6:	f7fd ffef 	bl	80069c8 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089ee:	f7fd ffeb 	bl	80069c8 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e1a8      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a00:	4b2b      	ldr	r3, [pc, #172]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0f0      	beq.n	80089ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a0c:	4b28      	ldr	r3, [pc, #160]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	4925      	ldr	r1, [pc, #148]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	600b      	str	r3, [r1, #0]
 8008a20:	e015      	b.n	8008a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a22:	4b24      	ldr	r3, [pc, #144]	@ (8008ab4 <HAL_RCC_OscConfig+0x244>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a28:	f7fd ffce 	bl	80069c8 <HAL_GetTick>
 8008a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a2e:	e008      	b.n	8008a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a30:	f7fd ffca 	bl	80069c8 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e187      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a42:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f0      	bne.n	8008a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d036      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a62:	4b15      	ldr	r3, [pc, #84]	@ (8008ab8 <HAL_RCC_OscConfig+0x248>)
 8008a64:	2201      	movs	r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a68:	f7fd ffae 	bl	80069c8 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a70:	f7fd ffaa 	bl	80069c8 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e167      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a82:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <HAL_RCC_OscConfig+0x240>)
 8008a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0f0      	beq.n	8008a70 <HAL_RCC_OscConfig+0x200>
 8008a8e:	e01b      	b.n	8008ac8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a90:	4b09      	ldr	r3, [pc, #36]	@ (8008ab8 <HAL_RCC_OscConfig+0x248>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a96:	f7fd ff97 	bl	80069c8 <HAL_GetTick>
 8008a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a9c:	e00e      	b.n	8008abc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a9e:	f7fd ff93 	bl	80069c8 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d907      	bls.n	8008abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e150      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
 8008ab0:	40023800 	.word	0x40023800
 8008ab4:	42470000 	.word	0x42470000
 8008ab8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008abc:	4b88      	ldr	r3, [pc, #544]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1ea      	bne.n	8008a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8097 	beq.w	8008c04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ada:	4b81      	ldr	r3, [pc, #516]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10f      	bne.n	8008b06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60bb      	str	r3, [r7, #8]
 8008aea:	4b7d      	ldr	r3, [pc, #500]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aee:	4a7c      	ldr	r2, [pc, #496]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008af6:	4b7a      	ldr	r3, [pc, #488]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008afe:	60bb      	str	r3, [r7, #8]
 8008b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b06:	4b77      	ldr	r3, [pc, #476]	@ (8008ce4 <HAL_RCC_OscConfig+0x474>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d118      	bne.n	8008b44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b12:	4b74      	ldr	r3, [pc, #464]	@ (8008ce4 <HAL_RCC_OscConfig+0x474>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a73      	ldr	r2, [pc, #460]	@ (8008ce4 <HAL_RCC_OscConfig+0x474>)
 8008b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b1e:	f7fd ff53 	bl	80069c8 <HAL_GetTick>
 8008b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b24:	e008      	b.n	8008b38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b26:	f7fd ff4f 	bl	80069c8 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d901      	bls.n	8008b38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e10c      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b38:	4b6a      	ldr	r3, [pc, #424]	@ (8008ce4 <HAL_RCC_OscConfig+0x474>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0f0      	beq.n	8008b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d106      	bne.n	8008b5a <HAL_RCC_OscConfig+0x2ea>
 8008b4c:	4b64      	ldr	r3, [pc, #400]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b50:	4a63      	ldr	r2, [pc, #396]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b58:	e01c      	b.n	8008b94 <HAL_RCC_OscConfig+0x324>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d10c      	bne.n	8008b7c <HAL_RCC_OscConfig+0x30c>
 8008b62:	4b5f      	ldr	r3, [pc, #380]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b66:	4a5e      	ldr	r2, [pc, #376]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b68:	f043 0304 	orr.w	r3, r3, #4
 8008b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b72:	4a5b      	ldr	r2, [pc, #364]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b74:	f043 0301 	orr.w	r3, r3, #1
 8008b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b7a:	e00b      	b.n	8008b94 <HAL_RCC_OscConfig+0x324>
 8008b7c:	4b58      	ldr	r3, [pc, #352]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b80:	4a57      	ldr	r2, [pc, #348]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b82:	f023 0301 	bic.w	r3, r3, #1
 8008b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b88:	4b55      	ldr	r3, [pc, #340]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b8c:	4a54      	ldr	r2, [pc, #336]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008b8e:	f023 0304 	bic.w	r3, r3, #4
 8008b92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d015      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9c:	f7fd ff14 	bl	80069c8 <HAL_GetTick>
 8008ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba2:	e00a      	b.n	8008bba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba4:	f7fd ff10 	bl	80069c8 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e0cb      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bba:	4b49      	ldr	r3, [pc, #292]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0ee      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x334>
 8008bc6:	e014      	b.n	8008bf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bc8:	f7fd fefe 	bl	80069c8 <HAL_GetTick>
 8008bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bce:	e00a      	b.n	8008be6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bd0:	f7fd fefa 	bl	80069c8 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e0b5      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008be6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1ee      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d105      	bne.n	8008c04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bf8:	4b39      	ldr	r3, [pc, #228]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfc:	4a38      	ldr	r2, [pc, #224]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80a1 	beq.w	8008d50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c0e:	4b34      	ldr	r3, [pc, #208]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 030c 	and.w	r3, r3, #12
 8008c16:	2b08      	cmp	r3, #8
 8008c18:	d05c      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d141      	bne.n	8008ca6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c22:	4b31      	ldr	r3, [pc, #196]	@ (8008ce8 <HAL_RCC_OscConfig+0x478>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c28:	f7fd fece 	bl	80069c8 <HAL_GetTick>
 8008c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c30:	f7fd feca 	bl	80069c8 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e087      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c42:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69da      	ldr	r2, [r3, #28]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5c:	019b      	lsls	r3, r3, #6
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	3b01      	subs	r3, #1
 8008c68:	041b      	lsls	r3, r3, #16
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c70:	061b      	lsls	r3, r3, #24
 8008c72:	491b      	ldr	r1, [pc, #108]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce8 <HAL_RCC_OscConfig+0x478>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c7e:	f7fd fea3 	bl	80069c8 <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c84:	e008      	b.n	8008c98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c86:	f7fd fe9f 	bl	80069c8 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d901      	bls.n	8008c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e05c      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c98:	4b11      	ldr	r3, [pc, #68]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0f0      	beq.n	8008c86 <HAL_RCC_OscConfig+0x416>
 8008ca4:	e054      	b.n	8008d50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca6:	4b10      	ldr	r3, [pc, #64]	@ (8008ce8 <HAL_RCC_OscConfig+0x478>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cac:	f7fd fe8c 	bl	80069c8 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb4:	f7fd fe88 	bl	80069c8 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e045      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cc6:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <HAL_RCC_OscConfig+0x470>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x444>
 8008cd2:	e03d      	b.n	8008d50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d107      	bne.n	8008cec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e038      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
 8008ce0:	40023800 	.word	0x40023800
 8008ce4:	40007000 	.word	0x40007000
 8008ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008cec:	4b1b      	ldr	r3, [pc, #108]	@ (8008d5c <HAL_RCC_OscConfig+0x4ec>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d028      	beq.n	8008d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d121      	bne.n	8008d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d11a      	bne.n	8008d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d111      	bne.n	8008d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	3b01      	subs	r3, #1
 8008d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d107      	bne.n	8008d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d001      	beq.n	8008d50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40023800 	.word	0x40023800

08008d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0cc      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d74:	4b68      	ldr	r3, [pc, #416]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d90c      	bls.n	8008d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d82:	4b65      	ldr	r3, [pc, #404]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d8a:	4b63      	ldr	r3, [pc, #396]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d001      	beq.n	8008d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0b8      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d020      	beq.n	8008dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008db4:	4b59      	ldr	r3, [pc, #356]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4a58      	ldr	r2, [pc, #352]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008dbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008dcc:	4b53      	ldr	r3, [pc, #332]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	4a52      	ldr	r2, [pc, #328]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dd8:	4b50      	ldr	r3, [pc, #320]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	494d      	ldr	r1, [pc, #308]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d044      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d107      	bne.n	8008e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dfe:	4b47      	ldr	r3, [pc, #284]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d119      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e07f      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d003      	beq.n	8008e1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e06f      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e067      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e3e:	4b37      	ldr	r3, [pc, #220]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f023 0203 	bic.w	r2, r3, #3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4934      	ldr	r1, [pc, #208]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e50:	f7fd fdba 	bl	80069c8 <HAL_GetTick>
 8008e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e56:	e00a      	b.n	8008e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e58:	f7fd fdb6 	bl	80069c8 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e04f      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 020c 	and.w	r2, r3, #12
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1eb      	bne.n	8008e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e80:	4b25      	ldr	r3, [pc, #148]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d20c      	bcs.n	8008ea8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e8e:	4b22      	ldr	r3, [pc, #136]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e96:	4b20      	ldr	r3, [pc, #128]	@ (8008f18 <HAL_RCC_ClockConfig+0x1b8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d001      	beq.n	8008ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e032      	b.n	8008f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eb4:	4b19      	ldr	r3, [pc, #100]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	4916      	ldr	r1, [pc, #88]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d009      	beq.n	8008ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ed2:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	490e      	ldr	r1, [pc, #56]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ee6:	f000 f821 	bl	8008f2c <HAL_RCC_GetSysClockFreq>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <HAL_RCC_ClockConfig+0x1bc>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	091b      	lsrs	r3, r3, #4
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	490a      	ldr	r1, [pc, #40]	@ (8008f20 <HAL_RCC_ClockConfig+0x1c0>)
 8008ef8:	5ccb      	ldrb	r3, [r1, r3]
 8008efa:	fa22 f303 	lsr.w	r3, r2, r3
 8008efe:	4a09      	ldr	r2, [pc, #36]	@ (8008f24 <HAL_RCC_ClockConfig+0x1c4>)
 8008f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008f02:	4b09      	ldr	r3, [pc, #36]	@ (8008f28 <HAL_RCC_ClockConfig+0x1c8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fd fd1a 	bl	8006940 <HAL_InitTick>

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	40023c00 	.word	0x40023c00
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	0800c31c 	.word	0x0800c31c
 8008f24:	20000010 	.word	0x20000010
 8008f28:	20000014 	.word	0x20000014

08008f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f30:	b094      	sub	sp, #80	@ 0x50
 8008f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f44:	4b79      	ldr	r3, [pc, #484]	@ (800912c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 030c 	and.w	r3, r3, #12
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d00d      	beq.n	8008f6c <HAL_RCC_GetSysClockFreq+0x40>
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	f200 80e1 	bhi.w	8009118 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <HAL_RCC_GetSysClockFreq+0x34>
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d003      	beq.n	8008f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8008f5e:	e0db      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f60:	4b73      	ldr	r3, [pc, #460]	@ (8009130 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008f64:	e0db      	b.n	800911e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f66:	4b73      	ldr	r3, [pc, #460]	@ (8009134 <HAL_RCC_GetSysClockFreq+0x208>)
 8008f68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008f6a:	e0d8      	b.n	800911e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800912c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f76:	4b6d      	ldr	r3, [pc, #436]	@ (800912c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d063      	beq.n	800904a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f82:	4b6a      	ldr	r3, [pc, #424]	@ (800912c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	2200      	movs	r2, #0
 8008f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f96:	2300      	movs	r3, #0
 8008f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	f04f 0000 	mov.w	r0, #0
 8008fa6:	f04f 0100 	mov.w	r1, #0
 8008faa:	0159      	lsls	r1, r3, #5
 8008fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fb0:	0150      	lsls	r0, r2, #5
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	1a51      	subs	r1, r2, r1
 8008fba:	6139      	str	r1, [r7, #16]
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	018b      	lsls	r3, r1, #6
 8008fd4:	4651      	mov	r1, sl
 8008fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008fda:	4651      	mov	r1, sl
 8008fdc:	018a      	lsls	r2, r1, #6
 8008fde:	4651      	mov	r1, sl
 8008fe0:	ebb2 0801 	subs.w	r8, r2, r1
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	eb63 0901 	sbc.w	r9, r3, r1
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	f04f 0300 	mov.w	r3, #0
 8008ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ffe:	4690      	mov	r8, r2
 8009000:	4699      	mov	r9, r3
 8009002:	4623      	mov	r3, r4
 8009004:	eb18 0303 	adds.w	r3, r8, r3
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	462b      	mov	r3, r5
 800900c:	eb49 0303 	adc.w	r3, r9, r3
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	f04f 0300 	mov.w	r3, #0
 800901a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800901e:	4629      	mov	r1, r5
 8009020:	024b      	lsls	r3, r1, #9
 8009022:	4621      	mov	r1, r4
 8009024:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009028:	4621      	mov	r1, r4
 800902a:	024a      	lsls	r2, r1, #9
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009032:	2200      	movs	r2, #0
 8009034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800903c:	f7f7 f930 	bl	80002a0 <__aeabi_uldivmod>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4613      	mov	r3, r2
 8009046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009048:	e058      	b.n	80090fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800904a:	4b38      	ldr	r3, [pc, #224]	@ (800912c <HAL_RCC_GetSysClockFreq+0x200>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	099b      	lsrs	r3, r3, #6
 8009050:	2200      	movs	r2, #0
 8009052:	4618      	mov	r0, r3
 8009054:	4611      	mov	r1, r2
 8009056:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800905a:	623b      	str	r3, [r7, #32]
 800905c:	2300      	movs	r3, #0
 800905e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009060:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009064:	4642      	mov	r2, r8
 8009066:	464b      	mov	r3, r9
 8009068:	f04f 0000 	mov.w	r0, #0
 800906c:	f04f 0100 	mov.w	r1, #0
 8009070:	0159      	lsls	r1, r3, #5
 8009072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009076:	0150      	lsls	r0, r2, #5
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4641      	mov	r1, r8
 800907e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009082:	4649      	mov	r1, r9
 8009084:	eb63 0b01 	sbc.w	fp, r3, r1
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009094:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009098:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800909c:	ebb2 040a 	subs.w	r4, r2, sl
 80090a0:	eb63 050b 	sbc.w	r5, r3, fp
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	00eb      	lsls	r3, r5, #3
 80090ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090b2:	00e2      	lsls	r2, r4, #3
 80090b4:	4614      	mov	r4, r2
 80090b6:	461d      	mov	r5, r3
 80090b8:	4643      	mov	r3, r8
 80090ba:	18e3      	adds	r3, r4, r3
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	464b      	mov	r3, r9
 80090c0:	eb45 0303 	adc.w	r3, r5, r3
 80090c4:	607b      	str	r3, [r7, #4]
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090d2:	4629      	mov	r1, r5
 80090d4:	028b      	lsls	r3, r1, #10
 80090d6:	4621      	mov	r1, r4
 80090d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090dc:	4621      	mov	r1, r4
 80090de:	028a      	lsls	r2, r1, #10
 80090e0:	4610      	mov	r0, r2
 80090e2:	4619      	mov	r1, r3
 80090e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e6:	2200      	movs	r2, #0
 80090e8:	61bb      	str	r3, [r7, #24]
 80090ea:	61fa      	str	r2, [r7, #28]
 80090ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f0:	f7f7 f8d6 	bl	80002a0 <__aeabi_uldivmod>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4613      	mov	r3, r2
 80090fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80090fc:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <HAL_RCC_GetSysClockFreq+0x200>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	3301      	adds	r3, #1
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800910c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800910e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009110:	fbb2 f3f3 	udiv	r3, r2, r3
 8009114:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009116:	e002      	b.n	800911e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009118:	4b05      	ldr	r3, [pc, #20]	@ (8009130 <HAL_RCC_GetSysClockFreq+0x204>)
 800911a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800911c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800911e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009120:	4618      	mov	r0, r3
 8009122:	3750      	adds	r7, #80	@ 0x50
 8009124:	46bd      	mov	sp, r7
 8009126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800912a:	bf00      	nop
 800912c:	40023800 	.word	0x40023800
 8009130:	00f42400 	.word	0x00f42400
 8009134:	007a1200 	.word	0x007a1200

08009138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800913c:	4b03      	ldr	r3, [pc, #12]	@ (800914c <HAL_RCC_GetHCLKFreq+0x14>)
 800913e:	681b      	ldr	r3, [r3, #0]
}
 8009140:	4618      	mov	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20000010 	.word	0x20000010

08009150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009154:	f7ff fff0 	bl	8009138 <HAL_RCC_GetHCLKFreq>
 8009158:	4602      	mov	r2, r0
 800915a:	4b05      	ldr	r3, [pc, #20]	@ (8009170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	0a9b      	lsrs	r3, r3, #10
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	4903      	ldr	r1, [pc, #12]	@ (8009174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009166:	5ccb      	ldrb	r3, [r1, r3]
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800916c:	4618      	mov	r0, r3
 800916e:	bd80      	pop	{r7, pc}
 8009170:	40023800 	.word	0x40023800
 8009174:	0800c32c 	.word	0x0800c32c

08009178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800919c:	2b00      	cmp	r3, #0
 800919e:	d105      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d075      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091ac:	4b91      	ldr	r3, [pc, #580]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091b2:	f7fd fc09 	bl	80069c8 <HAL_GetTick>
 80091b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091b8:	e008      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091ba:	f7fd fc05 	bl	80069c8 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d901      	bls.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e189      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091cc:	4b8a      	ldr	r3, [pc, #552]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1f0      	bne.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	019a      	lsls	r2, r3, #6
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	071b      	lsls	r3, r3, #28
 80091f0:	4981      	ldr	r1, [pc, #516]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d01f      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009204:	4b7c      	ldr	r3, [pc, #496]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800920a:	0f1b      	lsrs	r3, r3, #28
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	019a      	lsls	r2, r3, #6
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	061b      	lsls	r3, r3, #24
 800921e:	431a      	orrs	r2, r3
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	071b      	lsls	r3, r3, #28
 8009224:	4974      	ldr	r1, [pc, #464]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800922c:	4b72      	ldr	r3, [pc, #456]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800922e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009232:	f023 021f 	bic.w	r2, r3, #31
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	3b01      	subs	r3, #1
 800923c:	496e      	ldr	r1, [pc, #440]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800923e:	4313      	orrs	r3, r2
 8009240:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00d      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	019a      	lsls	r2, r3, #6
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	061b      	lsls	r3, r3, #24
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	071b      	lsls	r3, r3, #28
 8009264:	4964      	ldr	r1, [pc, #400]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009266:	4313      	orrs	r3, r2
 8009268:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800926c:	4b61      	ldr	r3, [pc, #388]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800926e:	2201      	movs	r2, #1
 8009270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009272:	f7fd fba9 	bl	80069c8 <HAL_GetTick>
 8009276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009278:	e008      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800927a:	f7fd fba5 	bl	80069c8 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e129      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800928c:	4b5a      	ldr	r3, [pc, #360]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0f0      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d079      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80092b0:	4b52      	ldr	r3, [pc, #328]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092b6:	f7fd fb87 	bl	80069c8 <HAL_GetTick>
 80092ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092bc:	e008      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80092be:	f7fd fb83 	bl	80069c8 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e107      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092d0:	4b49      	ldr	r3, [pc, #292]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092dc:	d0ef      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d020      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092ea:	4b43      	ldr	r3, [pc, #268]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f0:	0f1b      	lsrs	r3, r3, #28
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	019a      	lsls	r2, r3, #6
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	061b      	lsls	r3, r3, #24
 8009304:	431a      	orrs	r2, r3
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	071b      	lsls	r3, r3, #28
 800930a:	493b      	ldr	r1, [pc, #236]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800930c:	4313      	orrs	r3, r2
 800930e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009312:	4b39      	ldr	r3, [pc, #228]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009318:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	3b01      	subs	r3, #1
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	4934      	ldr	r1, [pc, #208]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009326:	4313      	orrs	r3, r2
 8009328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01e      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009338:	4b2f      	ldr	r3, [pc, #188]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800933e:	0e1b      	lsrs	r3, r3, #24
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	019a      	lsls	r2, r3, #6
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	061b      	lsls	r3, r3, #24
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	071b      	lsls	r3, r3, #28
 8009358:	4927      	ldr	r1, [pc, #156]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009360:	4b25      	ldr	r3, [pc, #148]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009366:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936e:	4922      	ldr	r1, [pc, #136]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009370:	4313      	orrs	r3, r2
 8009372:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009376:	4b21      	ldr	r3, [pc, #132]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800937c:	f7fd fb24 	bl	80069c8 <HAL_GetTick>
 8009380:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009382:	e008      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009384:	f7fd fb20 	bl	80069c8 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d901      	bls.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e0a4      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009396:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800939e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093a2:	d1ef      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 808b 	beq.w	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	4b10      	ldr	r3, [pc, #64]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ba:	4a0f      	ldr	r2, [pc, #60]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80093c2:	4b0d      	ldr	r3, [pc, #52]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80093ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a0b      	ldr	r2, [pc, #44]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80093d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093da:	f7fd faf5 	bl	80069c8 <HAL_GetTick>
 80093de:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80093e0:	e010      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093e2:	f7fd faf1 	bl	80069c8 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d909      	bls.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e075      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80093f4:	42470068 	.word	0x42470068
 80093f8:	40023800 	.word	0x40023800
 80093fc:	42470070 	.word	0x42470070
 8009400:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009404:	4b38      	ldr	r3, [pc, #224]	@ (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0e8      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009410:	4b36      	ldr	r3, [pc, #216]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009418:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d02f      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	429a      	cmp	r2, r3
 800942c:	d028      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800942e:	4b2f      	ldr	r3, [pc, #188]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009436:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009438:	4b2d      	ldr	r3, [pc, #180]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800943a:	2201      	movs	r2, #1
 800943c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800943e:	4b2c      	ldr	r3, [pc, #176]	@ (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009444:	4a29      	ldr	r2, [pc, #164]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800944a:	4b28      	ldr	r3, [pc, #160]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b01      	cmp	r3, #1
 8009454:	d114      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009456:	f7fd fab7 	bl	80069c8 <HAL_GetTick>
 800945a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800945c:	e00a      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800945e:	f7fd fab3 	bl	80069c8 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800946c:	4293      	cmp	r3, r2
 800946e:	d901      	bls.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e035      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009474:	4b1d      	ldr	r3, [pc, #116]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0ee      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009488:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800948c:	d10d      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800948e:	4b17      	ldr	r3, [pc, #92]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800949e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094a2:	4912      	ldr	r1, [pc, #72]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	608b      	str	r3, [r1, #8]
 80094a8:	e005      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80094aa:	4b10      	ldr	r3, [pc, #64]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	4a0f      	ldr	r2, [pc, #60]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80094b4:	6093      	str	r3, [r2, #8]
 80094b6:	4b0d      	ldr	r3, [pc, #52]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c2:	490a      	ldr	r1, [pc, #40]	@ (80094ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80094da:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80094dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40007000 	.word	0x40007000
 80094ec:	40023800 	.word	0x40023800
 80094f0:	42470e40 	.word	0x42470e40
 80094f4:	424711e0 	.word	0x424711e0

080094f8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e01c      	b.n	8009544 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	795b      	ldrb	r3, [r3, #5]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fc fd4e 	bl	8005fbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0204 	orr.w	r2, r2, #4
 8009534:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_RNG_GenerateRandomNumber+0x1a>
 8009562:	2302      	movs	r3, #2
 8009564:	e044      	b.n	80095f0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	795b      	ldrb	r3, [r3, #5]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b01      	cmp	r3, #1
 8009574:	d133      	bne.n	80095de <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2202      	movs	r2, #2
 800957a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800957c:	f7fd fa24 	bl	80069c8 <HAL_GetTick>
 8009580:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009582:	e018      	b.n	80095b6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009584:	f7fd fa20 	bl	80069c8 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b02      	cmp	r3, #2
 8009590:	d911      	bls.n	80095b6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b01      	cmp	r3, #1
 800959e:	d00a      	beq.n	80095b6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2202      	movs	r2, #2
 80095aa:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e01c      	b.n	80095f0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d1df      	bne.n	8009584 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	715a      	strb	r2, [r3, #5]
 80095dc:	e004      	b.n	80095e8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2204      	movs	r2, #4
 80095e2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	711a      	strb	r2, [r3, #4]

  return status;
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	330c      	adds	r3, #12
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff ffa0 	bl	800954c <HAL_RNG_GenerateRandomNumber>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	e000      	b.n	800961a <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8009618:	2300      	movs	r3, #0
  }
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e07b      	b.n	800972c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d108      	bne.n	800964e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009644:	d009      	beq.n	800965a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	61da      	str	r2, [r3, #28]
 800964c:	e005      	b.n	800965a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b00      	cmp	r3, #0
 800966a:	d106      	bne.n	800967a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fc fcc3 	bl	8006000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2202      	movs	r2, #2
 800967e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009690:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096de:	ea42 0103 	orr.w	r1, r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	0c1b      	lsrs	r3, r3, #16
 80096f8:	f003 0104 	and.w	r1, r3, #4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	f003 0210 	and.w	r2, r3, #16
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69da      	ldr	r2, [r3, #28]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800971a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e01a      	b.n	800977c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800975c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fc fc96 	bl	8006090 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	4613      	mov	r3, r2
 8009792:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009794:	f7fd f918 	bl	80069c8 <HAL_GetTick>
 8009798:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d001      	beq.n	80097ae <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80097aa:	2302      	movs	r3, #2
 80097ac:	e12a      	b.n	8009a04 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <HAL_SPI_Transmit+0x36>
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e122      	b.n	8009a04 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_SPI_Transmit+0x48>
 80097c8:	2302      	movs	r3, #2
 80097ca:	e11b      	b.n	8009a04 <HAL_SPI_Transmit+0x280>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2203      	movs	r2, #3
 80097d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	88fa      	ldrh	r2, [r7, #6]
 80097ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800981a:	d10f      	bne.n	800983c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800982a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800983a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d007      	beq.n	800985a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009862:	d152      	bne.n	800990a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_SPI_Transmit+0xee>
 800986c:	8b7b      	ldrh	r3, [r7, #26]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d145      	bne.n	80098fe <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009876:	881a      	ldrh	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009882:	1c9a      	adds	r2, r3, #2
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009896:	e032      	b.n	80098fe <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d112      	bne.n	80098cc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098aa:	881a      	ldrh	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b6:	1c9a      	adds	r2, r3, #2
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80098ca:	e018      	b.n	80098fe <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098cc:	f7fd f87c 	bl	80069c8 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d803      	bhi.n	80098e4 <HAL_SPI_Transmit+0x160>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e2:	d102      	bne.n	80098ea <HAL_SPI_Transmit+0x166>
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e082      	b.n	8009a04 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009902:	b29b      	uxth	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1c7      	bne.n	8009898 <HAL_SPI_Transmit+0x114>
 8009908:	e053      	b.n	80099b2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_SPI_Transmit+0x194>
 8009912:	8b7b      	ldrh	r3, [r7, #26]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d147      	bne.n	80099a8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	330c      	adds	r3, #12
 8009922:	7812      	ldrb	r2, [r2, #0]
 8009924:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800993e:	e033      	b.n	80099a8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b02      	cmp	r3, #2
 800994c:	d113      	bne.n	8009976 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	330c      	adds	r3, #12
 8009958:	7812      	ldrb	r2, [r2, #0]
 800995a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800996a:	b29b      	uxth	r3, r3
 800996c:	3b01      	subs	r3, #1
 800996e:	b29a      	uxth	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009974:	e018      	b.n	80099a8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009976:	f7fd f827 	bl	80069c8 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d803      	bhi.n	800998e <HAL_SPI_Transmit+0x20a>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d102      	bne.n	8009994 <HAL_SPI_Transmit+0x210>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e02d      	b.n	8009a04 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1c6      	bne.n	8009940 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 f8be 	bl	8009b38 <SPI_EndRxTxTransaction>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099d0:	2300      	movs	r3, #0
 80099d2:	617b      	str	r3, [r7, #20]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009a02:	2300      	movs	r3, #0
  }
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a1a:	b2db      	uxtb	r3, r3
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	4613      	mov	r3, r2
 8009a36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a38:	f7fc ffc6 	bl	80069c8 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	1a9b      	subs	r3, r3, r2
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4413      	add	r3, r2
 8009a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a48:	f7fc ffbe 	bl	80069c8 <HAL_GetTick>
 8009a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a4e:	4b39      	ldr	r3, [pc, #228]	@ (8009b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	015b      	lsls	r3, r3, #5
 8009a54:	0d1b      	lsrs	r3, r3, #20
 8009a56:	69fa      	ldr	r2, [r7, #28]
 8009a58:	fb02 f303 	mul.w	r3, r2, r3
 8009a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a5e:	e054      	b.n	8009b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a66:	d050      	beq.n	8009b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a68:	f7fc ffae 	bl	80069c8 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d902      	bls.n	8009a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d13d      	bne.n	8009afa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a96:	d111      	bne.n	8009abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa0:	d004      	beq.n	8009aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aaa:	d107      	bne.n	8009abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ac4:	d10f      	bne.n	8009ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e017      	b.n	8009b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4013      	ands	r3, r2
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	bf0c      	ite	eq
 8009b1a:	2301      	moveq	r3, #1
 8009b1c:	2300      	movne	r3, #0
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	461a      	mov	r2, r3
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d19b      	bne.n	8009a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3720      	adds	r7, #32
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000010 	.word	0x20000010

08009b38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff ff6a 	bl	8009a28 <SPI_WaitFlagStateUntilTimeout>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5e:	f043 0220 	orr.w	r2, r3, #32
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e032      	b.n	8009bd0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bd8 <SPI_EndRxTxTransaction+0xa0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8009bdc <SPI_EndRxTxTransaction+0xa4>)
 8009b70:	fba2 2303 	umull	r2, r3, r2, r3
 8009b74:	0d5b      	lsrs	r3, r3, #21
 8009b76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b88:	d112      	bne.n	8009bb0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2200      	movs	r2, #0
 8009b92:	2180      	movs	r1, #128	@ 0x80
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff ff47 	bl	8009a28 <SPI_WaitFlagStateUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d016      	beq.n	8009bce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba4:	f043 0220 	orr.w	r2, r3, #32
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e00f      	b.n	8009bd0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bc6:	2b80      	cmp	r3, #128	@ 0x80
 8009bc8:	d0f2      	beq.n	8009bb0 <SPI_EndRxTxTransaction+0x78>
 8009bca:	e000      	b.n	8009bce <SPI_EndRxTxTransaction+0x96>
        break;
 8009bcc:	bf00      	nop
  }

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000010 	.word	0x20000010
 8009bdc:	165e9f81 	.word	0x165e9f81

08009be0 <findslot>:
 8009be0:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <findslot+0x2c>)
 8009be2:	b510      	push	{r4, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	b118      	cbz	r0, 8009bf2 <findslot+0x12>
 8009bea:	6a03      	ldr	r3, [r0, #32]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <findslot+0x12>
 8009bee:	f000 fb75 	bl	800a2dc <__sinit>
 8009bf2:	2c13      	cmp	r4, #19
 8009bf4:	d807      	bhi.n	8009c06 <findslot+0x26>
 8009bf6:	4806      	ldr	r0, [pc, #24]	@ (8009c10 <findslot+0x30>)
 8009bf8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8009bfc:	3201      	adds	r2, #1
 8009bfe:	d002      	beq.n	8009c06 <findslot+0x26>
 8009c00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8009c04:	bd10      	pop	{r4, pc}
 8009c06:	2000      	movs	r0, #0
 8009c08:	e7fc      	b.n	8009c04 <findslot+0x24>
 8009c0a:	bf00      	nop
 8009c0c:	20000030 	.word	0x20000030
 8009c10:	20025d48 	.word	0x20025d48

08009c14 <error>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	f000 fd2c 	bl	800a674 <__errno>
 8009c1c:	2613      	movs	r6, #19
 8009c1e:	4605      	mov	r5, r0
 8009c20:	2700      	movs	r7, #0
 8009c22:	4630      	mov	r0, r6
 8009c24:	4639      	mov	r1, r7
 8009c26:	beab      	bkpt	0x00ab
 8009c28:	4606      	mov	r6, r0
 8009c2a:	602e      	str	r6, [r5, #0]
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c30 <checkerror>:
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d101      	bne.n	8009c38 <checkerror+0x8>
 8009c34:	f7ff bfee 	b.w	8009c14 <error>
 8009c38:	4770      	bx	lr

08009c3a <_swiread>:
 8009c3a:	b530      	push	{r4, r5, lr}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009c42:	9203      	str	r2, [sp, #12]
 8009c44:	2406      	movs	r4, #6
 8009c46:	ad01      	add	r5, sp, #4
 8009c48:	4620      	mov	r0, r4
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	beab      	bkpt	0x00ab
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4620      	mov	r0, r4
 8009c52:	f7ff ffed 	bl	8009c30 <checkerror>
 8009c56:	b005      	add	sp, #20
 8009c58:	bd30      	pop	{r4, r5, pc}

08009c5a <_read>:
 8009c5a:	b570      	push	{r4, r5, r6, lr}
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	4614      	mov	r4, r2
 8009c60:	f7ff ffbe 	bl	8009be0 <findslot>
 8009c64:	4605      	mov	r5, r0
 8009c66:	b930      	cbnz	r0, 8009c76 <_read+0x1c>
 8009c68:	f000 fd04 	bl	800a674 <__errno>
 8009c6c:	2309      	movs	r3, #9
 8009c6e:	6003      	str	r3, [r0, #0]
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	6800      	ldr	r0, [r0, #0]
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	f7ff ffdd 	bl	8009c3a <_swiread>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d0f5      	beq.n	8009c70 <_read+0x16>
 8009c84:	686b      	ldr	r3, [r5, #4]
 8009c86:	1a20      	subs	r0, r4, r0
 8009c88:	4403      	add	r3, r0
 8009c8a:	606b      	str	r3, [r5, #4]
 8009c8c:	e7f2      	b.n	8009c74 <_read+0x1a>

08009c8e <_swilseek>:
 8009c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c90:	460c      	mov	r4, r1
 8009c92:	4616      	mov	r6, r2
 8009c94:	f7ff ffa4 	bl	8009be0 <findslot>
 8009c98:	4605      	mov	r5, r0
 8009c9a:	b940      	cbnz	r0, 8009cae <_swilseek+0x20>
 8009c9c:	f000 fcea 	bl	800a674 <__errno>
 8009ca0:	2309      	movs	r3, #9
 8009ca2:	6003      	str	r3, [r0, #0]
 8009ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ca8:	4620      	mov	r0, r4
 8009caa:	b003      	add	sp, #12
 8009cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cae:	2e02      	cmp	r6, #2
 8009cb0:	d903      	bls.n	8009cba <_swilseek+0x2c>
 8009cb2:	f000 fcdf 	bl	800a674 <__errno>
 8009cb6:	2316      	movs	r3, #22
 8009cb8:	e7f3      	b.n	8009ca2 <_swilseek+0x14>
 8009cba:	2e01      	cmp	r6, #1
 8009cbc:	d112      	bne.n	8009ce4 <_swilseek+0x56>
 8009cbe:	6843      	ldr	r3, [r0, #4]
 8009cc0:	18e4      	adds	r4, r4, r3
 8009cc2:	d4f6      	bmi.n	8009cb2 <_swilseek+0x24>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	260a      	movs	r6, #10
 8009cc8:	e9cd 3400 	strd	r3, r4, [sp]
 8009ccc:	466f      	mov	r7, sp
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	beab      	bkpt	0x00ab
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7ff ffaa 	bl	8009c30 <checkerror>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	dbe1      	blt.n	8009ca4 <_swilseek+0x16>
 8009ce0:	606c      	str	r4, [r5, #4]
 8009ce2:	e7e1      	b.n	8009ca8 <_swilseek+0x1a>
 8009ce4:	2e02      	cmp	r6, #2
 8009ce6:	6803      	ldr	r3, [r0, #0]
 8009ce8:	d1ec      	bne.n	8009cc4 <_swilseek+0x36>
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	260c      	movs	r6, #12
 8009cee:	466f      	mov	r7, sp
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	beab      	bkpt	0x00ab
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff ff99 	bl	8009c30 <checkerror>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d0d0      	beq.n	8009ca4 <_swilseek+0x16>
 8009d02:	4404      	add	r4, r0
 8009d04:	e7de      	b.n	8009cc4 <_swilseek+0x36>

08009d06 <_lseek>:
 8009d06:	f7ff bfc2 	b.w	8009c8e <_swilseek>

08009d0a <_swiwrite>:
 8009d0a:	b530      	push	{r4, r5, lr}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009d12:	9203      	str	r2, [sp, #12]
 8009d14:	2405      	movs	r4, #5
 8009d16:	ad01      	add	r5, sp, #4
 8009d18:	4620      	mov	r0, r4
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	beab      	bkpt	0x00ab
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7ff ff85 	bl	8009c30 <checkerror>
 8009d26:	b005      	add	sp, #20
 8009d28:	bd30      	pop	{r4, r5, pc}

08009d2a <_write>:
 8009d2a:	b570      	push	{r4, r5, r6, lr}
 8009d2c:	460e      	mov	r6, r1
 8009d2e:	4615      	mov	r5, r2
 8009d30:	f7ff ff56 	bl	8009be0 <findslot>
 8009d34:	4604      	mov	r4, r0
 8009d36:	b930      	cbnz	r0, 8009d46 <_write+0x1c>
 8009d38:	f000 fc9c 	bl	800a674 <__errno>
 8009d3c:	2309      	movs	r3, #9
 8009d3e:	6003      	str	r3, [r0, #0]
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	6800      	ldr	r0, [r0, #0]
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	f7ff ffdd 	bl	8009d0a <_swiwrite>
 8009d50:	1e03      	subs	r3, r0, #0
 8009d52:	dbf5      	blt.n	8009d40 <_write+0x16>
 8009d54:	6862      	ldr	r2, [r4, #4]
 8009d56:	1ae8      	subs	r0, r5, r3
 8009d58:	4402      	add	r2, r0
 8009d5a:	42ab      	cmp	r3, r5
 8009d5c:	6062      	str	r2, [r4, #4]
 8009d5e:	d1f1      	bne.n	8009d44 <_write+0x1a>
 8009d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d64:	2000      	movs	r0, #0
 8009d66:	f7ff bf55 	b.w	8009c14 <error>

08009d6a <_swiclose>:
 8009d6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d6c:	2402      	movs	r4, #2
 8009d6e:	9001      	str	r0, [sp, #4]
 8009d70:	ad01      	add	r5, sp, #4
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	beab      	bkpt	0x00ab
 8009d78:	4604      	mov	r4, r0
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff ff58 	bl	8009c30 <checkerror>
 8009d80:	b003      	add	sp, #12
 8009d82:	bd30      	pop	{r4, r5, pc}

08009d84 <_close>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4605      	mov	r5, r0
 8009d88:	f7ff ff2a 	bl	8009be0 <findslot>
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	b930      	cbnz	r0, 8009d9e <_close+0x1a>
 8009d90:	f000 fc70 	bl	800a674 <__errno>
 8009d94:	2309      	movs	r3, #9
 8009d96:	6003      	str	r3, [r0, #0]
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
 8009d9e:	3d01      	subs	r5, #1
 8009da0:	2d01      	cmp	r5, #1
 8009da2:	d809      	bhi.n	8009db8 <_close+0x34>
 8009da4:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <_close+0x40>)
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d104      	bne.n	8009db8 <_close+0x34>
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	2000      	movs	r0, #0
 8009db6:	e7f1      	b.n	8009d9c <_close+0x18>
 8009db8:	6820      	ldr	r0, [r4, #0]
 8009dba:	f7ff ffd6 	bl	8009d6a <_swiclose>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d0f5      	beq.n	8009dae <_close+0x2a>
 8009dc2:	e7eb      	b.n	8009d9c <_close+0x18>
 8009dc4:	20025d48 	.word	0x20025d48

08009dc8 <_swistat>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	460c      	mov	r4, r1
 8009dcc:	f7ff ff08 	bl	8009be0 <findslot>
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	b930      	cbnz	r0, 8009de2 <_swistat+0x1a>
 8009dd4:	f000 fc4e 	bl	800a674 <__errno>
 8009dd8:	2309      	movs	r3, #9
 8009dda:	6003      	str	r3, [r0, #0]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009de8:	6063      	str	r3, [r4, #4]
 8009dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dee:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009df0:	260c      	movs	r6, #12
 8009df2:	4630      	mov	r0, r6
 8009df4:	4629      	mov	r1, r5
 8009df6:	beab      	bkpt	0x00ab
 8009df8:	4605      	mov	r5, r0
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f7ff ff18 	bl	8009c30 <checkerror>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d0eb      	beq.n	8009ddc <_swistat+0x14>
 8009e04:	6120      	str	r0, [r4, #16]
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7ea      	b.n	8009de0 <_swistat+0x18>

08009e0a <_fstat>:
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	2100      	movs	r1, #0
 8009e10:	4604      	mov	r4, r0
 8009e12:	2258      	movs	r2, #88	@ 0x58
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fbdf 	bl	800a5d8 <memset>
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e22:	f7ff bfd1 	b.w	8009dc8 <_swistat>

08009e26 <_stat>:
 8009e26:	b538      	push	{r3, r4, r5, lr}
 8009e28:	460d      	mov	r5, r1
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	2258      	movs	r2, #88	@ 0x58
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4628      	mov	r0, r5
 8009e32:	f000 fbd1 	bl	800a5d8 <memset>
 8009e36:	4620      	mov	r0, r4
 8009e38:	2100      	movs	r1, #0
 8009e3a:	f000 f811 	bl	8009e60 <_swiopen>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	4604      	mov	r4, r0
 8009e42:	d00b      	beq.n	8009e5c <_stat+0x36>
 8009e44:	686b      	ldr	r3, [r5, #4]
 8009e46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009e4a:	606b      	str	r3, [r5, #4]
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7ff ffbb 	bl	8009dc8 <_swistat>
 8009e52:	4605      	mov	r5, r0
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7ff ff95 	bl	8009d84 <_close>
 8009e5a:	462c      	mov	r4, r5
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}

08009e60 <_swiopen>:
 8009e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e64:	4f29      	ldr	r7, [pc, #164]	@ (8009f0c <_swiopen+0xac>)
 8009e66:	b096      	sub	sp, #88	@ 0x58
 8009e68:	4682      	mov	sl, r0
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	2400      	movs	r4, #0
 8009e6e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8009e72:	3301      	adds	r3, #1
 8009e74:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8009e78:	d00c      	beq.n	8009e94 <_swiopen+0x34>
 8009e7a:	3401      	adds	r4, #1
 8009e7c:	2c14      	cmp	r4, #20
 8009e7e:	d1f6      	bne.n	8009e6e <_swiopen+0xe>
 8009e80:	f000 fbf8 	bl	800a674 <__errno>
 8009e84:	2318      	movs	r3, #24
 8009e86:	6003      	str	r3, [r0, #0]
 8009e88:	f04f 34ff 	mov.w	r4, #4294967295
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	b016      	add	sp, #88	@ 0x58
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8009e98:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009e9c:	46e9      	mov	r9, sp
 8009e9e:	d109      	bne.n	8009eb4 <_swiopen+0x54>
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f7ff ffbf 	bl	8009e26 <_stat>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d003      	beq.n	8009eb4 <_swiopen+0x54>
 8009eac:	f000 fbe2 	bl	800a674 <__errno>
 8009eb0:	2311      	movs	r3, #17
 8009eb2:	e7e8      	b.n	8009e86 <_swiopen+0x26>
 8009eb4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8009eb8:	f240 6301 	movw	r3, #1537	@ 0x601
 8009ebc:	07b2      	lsls	r2, r6, #30
 8009ebe:	bf48      	it	mi
 8009ec0:	f045 0502 	orrmi.w	r5, r5, #2
 8009ec4:	421e      	tst	r6, r3
 8009ec6:	bf18      	it	ne
 8009ec8:	f045 0504 	orrne.w	r5, r5, #4
 8009ecc:	0733      	lsls	r3, r6, #28
 8009ece:	bf48      	it	mi
 8009ed0:	f025 0504 	bicmi.w	r5, r5, #4
 8009ed4:	4650      	mov	r0, sl
 8009ed6:	bf48      	it	mi
 8009ed8:	f045 0508 	orrmi.w	r5, r5, #8
 8009edc:	f8cd a000 	str.w	sl, [sp]
 8009ee0:	f7f6 f986 	bl	80001f0 <strlen>
 8009ee4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8009ee8:	2501      	movs	r5, #1
 8009eea:	4628      	mov	r0, r5
 8009eec:	4649      	mov	r1, r9
 8009eee:	beab      	bkpt	0x00ab
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	db05      	blt.n	8009f02 <_swiopen+0xa2>
 8009ef6:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8009efa:	4447      	add	r7, r8
 8009efc:	2300      	movs	r3, #0
 8009efe:	607b      	str	r3, [r7, #4]
 8009f00:	e7c4      	b.n	8009e8c <_swiopen+0x2c>
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7ff fe86 	bl	8009c14 <error>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	e7bf      	b.n	8009e8c <_swiopen+0x2c>
 8009f0c:	20025d48 	.word	0x20025d48

08009f10 <_get_semihosting_exts>:
 8009f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	4829      	ldr	r0, [pc, #164]	@ (8009fc0 <_get_semihosting_exts+0xb0>)
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4615      	mov	r5, r2
 8009f1e:	f7ff ff9f 	bl	8009e60 <_swiopen>
 8009f22:	462a      	mov	r2, r5
 8009f24:	4604      	mov	r4, r0
 8009f26:	2100      	movs	r1, #0
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 fb55 	bl	800a5d8 <memset>
 8009f2e:	1c63      	adds	r3, r4, #1
 8009f30:	d014      	beq.n	8009f5c <_get_semihosting_exts+0x4c>
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7ff fe54 	bl	8009be0 <findslot>
 8009f38:	f04f 080c 	mov.w	r8, #12
 8009f3c:	4681      	mov	r9, r0
 8009f3e:	4640      	mov	r0, r8
 8009f40:	4649      	mov	r1, r9
 8009f42:	beab      	bkpt	0x00ab
 8009f44:	4680      	mov	r8, r0
 8009f46:	4640      	mov	r0, r8
 8009f48:	f7ff fe72 	bl	8009c30 <checkerror>
 8009f4c:	2803      	cmp	r0, #3
 8009f4e:	dd02      	ble.n	8009f56 <_get_semihosting_exts+0x46>
 8009f50:	1ec3      	subs	r3, r0, #3
 8009f52:	42ab      	cmp	r3, r5
 8009f54:	dc07      	bgt.n	8009f66 <_get_semihosting_exts+0x56>
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7ff ff14 	bl	8009d84 <_close>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b003      	add	sp, #12
 8009f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f66:	2204      	movs	r2, #4
 8009f68:	eb0d 0102 	add.w	r1, sp, r2
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f7ff fe74 	bl	8009c5a <_read>
 8009f72:	2803      	cmp	r0, #3
 8009f74:	ddef      	ble.n	8009f56 <_get_semihosting_exts+0x46>
 8009f76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009f7a:	2b53      	cmp	r3, #83	@ 0x53
 8009f7c:	d1eb      	bne.n	8009f56 <_get_semihosting_exts+0x46>
 8009f7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009f82:	2b48      	cmp	r3, #72	@ 0x48
 8009f84:	d1e7      	bne.n	8009f56 <_get_semihosting_exts+0x46>
 8009f86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009f8a:	2b46      	cmp	r3, #70	@ 0x46
 8009f8c:	d1e3      	bne.n	8009f56 <_get_semihosting_exts+0x46>
 8009f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009f92:	2b42      	cmp	r3, #66	@ 0x42
 8009f94:	d1df      	bne.n	8009f56 <_get_semihosting_exts+0x46>
 8009f96:	2201      	movs	r2, #1
 8009f98:	4639      	mov	r1, r7
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f7ff fe77 	bl	8009c8e <_swilseek>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	dbd8      	blt.n	8009f56 <_get_semihosting_exts+0x46>
 8009fa4:	462a      	mov	r2, r5
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f7ff fe56 	bl	8009c5a <_read>
 8009fae:	4605      	mov	r5, r0
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff fee7 	bl	8009d84 <_close>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7ff fe3a 	bl	8009c30 <checkerror>
 8009fbc:	e7d0      	b.n	8009f60 <_get_semihosting_exts+0x50>
 8009fbe:	bf00      	nop
 8009fc0:	0800c334 	.word	0x0800c334

08009fc4 <initialise_semihosting_exts>:
 8009fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fc6:	4d0a      	ldr	r5, [pc, #40]	@ (8009ff0 <initialise_semihosting_exts+0x2c>)
 8009fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8009ff4 <initialise_semihosting_exts+0x30>)
 8009fca:	2100      	movs	r1, #0
 8009fcc:	2201      	movs	r2, #1
 8009fce:	a801      	add	r0, sp, #4
 8009fd0:	6029      	str	r1, [r5, #0]
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	f7ff ff9c 	bl	8009f10 <_get_semihosting_exts>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	dd07      	ble.n	8009fec <initialise_semihosting_exts+0x28>
 8009fdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009fe0:	f003 0201 	and.w	r2, r3, #1
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	b003      	add	sp, #12
 8009fee:	bd30      	pop	{r4, r5, pc}
 8009ff0:	20000020 	.word	0x20000020
 8009ff4:	2000001c 	.word	0x2000001c

08009ff8 <_has_ext_stdout_stderr>:
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	4c04      	ldr	r4, [pc, #16]	@ (800a00c <_has_ext_stdout_stderr+0x14>)
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da01      	bge.n	800a006 <_has_ext_stdout_stderr+0xe>
 800a002:	f7ff ffdf 	bl	8009fc4 <initialise_semihosting_exts>
 800a006:	6820      	ldr	r0, [r4, #0]
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	bf00      	nop
 800a00c:	2000001c 	.word	0x2000001c

0800a010 <initialise_monitor_handles>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	b085      	sub	sp, #20
 800a016:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800a0c8 <initialise_monitor_handles+0xb8>
 800a01a:	f8cd 9004 	str.w	r9, [sp, #4]
 800a01e:	2303      	movs	r3, #3
 800a020:	2400      	movs	r4, #0
 800a022:	9303      	str	r3, [sp, #12]
 800a024:	af01      	add	r7, sp, #4
 800a026:	9402      	str	r4, [sp, #8]
 800a028:	2501      	movs	r5, #1
 800a02a:	4628      	mov	r0, r5
 800a02c:	4639      	mov	r1, r7
 800a02e:	beab      	bkpt	0x00ab
 800a030:	4605      	mov	r5, r0
 800a032:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800a0cc <initialise_monitor_handles+0xbc>
 800a036:	4623      	mov	r3, r4
 800a038:	4c20      	ldr	r4, [pc, #128]	@ (800a0bc <initialise_monitor_handles+0xac>)
 800a03a:	f8c8 5000 	str.w	r5, [r8]
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800a046:	3301      	adds	r3, #1
 800a048:	2b14      	cmp	r3, #20
 800a04a:	d1fa      	bne.n	800a042 <initialise_monitor_handles+0x32>
 800a04c:	f7ff ffd4 	bl	8009ff8 <_has_ext_stdout_stderr>
 800a050:	4d1b      	ldr	r5, [pc, #108]	@ (800a0c0 <initialise_monitor_handles+0xb0>)
 800a052:	b1d0      	cbz	r0, 800a08a <initialise_monitor_handles+0x7a>
 800a054:	f04f 0a03 	mov.w	sl, #3
 800a058:	2304      	movs	r3, #4
 800a05a:	f8cd 9004 	str.w	r9, [sp, #4]
 800a05e:	2601      	movs	r6, #1
 800a060:	f8cd a00c 	str.w	sl, [sp, #12]
 800a064:	9302      	str	r3, [sp, #8]
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	beab      	bkpt	0x00ab
 800a06c:	4683      	mov	fp, r0
 800a06e:	4b15      	ldr	r3, [pc, #84]	@ (800a0c4 <initialise_monitor_handles+0xb4>)
 800a070:	f8cd 9004 	str.w	r9, [sp, #4]
 800a074:	f8c3 b000 	str.w	fp, [r3]
 800a078:	2308      	movs	r3, #8
 800a07a:	f8cd a00c 	str.w	sl, [sp, #12]
 800a07e:	9302      	str	r3, [sp, #8]
 800a080:	4630      	mov	r0, r6
 800a082:	4639      	mov	r1, r7
 800a084:	beab      	bkpt	0x00ab
 800a086:	4606      	mov	r6, r0
 800a088:	602e      	str	r6, [r5, #0]
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	3301      	adds	r3, #1
 800a08e:	bf02      	ittt	eq
 800a090:	4b0c      	ldreq	r3, [pc, #48]	@ (800a0c4 <initialise_monitor_handles+0xb4>)
 800a092:	681b      	ldreq	r3, [r3, #0]
 800a094:	602b      	streq	r3, [r5, #0]
 800a096:	2600      	movs	r6, #0
 800a098:	f8d8 3000 	ldr.w	r3, [r8]
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	6066      	str	r6, [r4, #4]
 800a0a0:	f7ff ffaa 	bl	8009ff8 <_has_ext_stdout_stderr>
 800a0a4:	b130      	cbz	r0, 800a0b4 <initialise_monitor_handles+0xa4>
 800a0a6:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <initialise_monitor_handles+0xb4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a0ae:	682b      	ldr	r3, [r5, #0]
 800a0b0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a0b4:	b005      	add	sp, #20
 800a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20025d48 	.word	0x20025d48
 800a0c0:	20025d3c 	.word	0x20025d3c
 800a0c4:	20025d40 	.word	0x20025d40
 800a0c8:	0800c34a 	.word	0x0800c34a
 800a0cc:	20025d44 	.word	0x20025d44

0800a0d0 <_isatty>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	f7ff fd85 	bl	8009be0 <findslot>
 800a0d6:	2409      	movs	r4, #9
 800a0d8:	4605      	mov	r5, r0
 800a0da:	b920      	cbnz	r0, 800a0e6 <_isatty+0x16>
 800a0dc:	f000 faca 	bl	800a674 <__errno>
 800a0e0:	6004      	str	r4, [r0, #0]
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	bd70      	pop	{r4, r5, r6, pc}
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	beab      	bkpt	0x00ab
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	2c01      	cmp	r4, #1
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	d0f7      	beq.n	800a0e4 <_isatty+0x14>
 800a0f4:	f000 fabe 	bl	800a674 <__errno>
 800a0f8:	2513      	movs	r5, #19
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	2600      	movs	r6, #0
 800a0fe:	4628      	mov	r0, r5
 800a100:	4631      	mov	r1, r6
 800a102:	beab      	bkpt	0x00ab
 800a104:	4605      	mov	r5, r0
 800a106:	6025      	str	r5, [r4, #0]
 800a108:	e7eb      	b.n	800a0e2 <_isatty+0x12>

0800a10a <__itoa>:
 800a10a:	1e93      	subs	r3, r2, #2
 800a10c:	2b22      	cmp	r3, #34	@ 0x22
 800a10e:	b510      	push	{r4, lr}
 800a110:	460c      	mov	r4, r1
 800a112:	d904      	bls.n	800a11e <__itoa+0x14>
 800a114:	2300      	movs	r3, #0
 800a116:	700b      	strb	r3, [r1, #0]
 800a118:	461c      	mov	r4, r3
 800a11a:	4620      	mov	r0, r4
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	2a0a      	cmp	r2, #10
 800a120:	d109      	bne.n	800a136 <__itoa+0x2c>
 800a122:	2800      	cmp	r0, #0
 800a124:	da07      	bge.n	800a136 <__itoa+0x2c>
 800a126:	232d      	movs	r3, #45	@ 0x2d
 800a128:	700b      	strb	r3, [r1, #0]
 800a12a:	4240      	negs	r0, r0
 800a12c:	2101      	movs	r1, #1
 800a12e:	4421      	add	r1, r4
 800a130:	f000 f806 	bl	800a140 <__utoa>
 800a134:	e7f1      	b.n	800a11a <__itoa+0x10>
 800a136:	2100      	movs	r1, #0
 800a138:	e7f9      	b.n	800a12e <__itoa+0x24>

0800a13a <itoa>:
 800a13a:	f7ff bfe6 	b.w	800a10a <__itoa>
	...

0800a140 <__utoa>:
 800a140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a142:	4c1f      	ldr	r4, [pc, #124]	@ (800a1c0 <__utoa+0x80>)
 800a144:	b08b      	sub	sp, #44	@ 0x2c
 800a146:	4605      	mov	r5, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	466e      	mov	r6, sp
 800a14c:	f104 0c20 	add.w	ip, r4, #32
 800a150:	6820      	ldr	r0, [r4, #0]
 800a152:	6861      	ldr	r1, [r4, #4]
 800a154:	4637      	mov	r7, r6
 800a156:	c703      	stmia	r7!, {r0, r1}
 800a158:	3408      	adds	r4, #8
 800a15a:	4564      	cmp	r4, ip
 800a15c:	463e      	mov	r6, r7
 800a15e:	d1f7      	bne.n	800a150 <__utoa+0x10>
 800a160:	7921      	ldrb	r1, [r4, #4]
 800a162:	7139      	strb	r1, [r7, #4]
 800a164:	1e91      	subs	r1, r2, #2
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	6038      	str	r0, [r7, #0]
 800a16a:	2922      	cmp	r1, #34	@ 0x22
 800a16c:	f04f 0100 	mov.w	r1, #0
 800a170:	d904      	bls.n	800a17c <__utoa+0x3c>
 800a172:	7019      	strb	r1, [r3, #0]
 800a174:	460b      	mov	r3, r1
 800a176:	4618      	mov	r0, r3
 800a178:	b00b      	add	sp, #44	@ 0x2c
 800a17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17c:	1e58      	subs	r0, r3, #1
 800a17e:	4684      	mov	ip, r0
 800a180:	fbb5 f7f2 	udiv	r7, r5, r2
 800a184:	fb02 5617 	mls	r6, r2, r7, r5
 800a188:	3628      	adds	r6, #40	@ 0x28
 800a18a:	446e      	add	r6, sp
 800a18c:	460c      	mov	r4, r1
 800a18e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a192:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a196:	462e      	mov	r6, r5
 800a198:	42b2      	cmp	r2, r6
 800a19a:	f101 0101 	add.w	r1, r1, #1
 800a19e:	463d      	mov	r5, r7
 800a1a0:	d9ee      	bls.n	800a180 <__utoa+0x40>
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	545a      	strb	r2, [r3, r1]
 800a1a6:	1919      	adds	r1, r3, r4
 800a1a8:	1aa5      	subs	r5, r4, r2
 800a1aa:	42aa      	cmp	r2, r5
 800a1ac:	dae3      	bge.n	800a176 <__utoa+0x36>
 800a1ae:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a1b2:	780e      	ldrb	r6, [r1, #0]
 800a1b4:	7006      	strb	r6, [r0, #0]
 800a1b6:	3201      	adds	r2, #1
 800a1b8:	f801 5901 	strb.w	r5, [r1], #-1
 800a1bc:	e7f4      	b.n	800a1a8 <__utoa+0x68>
 800a1be:	bf00      	nop
 800a1c0:	0800c34e 	.word	0x0800c34e

0800a1c4 <std>:
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d2:	6083      	str	r3, [r0, #8]
 800a1d4:	8181      	strh	r1, [r0, #12]
 800a1d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1d8:	81c2      	strh	r2, [r0, #14]
 800a1da:	6183      	str	r3, [r0, #24]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2208      	movs	r2, #8
 800a1e0:	305c      	adds	r0, #92	@ 0x5c
 800a1e2:	f000 f9f9 	bl	800a5d8 <memset>
 800a1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a21c <std+0x58>)
 800a1e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <std+0x5c>)
 800a1ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <std+0x60>)
 800a1f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <std+0x64>)
 800a1f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a22c <std+0x68>)
 800a1f8:	6224      	str	r4, [r4, #32]
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	d006      	beq.n	800a20c <std+0x48>
 800a1fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a202:	4294      	cmp	r4, r2
 800a204:	d002      	beq.n	800a20c <std+0x48>
 800a206:	33d0      	adds	r3, #208	@ 0xd0
 800a208:	429c      	cmp	r4, r3
 800a20a:	d105      	bne.n	800a218 <std+0x54>
 800a20c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	f000 ba58 	b.w	800a6c8 <__retarget_lock_init_recursive>
 800a218:	bd10      	pop	{r4, pc}
 800a21a:	bf00      	nop
 800a21c:	0800a429 	.word	0x0800a429
 800a220:	0800a44b 	.word	0x0800a44b
 800a224:	0800a483 	.word	0x0800a483
 800a228:	0800a4a7 	.word	0x0800a4a7
 800a22c:	20025de8 	.word	0x20025de8

0800a230 <stdio_exit_handler>:
 800a230:	4a02      	ldr	r2, [pc, #8]	@ (800a23c <stdio_exit_handler+0xc>)
 800a232:	4903      	ldr	r1, [pc, #12]	@ (800a240 <stdio_exit_handler+0x10>)
 800a234:	4803      	ldr	r0, [pc, #12]	@ (800a244 <stdio_exit_handler+0x14>)
 800a236:	f000 b869 	b.w	800a30c <_fwalk_sglue>
 800a23a:	bf00      	nop
 800a23c:	20000024 	.word	0x20000024
 800a240:	0800af69 	.word	0x0800af69
 800a244:	20000034 	.word	0x20000034

0800a248 <cleanup_stdio>:
 800a248:	6841      	ldr	r1, [r0, #4]
 800a24a:	4b0c      	ldr	r3, [pc, #48]	@ (800a27c <cleanup_stdio+0x34>)
 800a24c:	4299      	cmp	r1, r3
 800a24e:	b510      	push	{r4, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	d001      	beq.n	800a258 <cleanup_stdio+0x10>
 800a254:	f000 fe88 	bl	800af68 <_fflush_r>
 800a258:	68a1      	ldr	r1, [r4, #8]
 800a25a:	4b09      	ldr	r3, [pc, #36]	@ (800a280 <cleanup_stdio+0x38>)
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <cleanup_stdio+0x1e>
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fe81 	bl	800af68 <_fflush_r>
 800a266:	68e1      	ldr	r1, [r4, #12]
 800a268:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <cleanup_stdio+0x3c>)
 800a26a:	4299      	cmp	r1, r3
 800a26c:	d004      	beq.n	800a278 <cleanup_stdio+0x30>
 800a26e:	4620      	mov	r0, r4
 800a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a274:	f000 be78 	b.w	800af68 <_fflush_r>
 800a278:	bd10      	pop	{r4, pc}
 800a27a:	bf00      	nop
 800a27c:	20025de8 	.word	0x20025de8
 800a280:	20025e50 	.word	0x20025e50
 800a284:	20025eb8 	.word	0x20025eb8

0800a288 <global_stdio_init.part.0>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <global_stdio_init.part.0+0x30>)
 800a28c:	4c0b      	ldr	r4, [pc, #44]	@ (800a2bc <global_stdio_init.part.0+0x34>)
 800a28e:	4a0c      	ldr	r2, [pc, #48]	@ (800a2c0 <global_stdio_init.part.0+0x38>)
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	4620      	mov	r0, r4
 800a294:	2200      	movs	r2, #0
 800a296:	2104      	movs	r1, #4
 800a298:	f7ff ff94 	bl	800a1c4 <std>
 800a29c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	2109      	movs	r1, #9
 800a2a4:	f7ff ff8e 	bl	800a1c4 <std>
 800a2a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b2:	2112      	movs	r1, #18
 800a2b4:	f7ff bf86 	b.w	800a1c4 <std>
 800a2b8:	20025f20 	.word	0x20025f20
 800a2bc:	20025de8 	.word	0x20025de8
 800a2c0:	0800a231 	.word	0x0800a231

0800a2c4 <__sfp_lock_acquire>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	@ (800a2cc <__sfp_lock_acquire+0x8>)
 800a2c6:	f000 ba00 	b.w	800a6ca <__retarget_lock_acquire_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	20025f29 	.word	0x20025f29

0800a2d0 <__sfp_lock_release>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	@ (800a2d8 <__sfp_lock_release+0x8>)
 800a2d2:	f000 b9fb 	b.w	800a6cc <__retarget_lock_release_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	20025f29 	.word	0x20025f29

0800a2dc <__sinit>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f7ff fff0 	bl	800a2c4 <__sfp_lock_acquire>
 800a2e4:	6a23      	ldr	r3, [r4, #32]
 800a2e6:	b11b      	cbz	r3, 800a2f0 <__sinit+0x14>
 800a2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ec:	f7ff bff0 	b.w	800a2d0 <__sfp_lock_release>
 800a2f0:	4b04      	ldr	r3, [pc, #16]	@ (800a304 <__sinit+0x28>)
 800a2f2:	6223      	str	r3, [r4, #32]
 800a2f4:	4b04      	ldr	r3, [pc, #16]	@ (800a308 <__sinit+0x2c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f5      	bne.n	800a2e8 <__sinit+0xc>
 800a2fc:	f7ff ffc4 	bl	800a288 <global_stdio_init.part.0>
 800a300:	e7f2      	b.n	800a2e8 <__sinit+0xc>
 800a302:	bf00      	nop
 800a304:	0800a249 	.word	0x0800a249
 800a308:	20025f20 	.word	0x20025f20

0800a30c <_fwalk_sglue>:
 800a30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a310:	4607      	mov	r7, r0
 800a312:	4688      	mov	r8, r1
 800a314:	4614      	mov	r4, r2
 800a316:	2600      	movs	r6, #0
 800a318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a31c:	f1b9 0901 	subs.w	r9, r9, #1
 800a320:	d505      	bpl.n	800a32e <_fwalk_sglue+0x22>
 800a322:	6824      	ldr	r4, [r4, #0]
 800a324:	2c00      	cmp	r4, #0
 800a326:	d1f7      	bne.n	800a318 <_fwalk_sglue+0xc>
 800a328:	4630      	mov	r0, r6
 800a32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d907      	bls.n	800a344 <_fwalk_sglue+0x38>
 800a334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a338:	3301      	adds	r3, #1
 800a33a:	d003      	beq.n	800a344 <_fwalk_sglue+0x38>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4638      	mov	r0, r7
 800a340:	47c0      	blx	r8
 800a342:	4306      	orrs	r6, r0
 800a344:	3568      	adds	r5, #104	@ 0x68
 800a346:	e7e9      	b.n	800a31c <_fwalk_sglue+0x10>

0800a348 <iprintf>:
 800a348:	b40f      	push	{r0, r1, r2, r3}
 800a34a:	b507      	push	{r0, r1, r2, lr}
 800a34c:	4906      	ldr	r1, [pc, #24]	@ (800a368 <iprintf+0x20>)
 800a34e:	ab04      	add	r3, sp, #16
 800a350:	6808      	ldr	r0, [r1, #0]
 800a352:	f853 2b04 	ldr.w	r2, [r3], #4
 800a356:	6881      	ldr	r1, [r0, #8]
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	f000 fadb 	bl	800a914 <_vfiprintf_r>
 800a35e:	b003      	add	sp, #12
 800a360:	f85d eb04 	ldr.w	lr, [sp], #4
 800a364:	b004      	add	sp, #16
 800a366:	4770      	bx	lr
 800a368:	20000030 	.word	0x20000030

0800a36c <_puts_r>:
 800a36c:	6a03      	ldr	r3, [r0, #32]
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	6884      	ldr	r4, [r0, #8]
 800a372:	4605      	mov	r5, r0
 800a374:	460e      	mov	r6, r1
 800a376:	b90b      	cbnz	r3, 800a37c <_puts_r+0x10>
 800a378:	f7ff ffb0 	bl	800a2dc <__sinit>
 800a37c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d405      	bmi.n	800a38e <_puts_r+0x22>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	0598      	lsls	r0, r3, #22
 800a386:	d402      	bmi.n	800a38e <_puts_r+0x22>
 800a388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a38a:	f000 f99e 	bl	800a6ca <__retarget_lock_acquire_recursive>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	0719      	lsls	r1, r3, #28
 800a392:	d502      	bpl.n	800a39a <_puts_r+0x2e>
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d135      	bne.n	800a406 <_puts_r+0x9a>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4628      	mov	r0, r5
 800a39e:	f000 f8c5 	bl	800a52c <__swsetup_r>
 800a3a2:	b380      	cbz	r0, 800a406 <_puts_r+0x9a>
 800a3a4:	f04f 35ff 	mov.w	r5, #4294967295
 800a3a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3aa:	07da      	lsls	r2, r3, #31
 800a3ac:	d405      	bmi.n	800a3ba <_puts_r+0x4e>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	059b      	lsls	r3, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_puts_r+0x4e>
 800a3b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3b6:	f000 f989 	bl	800a6cc <__retarget_lock_release_recursive>
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	da04      	bge.n	800a3cc <_puts_r+0x60>
 800a3c2:	69a2      	ldr	r2, [r4, #24]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	dc17      	bgt.n	800a3f8 <_puts_r+0x8c>
 800a3c8:	290a      	cmp	r1, #10
 800a3ca:	d015      	beq.n	800a3f8 <_puts_r+0x8c>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	6022      	str	r2, [r4, #0]
 800a3d2:	7019      	strb	r1, [r3, #0]
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	60a3      	str	r3, [r4, #8]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d1ed      	bne.n	800a3be <_puts_r+0x52>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da11      	bge.n	800a40a <_puts_r+0x9e>
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	210a      	movs	r1, #10
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f000 f85f 	bl	800a4ae <__swbuf_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d0d7      	beq.n	800a3a4 <_puts_r+0x38>
 800a3f4:	250a      	movs	r5, #10
 800a3f6:	e7d7      	b.n	800a3a8 <_puts_r+0x3c>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 f857 	bl	800a4ae <__swbuf_r>
 800a400:	3001      	adds	r0, #1
 800a402:	d1e7      	bne.n	800a3d4 <_puts_r+0x68>
 800a404:	e7ce      	b.n	800a3a4 <_puts_r+0x38>
 800a406:	3e01      	subs	r6, #1
 800a408:	e7e4      	b.n	800a3d4 <_puts_r+0x68>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	6022      	str	r2, [r4, #0]
 800a410:	220a      	movs	r2, #10
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	e7ee      	b.n	800a3f4 <_puts_r+0x88>
	...

0800a418 <puts>:
 800a418:	4b02      	ldr	r3, [pc, #8]	@ (800a424 <puts+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f7ff bfa5 	b.w	800a36c <_puts_r>
 800a422:	bf00      	nop
 800a424:	20000030 	.word	0x20000030

0800a428 <__sread>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	f000 f8fc 	bl	800a62c <_read_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	bfab      	itete	ge
 800a438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a43a:	89a3      	ldrhlt	r3, [r4, #12]
 800a43c:	181b      	addge	r3, r3, r0
 800a43e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a442:	bfac      	ite	ge
 800a444:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a446:	81a3      	strhlt	r3, [r4, #12]
 800a448:	bd10      	pop	{r4, pc}

0800a44a <__swrite>:
 800a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	461f      	mov	r7, r3
 800a450:	898b      	ldrh	r3, [r1, #12]
 800a452:	05db      	lsls	r3, r3, #23
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	4616      	mov	r6, r2
 800a45a:	d505      	bpl.n	800a468 <__swrite+0x1e>
 800a45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a460:	2302      	movs	r3, #2
 800a462:	2200      	movs	r2, #0
 800a464:	f000 f8d0 	bl	800a608 <_lseek_r>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	4632      	mov	r2, r6
 800a476:	463b      	mov	r3, r7
 800a478:	4628      	mov	r0, r5
 800a47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47e:	f000 b8e7 	b.w	800a650 <_write_r>

0800a482 <__sseek>:
 800a482:	b510      	push	{r4, lr}
 800a484:	460c      	mov	r4, r1
 800a486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48a:	f000 f8bd 	bl	800a608 <_lseek_r>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	bf15      	itete	ne
 800a494:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a49a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a49e:	81a3      	strheq	r3, [r4, #12]
 800a4a0:	bf18      	it	ne
 800a4a2:	81a3      	strhne	r3, [r4, #12]
 800a4a4:	bd10      	pop	{r4, pc}

0800a4a6 <__sclose>:
 800a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4aa:	f000 b89d 	b.w	800a5e8 <_close_r>

0800a4ae <__swbuf_r>:
 800a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b0:	460e      	mov	r6, r1
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	b118      	cbz	r0, 800a4c0 <__swbuf_r+0x12>
 800a4b8:	6a03      	ldr	r3, [r0, #32]
 800a4ba:	b90b      	cbnz	r3, 800a4c0 <__swbuf_r+0x12>
 800a4bc:	f7ff ff0e 	bl	800a2dc <__sinit>
 800a4c0:	69a3      	ldr	r3, [r4, #24]
 800a4c2:	60a3      	str	r3, [r4, #8]
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	071a      	lsls	r2, r3, #28
 800a4c8:	d501      	bpl.n	800a4ce <__swbuf_r+0x20>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	b943      	cbnz	r3, 800a4e0 <__swbuf_r+0x32>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 f82b 	bl	800a52c <__swsetup_r>
 800a4d6:	b118      	cbz	r0, 800a4e0 <__swbuf_r+0x32>
 800a4d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a4dc:	4638      	mov	r0, r7
 800a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	6922      	ldr	r2, [r4, #16]
 800a4e4:	1a98      	subs	r0, r3, r2
 800a4e6:	6963      	ldr	r3, [r4, #20]
 800a4e8:	b2f6      	uxtb	r6, r6
 800a4ea:	4283      	cmp	r3, r0
 800a4ec:	4637      	mov	r7, r6
 800a4ee:	dc05      	bgt.n	800a4fc <__swbuf_r+0x4e>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 fd38 	bl	800af68 <_fflush_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d1ed      	bne.n	800a4d8 <__swbuf_r+0x2a>
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	6022      	str	r2, [r4, #0]
 800a508:	701e      	strb	r6, [r3, #0]
 800a50a:	6962      	ldr	r2, [r4, #20]
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	429a      	cmp	r2, r3
 800a510:	d004      	beq.n	800a51c <__swbuf_r+0x6e>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	07db      	lsls	r3, r3, #31
 800a516:	d5e1      	bpl.n	800a4dc <__swbuf_r+0x2e>
 800a518:	2e0a      	cmp	r6, #10
 800a51a:	d1df      	bne.n	800a4dc <__swbuf_r+0x2e>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	f000 fd22 	bl	800af68 <_fflush_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0d9      	beq.n	800a4dc <__swbuf_r+0x2e>
 800a528:	e7d6      	b.n	800a4d8 <__swbuf_r+0x2a>
	...

0800a52c <__swsetup_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4b29      	ldr	r3, [pc, #164]	@ (800a5d4 <__swsetup_r+0xa8>)
 800a530:	4605      	mov	r5, r0
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	460c      	mov	r4, r1
 800a536:	b118      	cbz	r0, 800a540 <__swsetup_r+0x14>
 800a538:	6a03      	ldr	r3, [r0, #32]
 800a53a:	b90b      	cbnz	r3, 800a540 <__swsetup_r+0x14>
 800a53c:	f7ff fece 	bl	800a2dc <__sinit>
 800a540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a544:	0719      	lsls	r1, r3, #28
 800a546:	d422      	bmi.n	800a58e <__swsetup_r+0x62>
 800a548:	06da      	lsls	r2, r3, #27
 800a54a:	d407      	bmi.n	800a55c <__swsetup_r+0x30>
 800a54c:	2209      	movs	r2, #9
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	f04f 30ff 	mov.w	r0, #4294967295
 800a55a:	e033      	b.n	800a5c4 <__swsetup_r+0x98>
 800a55c:	0758      	lsls	r0, r3, #29
 800a55e:	d512      	bpl.n	800a586 <__swsetup_r+0x5a>
 800a560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a562:	b141      	cbz	r1, 800a576 <__swsetup_r+0x4a>
 800a564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a568:	4299      	cmp	r1, r3
 800a56a:	d002      	beq.n	800a572 <__swsetup_r+0x46>
 800a56c:	4628      	mov	r0, r5
 800a56e:	f000 f8af 	bl	800a6d0 <_free_r>
 800a572:	2300      	movs	r3, #0
 800a574:	6363      	str	r3, [r4, #52]	@ 0x34
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	2300      	movs	r3, #0
 800a580:	6063      	str	r3, [r4, #4]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f043 0308 	orr.w	r3, r3, #8
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	b94b      	cbnz	r3, 800a5a6 <__swsetup_r+0x7a>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a59c:	d003      	beq.n	800a5a6 <__swsetup_r+0x7a>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f000 fd2f 	bl	800b004 <__smakebuf_r>
 800a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5aa:	f013 0201 	ands.w	r2, r3, #1
 800a5ae:	d00a      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	6962      	ldr	r2, [r4, #20]
 800a5b6:	4252      	negs	r2, r2
 800a5b8:	61a2      	str	r2, [r4, #24]
 800a5ba:	6922      	ldr	r2, [r4, #16]
 800a5bc:	b942      	cbnz	r2, 800a5d0 <__swsetup_r+0xa4>
 800a5be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5c2:	d1c5      	bne.n	800a550 <__swsetup_r+0x24>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	0799      	lsls	r1, r3, #30
 800a5c8:	bf58      	it	pl
 800a5ca:	6962      	ldrpl	r2, [r4, #20]
 800a5cc:	60a2      	str	r2, [r4, #8]
 800a5ce:	e7f4      	b.n	800a5ba <__swsetup_r+0x8e>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e7f7      	b.n	800a5c4 <__swsetup_r+0x98>
 800a5d4:	20000030 	.word	0x20000030

0800a5d8 <memset>:
 800a5d8:	4402      	add	r2, r0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d100      	bne.n	800a5e2 <memset+0xa>
 800a5e0:	4770      	bx	lr
 800a5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e6:	e7f9      	b.n	800a5dc <memset+0x4>

0800a5e8 <_close_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d06      	ldr	r5, [pc, #24]	@ (800a604 <_close_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	f7ff fbc6 	bl	8009d84 <_close>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_close_r+0x1a>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_close_r+0x1a>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20025f24 	.word	0x20025f24

0800a608 <_lseek_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4d07      	ldr	r5, [pc, #28]	@ (800a628 <_lseek_r+0x20>)
 800a60c:	4604      	mov	r4, r0
 800a60e:	4608      	mov	r0, r1
 800a610:	4611      	mov	r1, r2
 800a612:	2200      	movs	r2, #0
 800a614:	602a      	str	r2, [r5, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f7ff fb75 	bl	8009d06 <_lseek>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_lseek_r+0x1e>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_lseek_r+0x1e>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20025f24 	.word	0x20025f24

0800a62c <_read_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d07      	ldr	r5, [pc, #28]	@ (800a64c <_read_r+0x20>)
 800a630:	4604      	mov	r4, r0
 800a632:	4608      	mov	r0, r1
 800a634:	4611      	mov	r1, r2
 800a636:	2200      	movs	r2, #0
 800a638:	602a      	str	r2, [r5, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	f7ff fb0d 	bl	8009c5a <_read>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_read_r+0x1e>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_read_r+0x1e>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20025f24 	.word	0x20025f24

0800a650 <_write_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d07      	ldr	r5, [pc, #28]	@ (800a670 <_write_r+0x20>)
 800a654:	4604      	mov	r4, r0
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	602a      	str	r2, [r5, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f7ff fb63 	bl	8009d2a <_write>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_write_r+0x1e>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_write_r+0x1e>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20025f24 	.word	0x20025f24

0800a674 <__errno>:
 800a674:	4b01      	ldr	r3, [pc, #4]	@ (800a67c <__errno+0x8>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	20000030 	.word	0x20000030

0800a680 <__libc_init_array>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	4d0d      	ldr	r5, [pc, #52]	@ (800a6b8 <__libc_init_array+0x38>)
 800a684:	4c0d      	ldr	r4, [pc, #52]	@ (800a6bc <__libc_init_array+0x3c>)
 800a686:	1b64      	subs	r4, r4, r5
 800a688:	10a4      	asrs	r4, r4, #2
 800a68a:	2600      	movs	r6, #0
 800a68c:	42a6      	cmp	r6, r4
 800a68e:	d109      	bne.n	800a6a4 <__libc_init_array+0x24>
 800a690:	4d0b      	ldr	r5, [pc, #44]	@ (800a6c0 <__libc_init_array+0x40>)
 800a692:	4c0c      	ldr	r4, [pc, #48]	@ (800a6c4 <__libc_init_array+0x44>)
 800a694:	f000 fd24 	bl	800b0e0 <_init>
 800a698:	1b64      	subs	r4, r4, r5
 800a69a:	10a4      	asrs	r4, r4, #2
 800a69c:	2600      	movs	r6, #0
 800a69e:	42a6      	cmp	r6, r4
 800a6a0:	d105      	bne.n	800a6ae <__libc_init_array+0x2e>
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
 800a6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a8:	4798      	blx	r3
 800a6aa:	3601      	adds	r6, #1
 800a6ac:	e7ee      	b.n	800a68c <__libc_init_array+0xc>
 800a6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b2:	4798      	blx	r3
 800a6b4:	3601      	adds	r6, #1
 800a6b6:	e7f2      	b.n	800a69e <__libc_init_array+0x1e>
 800a6b8:	0800c3b0 	.word	0x0800c3b0
 800a6bc:	0800c3b0 	.word	0x0800c3b0
 800a6c0:	0800c3b0 	.word	0x0800c3b0
 800a6c4:	0800c3b4 	.word	0x0800c3b4

0800a6c8 <__retarget_lock_init_recursive>:
 800a6c8:	4770      	bx	lr

0800a6ca <__retarget_lock_acquire_recursive>:
 800a6ca:	4770      	bx	lr

0800a6cc <__retarget_lock_release_recursive>:
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <_free_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	d041      	beq.n	800a75c <_free_r+0x8c>
 800a6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6dc:	1f0c      	subs	r4, r1, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfb8      	it	lt
 800a6e2:	18e4      	addlt	r4, r4, r3
 800a6e4:	f000 f8e0 	bl	800a8a8 <__malloc_lock>
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a760 <_free_r+0x90>)
 800a6ea:	6813      	ldr	r3, [r2, #0]
 800a6ec:	b933      	cbnz	r3, 800a6fc <_free_r+0x2c>
 800a6ee:	6063      	str	r3, [r4, #4]
 800a6f0:	6014      	str	r4, [r2, #0]
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f8:	f000 b8dc 	b.w	800a8b4 <__malloc_unlock>
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	d908      	bls.n	800a712 <_free_r+0x42>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	1821      	adds	r1, r4, r0
 800a704:	428b      	cmp	r3, r1
 800a706:	bf01      	itttt	eq
 800a708:	6819      	ldreq	r1, [r3, #0]
 800a70a:	685b      	ldreq	r3, [r3, #4]
 800a70c:	1809      	addeq	r1, r1, r0
 800a70e:	6021      	streq	r1, [r4, #0]
 800a710:	e7ed      	b.n	800a6ee <_free_r+0x1e>
 800a712:	461a      	mov	r2, r3
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	b10b      	cbz	r3, 800a71c <_free_r+0x4c>
 800a718:	42a3      	cmp	r3, r4
 800a71a:	d9fa      	bls.n	800a712 <_free_r+0x42>
 800a71c:	6811      	ldr	r1, [r2, #0]
 800a71e:	1850      	adds	r0, r2, r1
 800a720:	42a0      	cmp	r0, r4
 800a722:	d10b      	bne.n	800a73c <_free_r+0x6c>
 800a724:	6820      	ldr	r0, [r4, #0]
 800a726:	4401      	add	r1, r0
 800a728:	1850      	adds	r0, r2, r1
 800a72a:	4283      	cmp	r3, r0
 800a72c:	6011      	str	r1, [r2, #0]
 800a72e:	d1e0      	bne.n	800a6f2 <_free_r+0x22>
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	6053      	str	r3, [r2, #4]
 800a736:	4408      	add	r0, r1
 800a738:	6010      	str	r0, [r2, #0]
 800a73a:	e7da      	b.n	800a6f2 <_free_r+0x22>
 800a73c:	d902      	bls.n	800a744 <_free_r+0x74>
 800a73e:	230c      	movs	r3, #12
 800a740:	602b      	str	r3, [r5, #0]
 800a742:	e7d6      	b.n	800a6f2 <_free_r+0x22>
 800a744:	6820      	ldr	r0, [r4, #0]
 800a746:	1821      	adds	r1, r4, r0
 800a748:	428b      	cmp	r3, r1
 800a74a:	bf04      	itt	eq
 800a74c:	6819      	ldreq	r1, [r3, #0]
 800a74e:	685b      	ldreq	r3, [r3, #4]
 800a750:	6063      	str	r3, [r4, #4]
 800a752:	bf04      	itt	eq
 800a754:	1809      	addeq	r1, r1, r0
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	6054      	str	r4, [r2, #4]
 800a75a:	e7ca      	b.n	800a6f2 <_free_r+0x22>
 800a75c:	bd38      	pop	{r3, r4, r5, pc}
 800a75e:	bf00      	nop
 800a760:	20025f30 	.word	0x20025f30

0800a764 <sbrk_aligned>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4e0f      	ldr	r6, [pc, #60]	@ (800a7a4 <sbrk_aligned+0x40>)
 800a768:	460c      	mov	r4, r1
 800a76a:	6831      	ldr	r1, [r6, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	b911      	cbnz	r1, 800a776 <sbrk_aligned+0x12>
 800a770:	f000 fca6 	bl	800b0c0 <_sbrk_r>
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 fca1 	bl	800b0c0 <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d103      	bne.n	800a78a <sbrk_aligned+0x26>
 800a782:	f04f 34ff 	mov.w	r4, #4294967295
 800a786:	4620      	mov	r0, r4
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	1cc4      	adds	r4, r0, #3
 800a78c:	f024 0403 	bic.w	r4, r4, #3
 800a790:	42a0      	cmp	r0, r4
 800a792:	d0f8      	beq.n	800a786 <sbrk_aligned+0x22>
 800a794:	1a21      	subs	r1, r4, r0
 800a796:	4628      	mov	r0, r5
 800a798:	f000 fc92 	bl	800b0c0 <_sbrk_r>
 800a79c:	3001      	adds	r0, #1
 800a79e:	d1f2      	bne.n	800a786 <sbrk_aligned+0x22>
 800a7a0:	e7ef      	b.n	800a782 <sbrk_aligned+0x1e>
 800a7a2:	bf00      	nop
 800a7a4:	20025f2c 	.word	0x20025f2c

0800a7a8 <_malloc_r>:
 800a7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	1ccd      	adds	r5, r1, #3
 800a7ae:	f025 0503 	bic.w	r5, r5, #3
 800a7b2:	3508      	adds	r5, #8
 800a7b4:	2d0c      	cmp	r5, #12
 800a7b6:	bf38      	it	cc
 800a7b8:	250c      	movcc	r5, #12
 800a7ba:	2d00      	cmp	r5, #0
 800a7bc:	4606      	mov	r6, r0
 800a7be:	db01      	blt.n	800a7c4 <_malloc_r+0x1c>
 800a7c0:	42a9      	cmp	r1, r5
 800a7c2:	d904      	bls.n	800a7ce <_malloc_r+0x26>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	6033      	str	r3, [r6, #0]
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8a4 <_malloc_r+0xfc>
 800a7d2:	f000 f869 	bl	800a8a8 <__malloc_lock>
 800a7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7da:	461c      	mov	r4, r3
 800a7dc:	bb44      	cbnz	r4, 800a830 <_malloc_r+0x88>
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffbf 	bl	800a764 <sbrk_aligned>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	d158      	bne.n	800a89e <_malloc_r+0xf6>
 800a7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a7f0:	4627      	mov	r7, r4
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d143      	bne.n	800a87e <_malloc_r+0xd6>
 800a7f6:	2c00      	cmp	r4, #0
 800a7f8:	d04b      	beq.n	800a892 <_malloc_r+0xea>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4630      	mov	r0, r6
 800a800:	eb04 0903 	add.w	r9, r4, r3
 800a804:	f000 fc5c 	bl	800b0c0 <_sbrk_r>
 800a808:	4581      	cmp	r9, r0
 800a80a:	d142      	bne.n	800a892 <_malloc_r+0xea>
 800a80c:	6821      	ldr	r1, [r4, #0]
 800a80e:	1a6d      	subs	r5, r5, r1
 800a810:	4629      	mov	r1, r5
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff ffa6 	bl	800a764 <sbrk_aligned>
 800a818:	3001      	adds	r0, #1
 800a81a:	d03a      	beq.n	800a892 <_malloc_r+0xea>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	442b      	add	r3, r5
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	f8d8 3000 	ldr.w	r3, [r8]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	bb62      	cbnz	r2, 800a884 <_malloc_r+0xdc>
 800a82a:	f8c8 7000 	str.w	r7, [r8]
 800a82e:	e00f      	b.n	800a850 <_malloc_r+0xa8>
 800a830:	6822      	ldr	r2, [r4, #0]
 800a832:	1b52      	subs	r2, r2, r5
 800a834:	d420      	bmi.n	800a878 <_malloc_r+0xd0>
 800a836:	2a0b      	cmp	r2, #11
 800a838:	d917      	bls.n	800a86a <_malloc_r+0xc2>
 800a83a:	1961      	adds	r1, r4, r5
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	6025      	str	r5, [r4, #0]
 800a840:	bf18      	it	ne
 800a842:	6059      	strne	r1, [r3, #4]
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	bf08      	it	eq
 800a848:	f8c8 1000 	streq.w	r1, [r8]
 800a84c:	5162      	str	r2, [r4, r5]
 800a84e:	604b      	str	r3, [r1, #4]
 800a850:	4630      	mov	r0, r6
 800a852:	f000 f82f 	bl	800a8b4 <__malloc_unlock>
 800a856:	f104 000b 	add.w	r0, r4, #11
 800a85a:	1d23      	adds	r3, r4, #4
 800a85c:	f020 0007 	bic.w	r0, r0, #7
 800a860:	1ac2      	subs	r2, r0, r3
 800a862:	bf1c      	itt	ne
 800a864:	1a1b      	subne	r3, r3, r0
 800a866:	50a3      	strne	r3, [r4, r2]
 800a868:	e7af      	b.n	800a7ca <_malloc_r+0x22>
 800a86a:	6862      	ldr	r2, [r4, #4]
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	bf0c      	ite	eq
 800a870:	f8c8 2000 	streq.w	r2, [r8]
 800a874:	605a      	strne	r2, [r3, #4]
 800a876:	e7eb      	b.n	800a850 <_malloc_r+0xa8>
 800a878:	4623      	mov	r3, r4
 800a87a:	6864      	ldr	r4, [r4, #4]
 800a87c:	e7ae      	b.n	800a7dc <_malloc_r+0x34>
 800a87e:	463c      	mov	r4, r7
 800a880:	687f      	ldr	r7, [r7, #4]
 800a882:	e7b6      	b.n	800a7f2 <_malloc_r+0x4a>
 800a884:	461a      	mov	r2, r3
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d1fb      	bne.n	800a884 <_malloc_r+0xdc>
 800a88c:	2300      	movs	r3, #0
 800a88e:	6053      	str	r3, [r2, #4]
 800a890:	e7de      	b.n	800a850 <_malloc_r+0xa8>
 800a892:	230c      	movs	r3, #12
 800a894:	6033      	str	r3, [r6, #0]
 800a896:	4630      	mov	r0, r6
 800a898:	f000 f80c 	bl	800a8b4 <__malloc_unlock>
 800a89c:	e794      	b.n	800a7c8 <_malloc_r+0x20>
 800a89e:	6005      	str	r5, [r0, #0]
 800a8a0:	e7d6      	b.n	800a850 <_malloc_r+0xa8>
 800a8a2:	bf00      	nop
 800a8a4:	20025f30 	.word	0x20025f30

0800a8a8 <__malloc_lock>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	@ (800a8b0 <__malloc_lock+0x8>)
 800a8aa:	f7ff bf0e 	b.w	800a6ca <__retarget_lock_acquire_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	20025f28 	.word	0x20025f28

0800a8b4 <__malloc_unlock>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	@ (800a8bc <__malloc_unlock+0x8>)
 800a8b6:	f7ff bf09 	b.w	800a6cc <__retarget_lock_release_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20025f28 	.word	0x20025f28

0800a8c0 <__sfputc_r>:
 800a8c0:	6893      	ldr	r3, [r2, #8]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	b410      	push	{r4}
 800a8c8:	6093      	str	r3, [r2, #8]
 800a8ca:	da08      	bge.n	800a8de <__sfputc_r+0x1e>
 800a8cc:	6994      	ldr	r4, [r2, #24]
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	db01      	blt.n	800a8d6 <__sfputc_r+0x16>
 800a8d2:	290a      	cmp	r1, #10
 800a8d4:	d103      	bne.n	800a8de <__sfputc_r+0x1e>
 800a8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8da:	f7ff bde8 	b.w	800a4ae <__swbuf_r>
 800a8de:	6813      	ldr	r3, [r2, #0]
 800a8e0:	1c58      	adds	r0, r3, #1
 800a8e2:	6010      	str	r0, [r2, #0]
 800a8e4:	7019      	strb	r1, [r3, #0]
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <__sfputs_r>:
 800a8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	460f      	mov	r7, r1
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	18d5      	adds	r5, r2, r3
 800a8f8:	42ac      	cmp	r4, r5
 800a8fa:	d101      	bne.n	800a900 <__sfputs_r+0x12>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e007      	b.n	800a910 <__sfputs_r+0x22>
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	463a      	mov	r2, r7
 800a906:	4630      	mov	r0, r6
 800a908:	f7ff ffda 	bl	800a8c0 <__sfputc_r>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d1f3      	bne.n	800a8f8 <__sfputs_r+0xa>
 800a910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a914 <_vfiprintf_r>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	460d      	mov	r5, r1
 800a91a:	b09d      	sub	sp, #116	@ 0x74
 800a91c:	4614      	mov	r4, r2
 800a91e:	4698      	mov	r8, r3
 800a920:	4606      	mov	r6, r0
 800a922:	b118      	cbz	r0, 800a92c <_vfiprintf_r+0x18>
 800a924:	6a03      	ldr	r3, [r0, #32]
 800a926:	b90b      	cbnz	r3, 800a92c <_vfiprintf_r+0x18>
 800a928:	f7ff fcd8 	bl	800a2dc <__sinit>
 800a92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a92e:	07d9      	lsls	r1, r3, #31
 800a930:	d405      	bmi.n	800a93e <_vfiprintf_r+0x2a>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	059a      	lsls	r2, r3, #22
 800a936:	d402      	bmi.n	800a93e <_vfiprintf_r+0x2a>
 800a938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a93a:	f7ff fec6 	bl	800a6ca <__retarget_lock_acquire_recursive>
 800a93e:	89ab      	ldrh	r3, [r5, #12]
 800a940:	071b      	lsls	r3, r3, #28
 800a942:	d501      	bpl.n	800a948 <_vfiprintf_r+0x34>
 800a944:	692b      	ldr	r3, [r5, #16]
 800a946:	b99b      	cbnz	r3, 800a970 <_vfiprintf_r+0x5c>
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff fdee 	bl	800a52c <__swsetup_r>
 800a950:	b170      	cbz	r0, 800a970 <_vfiprintf_r+0x5c>
 800a952:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a954:	07dc      	lsls	r4, r3, #31
 800a956:	d504      	bpl.n	800a962 <_vfiprintf_r+0x4e>
 800a958:	f04f 30ff 	mov.w	r0, #4294967295
 800a95c:	b01d      	add	sp, #116	@ 0x74
 800a95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a962:	89ab      	ldrh	r3, [r5, #12]
 800a964:	0598      	lsls	r0, r3, #22
 800a966:	d4f7      	bmi.n	800a958 <_vfiprintf_r+0x44>
 800a968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a96a:	f7ff feaf 	bl	800a6cc <__retarget_lock_release_recursive>
 800a96e:	e7f3      	b.n	800a958 <_vfiprintf_r+0x44>
 800a970:	2300      	movs	r3, #0
 800a972:	9309      	str	r3, [sp, #36]	@ 0x24
 800a974:	2320      	movs	r3, #32
 800a976:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a97a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a97e:	2330      	movs	r3, #48	@ 0x30
 800a980:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab30 <_vfiprintf_r+0x21c>
 800a984:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a988:	f04f 0901 	mov.w	r9, #1
 800a98c:	4623      	mov	r3, r4
 800a98e:	469a      	mov	sl, r3
 800a990:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a994:	b10a      	cbz	r2, 800a99a <_vfiprintf_r+0x86>
 800a996:	2a25      	cmp	r2, #37	@ 0x25
 800a998:	d1f9      	bne.n	800a98e <_vfiprintf_r+0x7a>
 800a99a:	ebba 0b04 	subs.w	fp, sl, r4
 800a99e:	d00b      	beq.n	800a9b8 <_vfiprintf_r+0xa4>
 800a9a0:	465b      	mov	r3, fp
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7ff ffa1 	bl	800a8ee <__sfputs_r>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	f000 80a7 	beq.w	800ab00 <_vfiprintf_r+0x1ec>
 800a9b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9b4:	445a      	add	r2, fp
 800a9b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 809f 	beq.w	800ab00 <_vfiprintf_r+0x1ec>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9cc:	f10a 0a01 	add.w	sl, sl, #1
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	9307      	str	r3, [sp, #28]
 800a9d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9da:	4654      	mov	r4, sl
 800a9dc:	2205      	movs	r2, #5
 800a9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e2:	4853      	ldr	r0, [pc, #332]	@ (800ab30 <_vfiprintf_r+0x21c>)
 800a9e4:	f7f5 fc0c 	bl	8000200 <memchr>
 800a9e8:	9a04      	ldr	r2, [sp, #16]
 800a9ea:	b9d8      	cbnz	r0, 800aa24 <_vfiprintf_r+0x110>
 800a9ec:	06d1      	lsls	r1, r2, #27
 800a9ee:	bf44      	itt	mi
 800a9f0:	2320      	movmi	r3, #32
 800a9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9f6:	0713      	lsls	r3, r2, #28
 800a9f8:	bf44      	itt	mi
 800a9fa:	232b      	movmi	r3, #43	@ 0x2b
 800a9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa00:	f89a 3000 	ldrb.w	r3, [sl]
 800aa04:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa06:	d015      	beq.n	800aa34 <_vfiprintf_r+0x120>
 800aa08:	9a07      	ldr	r2, [sp, #28]
 800aa0a:	4654      	mov	r4, sl
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	f04f 0c0a 	mov.w	ip, #10
 800aa12:	4621      	mov	r1, r4
 800aa14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa18:	3b30      	subs	r3, #48	@ 0x30
 800aa1a:	2b09      	cmp	r3, #9
 800aa1c:	d94b      	bls.n	800aab6 <_vfiprintf_r+0x1a2>
 800aa1e:	b1b0      	cbz	r0, 800aa4e <_vfiprintf_r+0x13a>
 800aa20:	9207      	str	r2, [sp, #28]
 800aa22:	e014      	b.n	800aa4e <_vfiprintf_r+0x13a>
 800aa24:	eba0 0308 	sub.w	r3, r0, r8
 800aa28:	fa09 f303 	lsl.w	r3, r9, r3
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	9304      	str	r3, [sp, #16]
 800aa30:	46a2      	mov	sl, r4
 800aa32:	e7d2      	b.n	800a9da <_vfiprintf_r+0xc6>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	1d19      	adds	r1, r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	9103      	str	r1, [sp, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	bfbb      	ittet	lt
 800aa40:	425b      	neglt	r3, r3
 800aa42:	f042 0202 	orrlt.w	r2, r2, #2
 800aa46:	9307      	strge	r3, [sp, #28]
 800aa48:	9307      	strlt	r3, [sp, #28]
 800aa4a:	bfb8      	it	lt
 800aa4c:	9204      	strlt	r2, [sp, #16]
 800aa4e:	7823      	ldrb	r3, [r4, #0]
 800aa50:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa52:	d10a      	bne.n	800aa6a <_vfiprintf_r+0x156>
 800aa54:	7863      	ldrb	r3, [r4, #1]
 800aa56:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa58:	d132      	bne.n	800aac0 <_vfiprintf_r+0x1ac>
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	1d1a      	adds	r2, r3, #4
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	9203      	str	r2, [sp, #12]
 800aa62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa66:	3402      	adds	r4, #2
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab40 <_vfiprintf_r+0x22c>
 800aa6e:	7821      	ldrb	r1, [r4, #0]
 800aa70:	2203      	movs	r2, #3
 800aa72:	4650      	mov	r0, sl
 800aa74:	f7f5 fbc4 	bl	8000200 <memchr>
 800aa78:	b138      	cbz	r0, 800aa8a <_vfiprintf_r+0x176>
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	eba0 000a 	sub.w	r0, r0, sl
 800aa80:	2240      	movs	r2, #64	@ 0x40
 800aa82:	4082      	lsls	r2, r0
 800aa84:	4313      	orrs	r3, r2
 800aa86:	3401      	adds	r4, #1
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8e:	4829      	ldr	r0, [pc, #164]	@ (800ab34 <_vfiprintf_r+0x220>)
 800aa90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa94:	2206      	movs	r2, #6
 800aa96:	f7f5 fbb3 	bl	8000200 <memchr>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d03f      	beq.n	800ab1e <_vfiprintf_r+0x20a>
 800aa9e:	4b26      	ldr	r3, [pc, #152]	@ (800ab38 <_vfiprintf_r+0x224>)
 800aaa0:	bb1b      	cbnz	r3, 800aaea <_vfiprintf_r+0x1d6>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	f023 0307 	bic.w	r3, r3, #7
 800aaaa:	3308      	adds	r3, #8
 800aaac:	9303      	str	r3, [sp, #12]
 800aaae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab0:	443b      	add	r3, r7
 800aab2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab4:	e76a      	b.n	800a98c <_vfiprintf_r+0x78>
 800aab6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaba:	460c      	mov	r4, r1
 800aabc:	2001      	movs	r0, #1
 800aabe:	e7a8      	b.n	800aa12 <_vfiprintf_r+0xfe>
 800aac0:	2300      	movs	r3, #0
 800aac2:	3401      	adds	r4, #1
 800aac4:	9305      	str	r3, [sp, #20]
 800aac6:	4619      	mov	r1, r3
 800aac8:	f04f 0c0a 	mov.w	ip, #10
 800aacc:	4620      	mov	r0, r4
 800aace:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad2:	3a30      	subs	r2, #48	@ 0x30
 800aad4:	2a09      	cmp	r2, #9
 800aad6:	d903      	bls.n	800aae0 <_vfiprintf_r+0x1cc>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0c6      	beq.n	800aa6a <_vfiprintf_r+0x156>
 800aadc:	9105      	str	r1, [sp, #20]
 800aade:	e7c4      	b.n	800aa6a <_vfiprintf_r+0x156>
 800aae0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae4:	4604      	mov	r4, r0
 800aae6:	2301      	movs	r3, #1
 800aae8:	e7f0      	b.n	800aacc <_vfiprintf_r+0x1b8>
 800aaea:	ab03      	add	r3, sp, #12
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	462a      	mov	r2, r5
 800aaf0:	4b12      	ldr	r3, [pc, #72]	@ (800ab3c <_vfiprintf_r+0x228>)
 800aaf2:	a904      	add	r1, sp, #16
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f3af 8000 	nop.w
 800aafa:	4607      	mov	r7, r0
 800aafc:	1c78      	adds	r0, r7, #1
 800aafe:	d1d6      	bne.n	800aaae <_vfiprintf_r+0x19a>
 800ab00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab02:	07d9      	lsls	r1, r3, #31
 800ab04:	d405      	bmi.n	800ab12 <_vfiprintf_r+0x1fe>
 800ab06:	89ab      	ldrh	r3, [r5, #12]
 800ab08:	059a      	lsls	r2, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_vfiprintf_r+0x1fe>
 800ab0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0e:	f7ff fddd 	bl	800a6cc <__retarget_lock_release_recursive>
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	065b      	lsls	r3, r3, #25
 800ab16:	f53f af1f 	bmi.w	800a958 <_vfiprintf_r+0x44>
 800ab1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab1c:	e71e      	b.n	800a95c <_vfiprintf_r+0x48>
 800ab1e:	ab03      	add	r3, sp, #12
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	462a      	mov	r2, r5
 800ab24:	4b05      	ldr	r3, [pc, #20]	@ (800ab3c <_vfiprintf_r+0x228>)
 800ab26:	a904      	add	r1, sp, #16
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f000 f879 	bl	800ac20 <_printf_i>
 800ab2e:	e7e4      	b.n	800aafa <_vfiprintf_r+0x1e6>
 800ab30:	0800c373 	.word	0x0800c373
 800ab34:	0800c37d 	.word	0x0800c37d
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	0800a8ef 	.word	0x0800a8ef
 800ab40:	0800c379 	.word	0x0800c379

0800ab44 <_printf_common>:
 800ab44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab48:	4616      	mov	r6, r2
 800ab4a:	4698      	mov	r8, r3
 800ab4c:	688a      	ldr	r2, [r1, #8]
 800ab4e:	690b      	ldr	r3, [r1, #16]
 800ab50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab54:	4293      	cmp	r3, r2
 800ab56:	bfb8      	it	lt
 800ab58:	4613      	movlt	r3, r2
 800ab5a:	6033      	str	r3, [r6, #0]
 800ab5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab60:	4607      	mov	r7, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b10a      	cbz	r2, 800ab6a <_printf_common+0x26>
 800ab66:	3301      	adds	r3, #1
 800ab68:	6033      	str	r3, [r6, #0]
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	0699      	lsls	r1, r3, #26
 800ab6e:	bf42      	ittt	mi
 800ab70:	6833      	ldrmi	r3, [r6, #0]
 800ab72:	3302      	addmi	r3, #2
 800ab74:	6033      	strmi	r3, [r6, #0]
 800ab76:	6825      	ldr	r5, [r4, #0]
 800ab78:	f015 0506 	ands.w	r5, r5, #6
 800ab7c:	d106      	bne.n	800ab8c <_printf_common+0x48>
 800ab7e:	f104 0a19 	add.w	sl, r4, #25
 800ab82:	68e3      	ldr	r3, [r4, #12]
 800ab84:	6832      	ldr	r2, [r6, #0]
 800ab86:	1a9b      	subs	r3, r3, r2
 800ab88:	42ab      	cmp	r3, r5
 800ab8a:	dc26      	bgt.n	800abda <_printf_common+0x96>
 800ab8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab90:	6822      	ldr	r2, [r4, #0]
 800ab92:	3b00      	subs	r3, #0
 800ab94:	bf18      	it	ne
 800ab96:	2301      	movne	r3, #1
 800ab98:	0692      	lsls	r2, r2, #26
 800ab9a:	d42b      	bmi.n	800abf4 <_printf_common+0xb0>
 800ab9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aba0:	4641      	mov	r1, r8
 800aba2:	4638      	mov	r0, r7
 800aba4:	47c8      	blx	r9
 800aba6:	3001      	adds	r0, #1
 800aba8:	d01e      	beq.n	800abe8 <_printf_common+0xa4>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	6922      	ldr	r2, [r4, #16]
 800abae:	f003 0306 	and.w	r3, r3, #6
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	bf02      	ittt	eq
 800abb6:	68e5      	ldreq	r5, [r4, #12]
 800abb8:	6833      	ldreq	r3, [r6, #0]
 800abba:	1aed      	subeq	r5, r5, r3
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	bf0c      	ite	eq
 800abc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abc4:	2500      	movne	r5, #0
 800abc6:	4293      	cmp	r3, r2
 800abc8:	bfc4      	itt	gt
 800abca:	1a9b      	subgt	r3, r3, r2
 800abcc:	18ed      	addgt	r5, r5, r3
 800abce:	2600      	movs	r6, #0
 800abd0:	341a      	adds	r4, #26
 800abd2:	42b5      	cmp	r5, r6
 800abd4:	d11a      	bne.n	800ac0c <_printf_common+0xc8>
 800abd6:	2000      	movs	r0, #0
 800abd8:	e008      	b.n	800abec <_printf_common+0xa8>
 800abda:	2301      	movs	r3, #1
 800abdc:	4652      	mov	r2, sl
 800abde:	4641      	mov	r1, r8
 800abe0:	4638      	mov	r0, r7
 800abe2:	47c8      	blx	r9
 800abe4:	3001      	adds	r0, #1
 800abe6:	d103      	bne.n	800abf0 <_printf_common+0xac>
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295
 800abec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf0:	3501      	adds	r5, #1
 800abf2:	e7c6      	b.n	800ab82 <_printf_common+0x3e>
 800abf4:	18e1      	adds	r1, r4, r3
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	2030      	movs	r0, #48	@ 0x30
 800abfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abfe:	4422      	add	r2, r4
 800ac00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac08:	3302      	adds	r3, #2
 800ac0a:	e7c7      	b.n	800ab9c <_printf_common+0x58>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	4622      	mov	r2, r4
 800ac10:	4641      	mov	r1, r8
 800ac12:	4638      	mov	r0, r7
 800ac14:	47c8      	blx	r9
 800ac16:	3001      	adds	r0, #1
 800ac18:	d0e6      	beq.n	800abe8 <_printf_common+0xa4>
 800ac1a:	3601      	adds	r6, #1
 800ac1c:	e7d9      	b.n	800abd2 <_printf_common+0x8e>
	...

0800ac20 <_printf_i>:
 800ac20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	7e0f      	ldrb	r7, [r1, #24]
 800ac26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac28:	2f78      	cmp	r7, #120	@ 0x78
 800ac2a:	4691      	mov	r9, r2
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	469a      	mov	sl, r3
 800ac32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac36:	d807      	bhi.n	800ac48 <_printf_i+0x28>
 800ac38:	2f62      	cmp	r7, #98	@ 0x62
 800ac3a:	d80a      	bhi.n	800ac52 <_printf_i+0x32>
 800ac3c:	2f00      	cmp	r7, #0
 800ac3e:	f000 80d2 	beq.w	800ade6 <_printf_i+0x1c6>
 800ac42:	2f58      	cmp	r7, #88	@ 0x58
 800ac44:	f000 80b9 	beq.w	800adba <_printf_i+0x19a>
 800ac48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac50:	e03a      	b.n	800acc8 <_printf_i+0xa8>
 800ac52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac56:	2b15      	cmp	r3, #21
 800ac58:	d8f6      	bhi.n	800ac48 <_printf_i+0x28>
 800ac5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac60 <_printf_i+0x40>)
 800ac5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac60:	0800acb9 	.word	0x0800acb9
 800ac64:	0800accd 	.word	0x0800accd
 800ac68:	0800ac49 	.word	0x0800ac49
 800ac6c:	0800ac49 	.word	0x0800ac49
 800ac70:	0800ac49 	.word	0x0800ac49
 800ac74:	0800ac49 	.word	0x0800ac49
 800ac78:	0800accd 	.word	0x0800accd
 800ac7c:	0800ac49 	.word	0x0800ac49
 800ac80:	0800ac49 	.word	0x0800ac49
 800ac84:	0800ac49 	.word	0x0800ac49
 800ac88:	0800ac49 	.word	0x0800ac49
 800ac8c:	0800adcd 	.word	0x0800adcd
 800ac90:	0800acf7 	.word	0x0800acf7
 800ac94:	0800ad87 	.word	0x0800ad87
 800ac98:	0800ac49 	.word	0x0800ac49
 800ac9c:	0800ac49 	.word	0x0800ac49
 800aca0:	0800adef 	.word	0x0800adef
 800aca4:	0800ac49 	.word	0x0800ac49
 800aca8:	0800acf7 	.word	0x0800acf7
 800acac:	0800ac49 	.word	0x0800ac49
 800acb0:	0800ac49 	.word	0x0800ac49
 800acb4:	0800ad8f 	.word	0x0800ad8f
 800acb8:	6833      	ldr	r3, [r6, #0]
 800acba:	1d1a      	adds	r2, r3, #4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	6032      	str	r2, [r6, #0]
 800acc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acc8:	2301      	movs	r3, #1
 800acca:	e09d      	b.n	800ae08 <_printf_i+0x1e8>
 800accc:	6833      	ldr	r3, [r6, #0]
 800acce:	6820      	ldr	r0, [r4, #0]
 800acd0:	1d19      	adds	r1, r3, #4
 800acd2:	6031      	str	r1, [r6, #0]
 800acd4:	0606      	lsls	r6, r0, #24
 800acd6:	d501      	bpl.n	800acdc <_printf_i+0xbc>
 800acd8:	681d      	ldr	r5, [r3, #0]
 800acda:	e003      	b.n	800ace4 <_printf_i+0xc4>
 800acdc:	0645      	lsls	r5, r0, #25
 800acde:	d5fb      	bpl.n	800acd8 <_printf_i+0xb8>
 800ace0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ace4:	2d00      	cmp	r5, #0
 800ace6:	da03      	bge.n	800acf0 <_printf_i+0xd0>
 800ace8:	232d      	movs	r3, #45	@ 0x2d
 800acea:	426d      	negs	r5, r5
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acf0:	4859      	ldr	r0, [pc, #356]	@ (800ae58 <_printf_i+0x238>)
 800acf2:	230a      	movs	r3, #10
 800acf4:	e011      	b.n	800ad1a <_printf_i+0xfa>
 800acf6:	6821      	ldr	r1, [r4, #0]
 800acf8:	6833      	ldr	r3, [r6, #0]
 800acfa:	0608      	lsls	r0, r1, #24
 800acfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad00:	d402      	bmi.n	800ad08 <_printf_i+0xe8>
 800ad02:	0649      	lsls	r1, r1, #25
 800ad04:	bf48      	it	mi
 800ad06:	b2ad      	uxthmi	r5, r5
 800ad08:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad0a:	4853      	ldr	r0, [pc, #332]	@ (800ae58 <_printf_i+0x238>)
 800ad0c:	6033      	str	r3, [r6, #0]
 800ad0e:	bf14      	ite	ne
 800ad10:	230a      	movne	r3, #10
 800ad12:	2308      	moveq	r3, #8
 800ad14:	2100      	movs	r1, #0
 800ad16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad1a:	6866      	ldr	r6, [r4, #4]
 800ad1c:	60a6      	str	r6, [r4, #8]
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	bfa2      	ittt	ge
 800ad22:	6821      	ldrge	r1, [r4, #0]
 800ad24:	f021 0104 	bicge.w	r1, r1, #4
 800ad28:	6021      	strge	r1, [r4, #0]
 800ad2a:	b90d      	cbnz	r5, 800ad30 <_printf_i+0x110>
 800ad2c:	2e00      	cmp	r6, #0
 800ad2e:	d04b      	beq.n	800adc8 <_printf_i+0x1a8>
 800ad30:	4616      	mov	r6, r2
 800ad32:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad36:	fb03 5711 	mls	r7, r3, r1, r5
 800ad3a:	5dc7      	ldrb	r7, [r0, r7]
 800ad3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad40:	462f      	mov	r7, r5
 800ad42:	42bb      	cmp	r3, r7
 800ad44:	460d      	mov	r5, r1
 800ad46:	d9f4      	bls.n	800ad32 <_printf_i+0x112>
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d10b      	bne.n	800ad64 <_printf_i+0x144>
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	07df      	lsls	r7, r3, #31
 800ad50:	d508      	bpl.n	800ad64 <_printf_i+0x144>
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	6861      	ldr	r1, [r4, #4]
 800ad56:	4299      	cmp	r1, r3
 800ad58:	bfde      	ittt	le
 800ad5a:	2330      	movle	r3, #48	@ 0x30
 800ad5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad64:	1b92      	subs	r2, r2, r6
 800ad66:	6122      	str	r2, [r4, #16]
 800ad68:	f8cd a000 	str.w	sl, [sp]
 800ad6c:	464b      	mov	r3, r9
 800ad6e:	aa03      	add	r2, sp, #12
 800ad70:	4621      	mov	r1, r4
 800ad72:	4640      	mov	r0, r8
 800ad74:	f7ff fee6 	bl	800ab44 <_printf_common>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	d14a      	bne.n	800ae12 <_printf_i+0x1f2>
 800ad7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad80:	b004      	add	sp, #16
 800ad82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	f043 0320 	orr.w	r3, r3, #32
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	4833      	ldr	r0, [pc, #204]	@ (800ae5c <_printf_i+0x23c>)
 800ad90:	2778      	movs	r7, #120	@ 0x78
 800ad92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	6831      	ldr	r1, [r6, #0]
 800ad9a:	061f      	lsls	r7, r3, #24
 800ad9c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ada0:	d402      	bmi.n	800ada8 <_printf_i+0x188>
 800ada2:	065f      	lsls	r7, r3, #25
 800ada4:	bf48      	it	mi
 800ada6:	b2ad      	uxthmi	r5, r5
 800ada8:	6031      	str	r1, [r6, #0]
 800adaa:	07d9      	lsls	r1, r3, #31
 800adac:	bf44      	itt	mi
 800adae:	f043 0320 	orrmi.w	r3, r3, #32
 800adb2:	6023      	strmi	r3, [r4, #0]
 800adb4:	b11d      	cbz	r5, 800adbe <_printf_i+0x19e>
 800adb6:	2310      	movs	r3, #16
 800adb8:	e7ac      	b.n	800ad14 <_printf_i+0xf4>
 800adba:	4827      	ldr	r0, [pc, #156]	@ (800ae58 <_printf_i+0x238>)
 800adbc:	e7e9      	b.n	800ad92 <_printf_i+0x172>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	f023 0320 	bic.w	r3, r3, #32
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	e7f6      	b.n	800adb6 <_printf_i+0x196>
 800adc8:	4616      	mov	r6, r2
 800adca:	e7bd      	b.n	800ad48 <_printf_i+0x128>
 800adcc:	6833      	ldr	r3, [r6, #0]
 800adce:	6825      	ldr	r5, [r4, #0]
 800add0:	6961      	ldr	r1, [r4, #20]
 800add2:	1d18      	adds	r0, r3, #4
 800add4:	6030      	str	r0, [r6, #0]
 800add6:	062e      	lsls	r6, r5, #24
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	d501      	bpl.n	800ade0 <_printf_i+0x1c0>
 800addc:	6019      	str	r1, [r3, #0]
 800adde:	e002      	b.n	800ade6 <_printf_i+0x1c6>
 800ade0:	0668      	lsls	r0, r5, #25
 800ade2:	d5fb      	bpl.n	800addc <_printf_i+0x1bc>
 800ade4:	8019      	strh	r1, [r3, #0]
 800ade6:	2300      	movs	r3, #0
 800ade8:	6123      	str	r3, [r4, #16]
 800adea:	4616      	mov	r6, r2
 800adec:	e7bc      	b.n	800ad68 <_printf_i+0x148>
 800adee:	6833      	ldr	r3, [r6, #0]
 800adf0:	1d1a      	adds	r2, r3, #4
 800adf2:	6032      	str	r2, [r6, #0]
 800adf4:	681e      	ldr	r6, [r3, #0]
 800adf6:	6862      	ldr	r2, [r4, #4]
 800adf8:	2100      	movs	r1, #0
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7f5 fa00 	bl	8000200 <memchr>
 800ae00:	b108      	cbz	r0, 800ae06 <_printf_i+0x1e6>
 800ae02:	1b80      	subs	r0, r0, r6
 800ae04:	6060      	str	r0, [r4, #4]
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	6123      	str	r3, [r4, #16]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae10:	e7aa      	b.n	800ad68 <_printf_i+0x148>
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	4632      	mov	r2, r6
 800ae16:	4649      	mov	r1, r9
 800ae18:	4640      	mov	r0, r8
 800ae1a:	47d0      	blx	sl
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d0ad      	beq.n	800ad7c <_printf_i+0x15c>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	079b      	lsls	r3, r3, #30
 800ae24:	d413      	bmi.n	800ae4e <_printf_i+0x22e>
 800ae26:	68e0      	ldr	r0, [r4, #12]
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	4298      	cmp	r0, r3
 800ae2c:	bfb8      	it	lt
 800ae2e:	4618      	movlt	r0, r3
 800ae30:	e7a6      	b.n	800ad80 <_printf_i+0x160>
 800ae32:	2301      	movs	r3, #1
 800ae34:	4632      	mov	r2, r6
 800ae36:	4649      	mov	r1, r9
 800ae38:	4640      	mov	r0, r8
 800ae3a:	47d0      	blx	sl
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d09d      	beq.n	800ad7c <_printf_i+0x15c>
 800ae40:	3501      	adds	r5, #1
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	9903      	ldr	r1, [sp, #12]
 800ae46:	1a5b      	subs	r3, r3, r1
 800ae48:	42ab      	cmp	r3, r5
 800ae4a:	dcf2      	bgt.n	800ae32 <_printf_i+0x212>
 800ae4c:	e7eb      	b.n	800ae26 <_printf_i+0x206>
 800ae4e:	2500      	movs	r5, #0
 800ae50:	f104 0619 	add.w	r6, r4, #25
 800ae54:	e7f5      	b.n	800ae42 <_printf_i+0x222>
 800ae56:	bf00      	nop
 800ae58:	0800c384 	.word	0x0800c384
 800ae5c:	0800c395 	.word	0x0800c395

0800ae60 <__sflush_r>:
 800ae60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	0716      	lsls	r6, r2, #28
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	d454      	bmi.n	800af1a <__sflush_r+0xba>
 800ae70:	684b      	ldr	r3, [r1, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dc02      	bgt.n	800ae7c <__sflush_r+0x1c>
 800ae76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd48      	ble.n	800af0e <__sflush_r+0xae>
 800ae7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae7e:	2e00      	cmp	r6, #0
 800ae80:	d045      	beq.n	800af0e <__sflush_r+0xae>
 800ae82:	2300      	movs	r3, #0
 800ae84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae88:	682f      	ldr	r7, [r5, #0]
 800ae8a:	6a21      	ldr	r1, [r4, #32]
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	d030      	beq.n	800aef2 <__sflush_r+0x92>
 800ae90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	0759      	lsls	r1, r3, #29
 800ae96:	d505      	bpl.n	800aea4 <__sflush_r+0x44>
 800ae98:	6863      	ldr	r3, [r4, #4]
 800ae9a:	1ad2      	subs	r2, r2, r3
 800ae9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae9e:	b10b      	cbz	r3, 800aea4 <__sflush_r+0x44>
 800aea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aea2:	1ad2      	subs	r2, r2, r3
 800aea4:	2300      	movs	r3, #0
 800aea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aea8:	6a21      	ldr	r1, [r4, #32]
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b0      	blx	r6
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	d106      	bne.n	800aec2 <__sflush_r+0x62>
 800aeb4:	6829      	ldr	r1, [r5, #0]
 800aeb6:	291d      	cmp	r1, #29
 800aeb8:	d82b      	bhi.n	800af12 <__sflush_r+0xb2>
 800aeba:	4a2a      	ldr	r2, [pc, #168]	@ (800af64 <__sflush_r+0x104>)
 800aebc:	410a      	asrs	r2, r1
 800aebe:	07d6      	lsls	r6, r2, #31
 800aec0:	d427      	bmi.n	800af12 <__sflush_r+0xb2>
 800aec2:	2200      	movs	r2, #0
 800aec4:	6062      	str	r2, [r4, #4]
 800aec6:	04d9      	lsls	r1, r3, #19
 800aec8:	6922      	ldr	r2, [r4, #16]
 800aeca:	6022      	str	r2, [r4, #0]
 800aecc:	d504      	bpl.n	800aed8 <__sflush_r+0x78>
 800aece:	1c42      	adds	r2, r0, #1
 800aed0:	d101      	bne.n	800aed6 <__sflush_r+0x76>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	b903      	cbnz	r3, 800aed8 <__sflush_r+0x78>
 800aed6:	6560      	str	r0, [r4, #84]	@ 0x54
 800aed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeda:	602f      	str	r7, [r5, #0]
 800aedc:	b1b9      	cbz	r1, 800af0e <__sflush_r+0xae>
 800aede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aee2:	4299      	cmp	r1, r3
 800aee4:	d002      	beq.n	800aeec <__sflush_r+0x8c>
 800aee6:	4628      	mov	r0, r5
 800aee8:	f7ff fbf2 	bl	800a6d0 <_free_r>
 800aeec:	2300      	movs	r3, #0
 800aeee:	6363      	str	r3, [r4, #52]	@ 0x34
 800aef0:	e00d      	b.n	800af0e <__sflush_r+0xae>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b0      	blx	r6
 800aef8:	4602      	mov	r2, r0
 800aefa:	1c50      	adds	r0, r2, #1
 800aefc:	d1c9      	bne.n	800ae92 <__sflush_r+0x32>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0c6      	beq.n	800ae92 <__sflush_r+0x32>
 800af04:	2b1d      	cmp	r3, #29
 800af06:	d001      	beq.n	800af0c <__sflush_r+0xac>
 800af08:	2b16      	cmp	r3, #22
 800af0a:	d11e      	bne.n	800af4a <__sflush_r+0xea>
 800af0c:	602f      	str	r7, [r5, #0]
 800af0e:	2000      	movs	r0, #0
 800af10:	e022      	b.n	800af58 <__sflush_r+0xf8>
 800af12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af16:	b21b      	sxth	r3, r3
 800af18:	e01b      	b.n	800af52 <__sflush_r+0xf2>
 800af1a:	690f      	ldr	r7, [r1, #16]
 800af1c:	2f00      	cmp	r7, #0
 800af1e:	d0f6      	beq.n	800af0e <__sflush_r+0xae>
 800af20:	0793      	lsls	r3, r2, #30
 800af22:	680e      	ldr	r6, [r1, #0]
 800af24:	bf08      	it	eq
 800af26:	694b      	ldreq	r3, [r1, #20]
 800af28:	600f      	str	r7, [r1, #0]
 800af2a:	bf18      	it	ne
 800af2c:	2300      	movne	r3, #0
 800af2e:	eba6 0807 	sub.w	r8, r6, r7
 800af32:	608b      	str	r3, [r1, #8]
 800af34:	f1b8 0f00 	cmp.w	r8, #0
 800af38:	dde9      	ble.n	800af0e <__sflush_r+0xae>
 800af3a:	6a21      	ldr	r1, [r4, #32]
 800af3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af3e:	4643      	mov	r3, r8
 800af40:	463a      	mov	r2, r7
 800af42:	4628      	mov	r0, r5
 800af44:	47b0      	blx	r6
 800af46:	2800      	cmp	r0, #0
 800af48:	dc08      	bgt.n	800af5c <__sflush_r+0xfc>
 800af4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5c:	4407      	add	r7, r0
 800af5e:	eba8 0800 	sub.w	r8, r8, r0
 800af62:	e7e7      	b.n	800af34 <__sflush_r+0xd4>
 800af64:	dfbffffe 	.word	0xdfbffffe

0800af68 <_fflush_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	690b      	ldr	r3, [r1, #16]
 800af6c:	4605      	mov	r5, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	b913      	cbnz	r3, 800af78 <_fflush_r+0x10>
 800af72:	2500      	movs	r5, #0
 800af74:	4628      	mov	r0, r5
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	b118      	cbz	r0, 800af82 <_fflush_r+0x1a>
 800af7a:	6a03      	ldr	r3, [r0, #32]
 800af7c:	b90b      	cbnz	r3, 800af82 <_fflush_r+0x1a>
 800af7e:	f7ff f9ad 	bl	800a2dc <__sinit>
 800af82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f3      	beq.n	800af72 <_fflush_r+0xa>
 800af8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af8c:	07d0      	lsls	r0, r2, #31
 800af8e:	d404      	bmi.n	800af9a <_fflush_r+0x32>
 800af90:	0599      	lsls	r1, r3, #22
 800af92:	d402      	bmi.n	800af9a <_fflush_r+0x32>
 800af94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af96:	f7ff fb98 	bl	800a6ca <__retarget_lock_acquire_recursive>
 800af9a:	4628      	mov	r0, r5
 800af9c:	4621      	mov	r1, r4
 800af9e:	f7ff ff5f 	bl	800ae60 <__sflush_r>
 800afa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afa4:	07da      	lsls	r2, r3, #31
 800afa6:	4605      	mov	r5, r0
 800afa8:	d4e4      	bmi.n	800af74 <_fflush_r+0xc>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	059b      	lsls	r3, r3, #22
 800afae:	d4e1      	bmi.n	800af74 <_fflush_r+0xc>
 800afb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afb2:	f7ff fb8b 	bl	800a6cc <__retarget_lock_release_recursive>
 800afb6:	e7dd      	b.n	800af74 <_fflush_r+0xc>

0800afb8 <__swhatbuf_r>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	460c      	mov	r4, r1
 800afbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc0:	2900      	cmp	r1, #0
 800afc2:	b096      	sub	sp, #88	@ 0x58
 800afc4:	4615      	mov	r5, r2
 800afc6:	461e      	mov	r6, r3
 800afc8:	da0d      	bge.n	800afe6 <__swhatbuf_r+0x2e>
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afd0:	f04f 0100 	mov.w	r1, #0
 800afd4:	bf14      	ite	ne
 800afd6:	2340      	movne	r3, #64	@ 0x40
 800afd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afdc:	2000      	movs	r0, #0
 800afde:	6031      	str	r1, [r6, #0]
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	b016      	add	sp, #88	@ 0x58
 800afe4:	bd70      	pop	{r4, r5, r6, pc}
 800afe6:	466a      	mov	r2, sp
 800afe8:	f000 f848 	bl	800b07c <_fstat_r>
 800afec:	2800      	cmp	r0, #0
 800afee:	dbec      	blt.n	800afca <__swhatbuf_r+0x12>
 800aff0:	9901      	ldr	r1, [sp, #4]
 800aff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800affa:	4259      	negs	r1, r3
 800affc:	4159      	adcs	r1, r3
 800affe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b002:	e7eb      	b.n	800afdc <__swhatbuf_r+0x24>

0800b004 <__smakebuf_r>:
 800b004:	898b      	ldrh	r3, [r1, #12]
 800b006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b008:	079d      	lsls	r5, r3, #30
 800b00a:	4606      	mov	r6, r0
 800b00c:	460c      	mov	r4, r1
 800b00e:	d507      	bpl.n	800b020 <__smakebuf_r+0x1c>
 800b010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	2301      	movs	r3, #1
 800b01a:	6163      	str	r3, [r4, #20]
 800b01c:	b003      	add	sp, #12
 800b01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b020:	ab01      	add	r3, sp, #4
 800b022:	466a      	mov	r2, sp
 800b024:	f7ff ffc8 	bl	800afb8 <__swhatbuf_r>
 800b028:	9f00      	ldr	r7, [sp, #0]
 800b02a:	4605      	mov	r5, r0
 800b02c:	4639      	mov	r1, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff fbba 	bl	800a7a8 <_malloc_r>
 800b034:	b948      	cbnz	r0, 800b04a <__smakebuf_r+0x46>
 800b036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03a:	059a      	lsls	r2, r3, #22
 800b03c:	d4ee      	bmi.n	800b01c <__smakebuf_r+0x18>
 800b03e:	f023 0303 	bic.w	r3, r3, #3
 800b042:	f043 0302 	orr.w	r3, r3, #2
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	e7e2      	b.n	800b010 <__smakebuf_r+0xc>
 800b04a:	89a3      	ldrh	r3, [r4, #12]
 800b04c:	6020      	str	r0, [r4, #0]
 800b04e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b05a:	b15b      	cbz	r3, 800b074 <__smakebuf_r+0x70>
 800b05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b060:	4630      	mov	r0, r6
 800b062:	f000 f81d 	bl	800b0a0 <_isatty_r>
 800b066:	b128      	cbz	r0, 800b074 <__smakebuf_r+0x70>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	f043 0301 	orr.w	r3, r3, #1
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	431d      	orrs	r5, r3
 800b078:	81a5      	strh	r5, [r4, #12]
 800b07a:	e7cf      	b.n	800b01c <__smakebuf_r+0x18>

0800b07c <_fstat_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d07      	ldr	r5, [pc, #28]	@ (800b09c <_fstat_r+0x20>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	4611      	mov	r1, r2
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	f7fe febe 	bl	8009e0a <_fstat>
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d102      	bne.n	800b098 <_fstat_r+0x1c>
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	b103      	cbz	r3, 800b098 <_fstat_r+0x1c>
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	bd38      	pop	{r3, r4, r5, pc}
 800b09a:	bf00      	nop
 800b09c:	20025f24 	.word	0x20025f24

0800b0a0 <_isatty_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4d06      	ldr	r5, [pc, #24]	@ (800b0bc <_isatty_r+0x1c>)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	602b      	str	r3, [r5, #0]
 800b0ac:	f7ff f810 	bl	800a0d0 <_isatty>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d102      	bne.n	800b0ba <_isatty_r+0x1a>
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	b103      	cbz	r3, 800b0ba <_isatty_r+0x1a>
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	bd38      	pop	{r3, r4, r5, pc}
 800b0bc:	20025f24 	.word	0x20025f24

0800b0c0 <_sbrk_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d06      	ldr	r5, [pc, #24]	@ (800b0dc <_sbrk_r+0x1c>)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	f7fb fba4 	bl	8006818 <_sbrk>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_sbrk_r+0x1a>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_sbrk_r+0x1a>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20025f24 	.word	0x20025f24

0800b0e0 <_init>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	bf00      	nop
 800b0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e6:	bc08      	pop	{r3}
 800b0e8:	469e      	mov	lr, r3
 800b0ea:	4770      	bx	lr

0800b0ec <_fini>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr
