
ELamLabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c0c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  08006dbc  08006dbc  00007dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008024  08008024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008028  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025bc8  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c40  20025c40  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e532  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b8c  00000000  00000000  000185da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0001b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b06  00000000  00000000  0001bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256d3  00000000  00000000  0001cafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013253  00000000  00000000  000421d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8a00  00000000  00000000  00055424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012de24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045bc  00000000  00000000  0012de68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00132424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006da4 	.word	0x08006da4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08006da4 	.word	0x08006da4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	//initialise_monitor_handles(); // Allows printf functionality
    LTCD__Init();
 8000584:	f000 fdd4 	bl	8001130 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fd91 	bl	80010b0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800058e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000592:	2000      	movs	r0, #0
 8000594:	f000 fedc 	bl	8001350 <LCD_Clear>
    RNGInit();
 8000598:	f001 f816 	bl	80015c8 <RNGInit>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 ffde 	bl	800155c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f815 	bl	80005d4 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000094 	.word	0x20000094

080005b4 <spawnBlock>:
		}
	}
}

void spawnBlock()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	spawn_block();
 80005b8:	f000 fc4e 	bl	8000e58 <spawn_block>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <spawnSquare>:

void spawnSquare()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	spawn_square(xstart2, 0, LCD_COLOR_YELLOW);
 80005c4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2060      	movs	r0, #96	@ 0x60
 80005cc:	f000 f8ca 	bl	8000764 <spawn_square>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005ec:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005f2:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6313      	str	r3, [r2, #48]	@ 0x30
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4807      	ldr	r0, [pc, #28]	@ (800063c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800061e:	f002 fb9f 	bl	8002d60 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000622:	2028      	movs	r0, #40	@ 0x28
 8000624:	f002 fb4d 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800062a:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800062c:	601a      	str	r2, [r3, #0]

}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000
 8000640:	2000009c 	.word	0x2000009c
 8000644:	0600000f 	.word	0x0600000f

08000648 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f002 fb45 	bl	8002cde <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000654:	2300      	movs	r3, #0
 8000656:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000658:	4b3a      	ldr	r3, [pc, #232]	@ (8000744 <EXTI15_10_IRQHandler+0xfc>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800065e:	e006      	b.n	800066e <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000660:	204c      	movs	r0, #76	@ 0x4c
 8000662:	f001 fe5c 	bl	800231e <STMPE811_Read>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <EXTI15_10_IRQHandler+0xfc>)
 800066c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800066e:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <EXTI15_10_IRQHandler+0xfc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f4      	beq.n	8000660 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000676:	200a      	movs	r0, #10
 8000678:	f000 ff86 	bl	8001588 <ReadRegisterFromTouchModule>
 800067c:	4603      	mov	r3, r0
 800067e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000680:	2100      	movs	r1, #0
 8000682:	200a      	movs	r0, #10
 8000684:	f000 ff8e 	bl	80015a4 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000688:	200b      	movs	r0, #11
 800068a:	f000 ff7d 	bl	8001588 <ReadRegisterFromTouchModule>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <EXTI15_10_IRQHandler+0x100>)
 8000694:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000696:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <EXTI15_10_IRQHandler+0x100>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80006a0:	797b      	ldrb	r3, [r7, #5]
 80006a2:	4619      	mov	r1, r3
 80006a4:	200b      	movs	r0, #11
 80006a6:	f000 ff7d 	bl	80015a4 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006aa:	2040      	movs	r0, #64	@ 0x40
 80006ac:	f000 ff6c 	bl	8001588 <ReadRegisterFromTouchModule>
 80006b0:	4603      	mov	r3, r0
 80006b2:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006b4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	da01      	bge.n	80006c0 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006bc:	2301      	movs	r3, #1
 80006be:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01a      	beq.n	80006fc <EXTI15_10_IRQHandler+0xb4>
	{
		printf("\nPressed");
 80006c6:	4821      	ldr	r0, [pc, #132]	@ (800074c <EXTI15_10_IRQHandler+0x104>)
 80006c8:	f005 fca0 	bl	800600c <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 80006cc:	4820      	ldr	r0, [pc, #128]	@ (8000750 <EXTI15_10_IRQHandler+0x108>)
 80006ce:	f000 ff50 	bl	8001572 <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80006d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <EXTI15_10_IRQHandler+0x108>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <EXTI15_10_IRQHandler+0x108>)
 80006da:	885b      	ldrh	r3, [r3, #2]
 80006dc:	461a      	mov	r2, r3
 80006de:	481d      	ldr	r0, [pc, #116]	@ (8000754 <EXTI15_10_IRQHandler+0x10c>)
 80006e0:	f005 fc94 	bl	800600c <iprintf>
		if(level == 1)
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <EXTI15_10_IRQHandler+0x110>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10a      	bne.n	8000702 <EXTI15_10_IRQHandler+0xba>
		{
			LCD_DrawGrid();
 80006ec:	f000 fdea 	bl	80012c4 <LCD_DrawGrid>
			spawnBlock();
 80006f0:	f7ff ff60 	bl	80005b4 <spawnBlock>
			level =2;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <EXTI15_10_IRQHandler+0x110>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	801a      	strh	r2, [r3, #0]
 80006fa:	e002      	b.n	8000702 <EXTI15_10_IRQHandler+0xba>
		}

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006fc:	4817      	ldr	r0, [pc, #92]	@ (800075c <EXTI15_10_IRQHandler+0x114>)
 80006fe:	f005 fced 	bl	80060dc <puts>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000702:	2101      	movs	r1, #1
 8000704:	204b      	movs	r0, #75	@ 0x4b
 8000706:	f001 fe1b 	bl	8002340 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800070a:	2100      	movs	r1, #0
 800070c:	204b      	movs	r0, #75	@ 0x4b
 800070e:	f001 fe17 	bl	8002340 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	4619      	mov	r1, r3
 8000716:	200a      	movs	r0, #10
 8000718:	f000 ff44 	bl	80015a4 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800071c:	2103      	movs	r1, #3
 800071e:	4810      	ldr	r0, [pc, #64]	@ (8000760 <EXTI15_10_IRQHandler+0x118>)
 8000720:	f002 fb06 	bl	8002d30 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000724:	2028      	movs	r0, #40	@ 0x28
 8000726:	f002 faf4 	bl	8002d12 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800072a:	2028      	movs	r0, #40	@ 0x28
 800072c:	f002 fac9 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	4619      	mov	r1, r3
 8000734:	200b      	movs	r0, #11
 8000736:	f000 ff35 	bl	80015a4 <WriteDataToTouchModule>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000a8 	.word	0x200000a8
 8000748:	200000a4 	.word	0x200000a4
 800074c:	08006de0 	.word	0x08006de0
 8000750:	20000094 	.word	0x20000094
 8000754:	08006dbc 	.word	0x08006dbc
 8000758:	20000002 	.word	0x20000002
 800075c:	08006dec 	.word	0x08006dec
 8000760:	2000009c 	.word	0x2000009c

08000764 <spawn_square>:
{

}

void spawn_square(int16_t x, int16_t y, uint16_t color)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	460b      	mov	r3, r1
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	807b      	strh	r3, [r7, #2]
	//block 1
	for(uint16_t i = x; i < x + xgrid ; i++)
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	81fb      	strh	r3, [r7, #14]
 800077a:	e008      	b.n	800078e <spawn_square+0x2a>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 800077c:	88b9      	ldrh	r1, [r7, #4]
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	89f8      	ldrh	r0, [r7, #14]
 8000782:	2218      	movs	r2, #24
 8000784:	f000 fd50 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + xgrid ; i++)
 8000788:	89fb      	ldrh	r3, [r7, #14]
 800078a:	3301      	adds	r3, #1
 800078c:	81fb      	strh	r3, [r7, #14]
 800078e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000792:	f103 0217 	add.w	r2, r3, #23
 8000796:	89fb      	ldrh	r3, [r7, #14]
 8000798:	429a      	cmp	r2, r3
 800079a:	daef      	bge.n	800077c <spawn_square+0x18>
	}
	LCD_Draw_Vertical_Line(x,y,ygrid, LCD_COLOR_WHITE);
 800079c:	88f8      	ldrh	r0, [r7, #6]
 800079e:	88b9      	ldrh	r1, [r7, #4]
 80007a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a4:	2218      	movs	r2, #24
 80007a6:	f000 fd3f 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,xgrid, LCD_COLOR_WHITE);
 80007aa:	88f8      	ldrh	r0, [r7, #6]
 80007ac:	88b9      	ldrh	r1, [r7, #4]
 80007ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b2:	2218      	movs	r2, #24
 80007b4:	f000 fd5f 	bl	8001276 <LCD_Draw_Horizontal_Line>
	//block 2
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	3318      	adds	r3, #24
 80007bc:	81bb      	strh	r3, [r7, #12]
 80007be:	e008      	b.n	80007d2 <spawn_square+0x6e>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 80007c0:	88b9      	ldrh	r1, [r7, #4]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	89b8      	ldrh	r0, [r7, #12]
 80007c6:	2218      	movs	r2, #24
 80007c8:	f000 fd2e 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d6:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80007da:	89bb      	ldrh	r3, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	daef      	bge.n	80007c0 <spawn_square+0x5c>
	}
	LCD_Draw_Vertical_Line(x+xgrid,y,ygrid, LCD_COLOR_WHITE);
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	3318      	adds	r3, #24
 80007e4:	b298      	uxth	r0, r3
 80007e6:	88b9      	ldrh	r1, [r7, #4]
 80007e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ec:	2218      	movs	r2, #24
 80007ee:	f000 fd1b 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y,xgrid, LCD_COLOR_WHITE);
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	3318      	adds	r3, #24
 80007f6:	b298      	uxth	r0, r3
 80007f8:	88b9      	ldrh	r1, [r7, #4]
 80007fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007fe:	2218      	movs	r2, #24
 8000800:	f000 fd39 	bl	8001276 <LCD_Draw_Horizontal_Line>
	//block 3
	for(uint16_t i = x; i < x + xgrid ; i++)
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	817b      	strh	r3, [r7, #10]
 8000808:	e00a      	b.n	8000820 <spawn_square+0xbc>
	{
		LCD_Draw_Vertical_Line(i, y+ygrid, ygrid, color);
 800080a:	88bb      	ldrh	r3, [r7, #4]
 800080c:	3318      	adds	r3, #24
 800080e:	b299      	uxth	r1, r3
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	8978      	ldrh	r0, [r7, #10]
 8000814:	2218      	movs	r2, #24
 8000816:	f000 fd07 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + xgrid ; i++)
 800081a:	897b      	ldrh	r3, [r7, #10]
 800081c:	3301      	adds	r3, #1
 800081e:	817b      	strh	r3, [r7, #10]
 8000820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000824:	f103 0217 	add.w	r2, r3, #23
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	429a      	cmp	r2, r3
 800082c:	daed      	bge.n	800080a <spawn_square+0xa6>
	}
	LCD_Draw_Vertical_Line(x,y+ygrid,ygrid, LCD_COLOR_WHITE);
 800082e:	88f8      	ldrh	r0, [r7, #6]
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	3318      	adds	r3, #24
 8000834:	b299      	uxth	r1, r3
 8000836:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800083a:	2218      	movs	r2, #24
 800083c:	f000 fcf4 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000840:	88f8      	ldrh	r0, [r7, #6]
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	3318      	adds	r3, #24
 8000846:	b299      	uxth	r1, r3
 8000848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084c:	2218      	movs	r2, #24
 800084e:	f000 fd12 	bl	8001276 <LCD_Draw_Horizontal_Line>

	//block 4
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	3318      	adds	r3, #24
 8000856:	813b      	strh	r3, [r7, #8]
 8000858:	e00a      	b.n	8000870 <spawn_square+0x10c>
	{
		LCD_Draw_Vertical_Line(i, y+ygrid, ygrid, color);
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	3318      	adds	r3, #24
 800085e:	b299      	uxth	r1, r3
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	8938      	ldrh	r0, [r7, #8]
 8000864:	2218      	movs	r2, #24
 8000866:	f000 fcdf 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x+xgrid; i < x + 2*xgrid ; i++)
 800086a:	893b      	ldrh	r3, [r7, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	813b      	strh	r3, [r7, #8]
 8000870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000874:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000878:	893b      	ldrh	r3, [r7, #8]
 800087a:	429a      	cmp	r2, r3
 800087c:	daed      	bge.n	800085a <spawn_square+0xf6>
	}
	LCD_Draw_Vertical_Line(x+xgrid,y+ygrid,ygrid, LCD_COLOR_WHITE);
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	3318      	adds	r3, #24
 8000882:	b298      	uxth	r0, r3
 8000884:	88bb      	ldrh	r3, [r7, #4]
 8000886:	3318      	adds	r3, #24
 8000888:	b299      	uxth	r1, r3
 800088a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800088e:	2218      	movs	r2, #24
 8000890:	f000 fcca 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	3318      	adds	r3, #24
 8000898:	b298      	uxth	r0, r3
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	3318      	adds	r3, #24
 800089e:	b299      	uxth	r1, r3
 80008a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008a4:	2218      	movs	r2, #24
 80008a6:	f000 fce6 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <spawn_rect>:
void spawn_rect(int16_t x, int16_t y, uint16_t color)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	460b      	mov	r3, r1
 80008be:	80bb      	strh	r3, [r7, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = x; i < x + xgrid*4 ; i++)
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	81fb      	strh	r3, [r7, #14]
 80008c8:	e008      	b.n	80008dc <spawn_rect+0x2a>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 80008ca:	88b9      	ldrh	r1, [r7, #4]
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	89f8      	ldrh	r0, [r7, #14]
 80008d0:	2218      	movs	r2, #24
 80008d2:	f000 fca9 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + xgrid*4 ; i++)
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	3301      	adds	r3, #1
 80008da:	81fb      	strh	r3, [r7, #14]
 80008dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e0:	f103 025f 	add.w	r2, r3, #95	@ 0x5f
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	daef      	bge.n	80008ca <spawn_rect+0x18>
	}
	LCD_Draw_Vertical_Line(x,y,ygrid, LCD_COLOR_WHITE);
 80008ea:	88f8      	ldrh	r0, [r7, #6]
 80008ec:	88b9      	ldrh	r1, [r7, #4]
 80008ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008f2:	2218      	movs	r2, #24
 80008f4:	f000 fc98 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,xgrid, LCD_COLOR_WHITE);
 80008f8:	88f8      	ldrh	r0, [r7, #6]
 80008fa:	88b9      	ldrh	r1, [r7, #4]
 80008fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000900:	2218      	movs	r2, #24
 8000902:	f000 fcb8 	bl	8001276 <LCD_Draw_Horizontal_Line>

	LCD_Draw_Vertical_Line(x+xgrid,y,ygrid, LCD_COLOR_WHITE);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	3318      	adds	r3, #24
 800090a:	b298      	uxth	r0, r3
 800090c:	88b9      	ldrh	r1, [r7, #4]
 800090e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000912:	2218      	movs	r2, #24
 8000914:	f000 fc88 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y,xgrid, LCD_COLOR_WHITE);
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	3318      	adds	r3, #24
 800091c:	b298      	uxth	r0, r3
 800091e:	88b9      	ldrh	r1, [r7, #4]
 8000920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000924:	2218      	movs	r2, #24
 8000926:	f000 fca6 	bl	8001276 <LCD_Draw_Horizontal_Line>

	LCD_Draw_Vertical_Line(x+2*xgrid,y,ygrid, LCD_COLOR_WHITE);
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	3330      	adds	r3, #48	@ 0x30
 800092e:	b298      	uxth	r0, r3
 8000930:	88b9      	ldrh	r1, [r7, #4]
 8000932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000936:	2218      	movs	r2, #24
 8000938:	f000 fc76 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+2*xgrid,y,xgrid, LCD_COLOR_WHITE);
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	3330      	adds	r3, #48	@ 0x30
 8000940:	b298      	uxth	r0, r3
 8000942:	88b9      	ldrh	r1, [r7, #4]
 8000944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000948:	2218      	movs	r2, #24
 800094a:	f000 fc94 	bl	8001276 <LCD_Draw_Horizontal_Line>

	LCD_Draw_Vertical_Line(x+3*xgrid,y,ygrid, LCD_COLOR_WHITE);
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	3348      	adds	r3, #72	@ 0x48
 8000952:	b298      	uxth	r0, r3
 8000954:	88b9      	ldrh	r1, [r7, #4]
 8000956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800095a:	2218      	movs	r2, #24
 800095c:	f000 fc64 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+3*xgrid,y,xgrid, LCD_COLOR_WHITE);
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	3348      	adds	r3, #72	@ 0x48
 8000964:	b298      	uxth	r0, r3
 8000966:	88b9      	ldrh	r1, [r7, #4]
 8000968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096c:	2218      	movs	r2, #24
 800096e:	f000 fc82 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <spawn_s>:
void spawn_s(int16_t x, int16_t y, uint16_t color)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	460b      	mov	r3, r1
 8000986:	80bb      	strh	r3, [r7, #4]
 8000988:	4613      	mov	r3, r2
 800098a:	807b      	strh	r3, [r7, #2]
	//block 1 & 2
	for(uint16_t i = x; i < x + 2*xgrid ; i++)
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	81fb      	strh	r3, [r7, #14]
 8000990:	e008      	b.n	80009a4 <spawn_s+0x2a>
	{
		LCD_Draw_Vertical_Line(i, y, ygrid, color);
 8000992:	88b9      	ldrh	r1, [r7, #4]
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	89f8      	ldrh	r0, [r7, #14]
 8000998:	2218      	movs	r2, #24
 800099a:	f000 fc45 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(uint16_t i = x; i < x + 2*xgrid ; i++)
 800099e:	89fb      	ldrh	r3, [r7, #14]
 80009a0:	3301      	adds	r3, #1
 80009a2:	81fb      	strh	r3, [r7, #14]
 80009a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a8:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	daef      	bge.n	8000992 <spawn_s+0x18>
	}
	LCD_Draw_Vertical_Line(x,y,ygrid, LCD_COLOR_WHITE);
 80009b2:	88f8      	ldrh	r0, [r7, #6]
 80009b4:	88b9      	ldrh	r1, [r7, #4]
 80009b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ba:	2218      	movs	r2, #24
 80009bc:	f000 fc34 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,xgrid, LCD_COLOR_WHITE);
 80009c0:	88f8      	ldrh	r0, [r7, #6]
 80009c2:	88b9      	ldrh	r1, [r7, #4]
 80009c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c8:	2218      	movs	r2, #24
 80009ca:	f000 fc54 	bl	8001276 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x+xgrid,y,ygrid, LCD_COLOR_WHITE);
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	3318      	adds	r3, #24
 80009d2:	b298      	uxth	r0, r3
 80009d4:	88b9      	ldrh	r1, [r7, #4]
 80009d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009da:	2218      	movs	r2, #24
 80009dc:	f000 fc24 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x+xgrid,y,xgrid, LCD_COLOR_WHITE);
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	3318      	adds	r3, #24
 80009e4:	b298      	uxth	r0, r3
 80009e6:	88b9      	ldrh	r1, [r7, #4]
 80009e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ec:	2218      	movs	r2, #24
 80009ee:	f000 fc42 	bl	8001276 <LCD_Draw_Horizontal_Line>
	//block 3 & 4
	for(int16_t i = x-xgrid; i < x + xgrid ; i++)
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3b18      	subs	r3, #24
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	81bb      	strh	r3, [r7, #12]
 80009fa:	e00d      	b.n	8000a18 <spawn_s+0x9e>
	{
		LCD_Draw_Vertical_Line(i, y+ygrid, ygrid, color);
 80009fc:	89b8      	ldrh	r0, [r7, #12]
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	3318      	adds	r3, #24
 8000a02:	b299      	uxth	r1, r3
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	2218      	movs	r2, #24
 8000a08:	f000 fc0e 	bl	8001228 <LCD_Draw_Vertical_Line>
	for(int16_t i = x-xgrid; i < x + xgrid ; i++)
 8000a0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	81bb      	strh	r3, [r7, #12]
 8000a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1c:	f103 0217 	add.w	r2, r3, #23
 8000a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dae9      	bge.n	80009fc <spawn_s+0x82>
	}
	LCD_Draw_Vertical_Line(x-xgrid,y+ygrid,ygrid, LCD_COLOR_WHITE);
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	3b18      	subs	r3, #24
 8000a2c:	b298      	uxth	r0, r3
 8000a2e:	88bb      	ldrh	r3, [r7, #4]
 8000a30:	3318      	adds	r3, #24
 8000a32:	b299      	uxth	r1, r3
 8000a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a38:	2218      	movs	r2, #24
 8000a3a:	f000 fbf5 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x-xgrid,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	3b18      	subs	r3, #24
 8000a42:	b298      	uxth	r0, r3
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	3318      	adds	r3, #24
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a4e:	2218      	movs	r2, #24
 8000a50:	f000 fc11 	bl	8001276 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(x,y+ygrid,ygrid, LCD_COLOR_WHITE);
 8000a54:	88f8      	ldrh	r0, [r7, #6]
 8000a56:	88bb      	ldrh	r3, [r7, #4]
 8000a58:	3318      	adds	r3, #24
 8000a5a:	b299      	uxth	r1, r3
 8000a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a60:	2218      	movs	r2, #24
 8000a62:	f000 fbe1 	bl	8001228 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y+ygrid,xgrid, LCD_COLOR_WHITE);
 8000a66:	88f8      	ldrh	r0, [r7, #6]
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	3318      	adds	r3, #24
 8000a6c:	b299      	uxth	r1, r3
 8000a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a72:	2218      	movs	r2, #24
 8000a74:	f000 fbff 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <spawn_z>:
void spawn_z(int16_t x, int16_t y, uint16_t color)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	807b      	strh	r3, [r7, #2]
    // Block 1 & 2
    for (uint16_t i = x; i < x + 2 * xgrid; i++) {
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	81fb      	strh	r3, [r7, #14]
 8000a96:	e008      	b.n	8000aaa <spawn_z+0x2a>
        LCD_Draw_Vertical_Line(i, y, ygrid, color); // Top horizontal line
 8000a98:	88b9      	ldrh	r1, [r7, #4]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	89f8      	ldrh	r0, [r7, #14]
 8000a9e:	2218      	movs	r2, #24
 8000aa0:	f000 fbc2 	bl	8001228 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x; i < x + 2 * xgrid; i++) {
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	81fb      	strh	r3, [r7, #14]
 8000aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aae:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	daef      	bge.n	8000a98 <spawn_z+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000ab8:	88f8      	ldrh	r0, [r7, #6]
 8000aba:	88b9      	ldrh	r1, [r7, #4]
 8000abc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac0:	2218      	movs	r2, #24
 8000ac2:	f000 fbb1 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000ac6:	88f8      	ldrh	r0, [r7, #6]
 8000ac8:	88b9      	ldrh	r1, [r7, #4]
 8000aca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ace:	2218      	movs	r2, #24
 8000ad0:	f000 fbd1 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	3318      	adds	r3, #24
 8000ad8:	b298      	uxth	r0, r3
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ae0:	2218      	movs	r2, #24
 8000ae2:	f000 fba1 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	3318      	adds	r3, #24
 8000aea:	b298      	uxth	r0, r3
 8000aec:	88b9      	ldrh	r1, [r7, #4]
 8000aee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000af2:	2218      	movs	r2, #24
 8000af4:	f000 fbbf 	bl	8001276 <LCD_Draw_Horizontal_Line>

    // Block 3 & 4
    for (uint16_t i = x + xgrid; i < x + 3 * xgrid; i++) {
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	3318      	adds	r3, #24
 8000afc:	81bb      	strh	r3, [r7, #12]
 8000afe:	e00a      	b.n	8000b16 <spawn_z+0x96>
        LCD_Draw_Vertical_Line(i, y + ygrid, ygrid, color); // Bottom horizontal line
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	3318      	adds	r3, #24
 8000b04:	b299      	uxth	r1, r3
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	89b8      	ldrh	r0, [r7, #12]
 8000b0a:	2218      	movs	r2, #24
 8000b0c:	f000 fb8c 	bl	8001228 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x + xgrid; i < x + 3 * xgrid; i++) {
 8000b10:	89bb      	ldrh	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	81bb      	strh	r3, [r7, #12]
 8000b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1a:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000b1e:	89bb      	ldrh	r3, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	daed      	bge.n	8000b00 <spawn_z+0x80>
    }
    LCD_Draw_Vertical_Line(x + xgrid, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	3318      	adds	r3, #24
 8000b28:	b298      	uxth	r0, r3
 8000b2a:	88bb      	ldrh	r3, [r7, #4]
 8000b2c:	3318      	adds	r3, #24
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b34:	2218      	movs	r2, #24
 8000b36:	f000 fb77 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	b298      	uxth	r0, r3
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	3318      	adds	r3, #24
 8000b44:	b299      	uxth	r1, r3
 8000b46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b4a:	2218      	movs	r2, #24
 8000b4c:	f000 fb93 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + 2 * xgrid, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	3330      	adds	r3, #48	@ 0x30
 8000b54:	b298      	uxth	r0, r3
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	3318      	adds	r3, #24
 8000b5a:	b299      	uxth	r1, r3
 8000b5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b60:	2218      	movs	r2, #24
 8000b62:	f000 fb61 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + 2 * xgrid, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	3330      	adds	r3, #48	@ 0x30
 8000b6a:	b298      	uxth	r0, r3
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	3318      	adds	r3, #24
 8000b70:	b299      	uxth	r1, r3
 8000b72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b76:	2218      	movs	r2, #24
 8000b78:	f000 fb7d 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <spawn_l>:
void spawn_l(int16_t x, int16_t y, uint16_t color)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	80bb      	strh	r3, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	807b      	strh	r3, [r7, #2]
    // Block 1 & 2 (Vertical line)
    for (uint16_t i = y; i < y + 2 * ygrid; i++) {
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e008      	b.n	8000bae <spawn_l+0x2a>
        LCD_Draw_Horizontal_Line(x, i, xgrid, color); // Vertical part of the "L"
 8000b9c:	88f8      	ldrh	r0, [r7, #6]
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	89f9      	ldrh	r1, [r7, #14]
 8000ba2:	2218      	movs	r2, #24
 8000ba4:	f000 fb67 	bl	8001276 <LCD_Draw_Horizontal_Line>
    for (uint16_t i = y; i < y + 2 * ygrid; i++) {
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	3301      	adds	r3, #1
 8000bac:	81fb      	strh	r3, [r7, #14]
 8000bae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bb2:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	daef      	bge.n	8000b9c <spawn_l+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000bbc:	88f8      	ldrh	r0, [r7, #6]
 8000bbe:	88b9      	ldrh	r1, [r7, #4]
 8000bc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bc4:	2218      	movs	r2, #24
 8000bc6:	f000 fb2f 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(x, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000bca:	88f8      	ldrh	r0, [r7, #6]
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	3318      	adds	r3, #24
 8000bd0:	b299      	uxth	r1, r3
 8000bd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bd6:	2218      	movs	r2, #24
 8000bd8:	f000 fb26 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000bdc:	88f8      	ldrh	r0, [r7, #6]
 8000bde:	88b9      	ldrh	r1, [r7, #4]
 8000be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be4:	2218      	movs	r2, #24
 8000be6:	f000 fb46 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000bea:	88f8      	ldrh	r0, [r7, #6]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	3318      	adds	r3, #24
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bf6:	2218      	movs	r2, #24
 8000bf8:	f000 fb3d 	bl	8001276 <LCD_Draw_Horizontal_Line>

    // Block 3 (Bottom horizontal line)
    for (uint16_t i = x; i < x + xgrid; i++) {
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	81bb      	strh	r3, [r7, #12]
 8000c00:	e00a      	b.n	8000c18 <spawn_l+0x94>
        LCD_Draw_Vertical_Line(i, y + 2 * ygrid, ygrid, color); // Bottom part of the "L"
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	3330      	adds	r3, #48	@ 0x30
 8000c06:	b299      	uxth	r1, r3
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	89b8      	ldrh	r0, [r7, #12]
 8000c0c:	2218      	movs	r2, #24
 8000c0e:	f000 fb0b 	bl	8001228 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x; i < x + xgrid; i++) {
 8000c12:	89bb      	ldrh	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	81bb      	strh	r3, [r7, #12]
 8000c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1c:	f103 0217 	add.w	r2, r3, #23
 8000c20:	89bb      	ldrh	r3, [r7, #12]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	daed      	bge.n	8000c02 <spawn_l+0x7e>
    }
    LCD_Draw_Vertical_Line(x, y + 2 * ygrid, ygrid, LCD_COLOR_WHITE);
 8000c26:	88f8      	ldrh	r0, [r7, #6]
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	3330      	adds	r3, #48	@ 0x30
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c32:	2218      	movs	r2, #24
 8000c34:	f000 faf8 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000c38:	88f8      	ldrh	r0, [r7, #6]
 8000c3a:	88bb      	ldrh	r3, [r7, #4]
 8000c3c:	3330      	adds	r3, #48	@ 0x30
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c44:	2218      	movs	r2, #24
 8000c46:	f000 fb16 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	3330      	adds	r3, #48	@ 0x30
 8000c54:	b299      	uxth	r1, r3
 8000c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c5a:	2218      	movs	r2, #24
 8000c5c:	f000 fb0b 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <spawn_j>:
void spawn_j(int16_t x, int16_t y, uint16_t color)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	460b      	mov	r3, r1
 8000c74:	80bb      	strh	r3, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	807b      	strh	r3, [r7, #2]
    // Block 1 & 2 (Vertical line)
    for (uint16_t i = y; i < y + 3 * ygrid; i++) {
 8000c7a:	88bb      	ldrh	r3, [r7, #4]
 8000c7c:	81fb      	strh	r3, [r7, #14]
 8000c7e:	e008      	b.n	8000c92 <spawn_j+0x2a>
        LCD_Draw_Horizontal_Line(x, i, xgrid, color); // Vertical part of the "J"
 8000c80:	88f8      	ldrh	r0, [r7, #6]
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	89f9      	ldrh	r1, [r7, #14]
 8000c86:	2218      	movs	r2, #24
 8000c88:	f000 faf5 	bl	8001276 <LCD_Draw_Horizontal_Line>
    for (uint16_t i = y; i < y + 3 * ygrid; i++) {
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c96:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	daef      	bge.n	8000c80 <spawn_j+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000ca0:	88f8      	ldrh	r0, [r7, #6]
 8000ca2:	88b9      	ldrh	r1, [r7, #4]
 8000ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ca8:	2218      	movs	r2, #24
 8000caa:	f000 fabd 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Vertical_Line(x, y + ygrid, ygrid, LCD_COLOR_WHITE);
 8000cae:	88f8      	ldrh	r0, [r7, #6]
 8000cb0:	88bb      	ldrh	r3, [r7, #4]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	b299      	uxth	r1, r3
 8000cb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cba:	2218      	movs	r2, #24
 8000cbc:	f000 fab4 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000cc0:	88f8      	ldrh	r0, [r7, #6]
 8000cc2:	88b9      	ldrh	r1, [r7, #4]
 8000cc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cc8:	2218      	movs	r2, #24
 8000cca:	f000 fad4 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000cce:	88f8      	ldrh	r0, [r7, #6]
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	b299      	uxth	r1, r3
 8000cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cda:	2218      	movs	r2, #24
 8000cdc:	f000 facb 	bl	8001276 <LCD_Draw_Horizontal_Line>

    // Block 3 (Bottom horizontal line, to the left)
    for (uint16_t i = x - xgrid; i < x; i++) {
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	3b18      	subs	r3, #24
 8000ce4:	81bb      	strh	r3, [r7, #12]
 8000ce6:	e00a      	b.n	8000cfe <spawn_j+0x96>
        LCD_Draw_Vertical_Line(i, y + 2 * ygrid, ygrid, color); // Bottom part of the "J"
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	3330      	adds	r3, #48	@ 0x30
 8000cec:	b299      	uxth	r1, r3
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	89b8      	ldrh	r0, [r7, #12]
 8000cf2:	2218      	movs	r2, #24
 8000cf4:	f000 fa98 	bl	8001228 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x - xgrid; i < x; i++) {
 8000cf8:	89bb      	ldrh	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	81bb      	strh	r3, [r7, #12]
 8000cfe:	89ba      	ldrh	r2, [r7, #12]
 8000d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbef      	blt.n	8000ce8 <spawn_j+0x80>
    }
    LCD_Draw_Vertical_Line(x - xgrid, y + 2 * ygrid, ygrid, LCD_COLOR_WHITE);
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	3b18      	subs	r3, #24
 8000d0c:	b298      	uxth	r0, r3
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	3330      	adds	r3, #48	@ 0x30
 8000d12:	b299      	uxth	r1, r3
 8000d14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d18:	2218      	movs	r2, #24
 8000d1a:	f000 fa85 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x - xgrid, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	3b18      	subs	r3, #24
 8000d22:	b298      	uxth	r0, r3
 8000d24:	88bb      	ldrh	r3, [r7, #4]
 8000d26:	3330      	adds	r3, #48	@ 0x30
 8000d28:	b299      	uxth	r1, r3
 8000d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d2e:	2218      	movs	r2, #24
 8000d30:	f000 faa1 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x, y + 2 * ygrid, xgrid, LCD_COLOR_WHITE);
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	3330      	adds	r3, #48	@ 0x30
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d40:	2218      	movs	r2, #24
 8000d42:	f000 fa98 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <spawn_t>:
void spawn_t(int16_t x, int16_t y, uint16_t color)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	80fb      	strh	r3, [r7, #6]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	80bb      	strh	r3, [r7, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	807b      	strh	r3, [r7, #2]
    // Block 1, 2, and 3 (Top horizontal line)
    for (uint16_t i = x; i < x + 3 * xgrid; i++) {
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	81fb      	strh	r3, [r7, #14]
 8000d64:	e008      	b.n	8000d78 <spawn_t+0x2a>
        LCD_Draw_Vertical_Line(i, y, ygrid, color); // Top horizontal line
 8000d66:	88b9      	ldrh	r1, [r7, #4]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	89f8      	ldrh	r0, [r7, #14]
 8000d6c:	2218      	movs	r2, #24
 8000d6e:	f000 fa5b 	bl	8001228 <LCD_Draw_Vertical_Line>
    for (uint16_t i = x; i < x + 3 * xgrid; i++) {
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	3301      	adds	r3, #1
 8000d76:	81fb      	strh	r3, [r7, #14]
 8000d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7c:	f103 0247 	add.w	r2, r3, #71	@ 0x47
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	daef      	bge.n	8000d66 <spawn_t+0x18>
    }
    LCD_Draw_Vertical_Line(x, y, ygrid, LCD_COLOR_WHITE);
 8000d86:	88f8      	ldrh	r0, [r7, #6]
 8000d88:	88b9      	ldrh	r1, [r7, #4]
 8000d8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d8e:	2218      	movs	r2, #24
 8000d90:	f000 fa4a 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x, y, xgrid, LCD_COLOR_WHITE);
 8000d94:	88f8      	ldrh	r0, [r7, #6]
 8000d96:	88b9      	ldrh	r1, [r7, #4]
 8000d98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d9c:	2218      	movs	r2, #24
 8000d9e:	f000 fa6a 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	3318      	adds	r3, #24
 8000da6:	b298      	uxth	r0, r3
 8000da8:	88b9      	ldrh	r1, [r7, #4]
 8000daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dae:	2218      	movs	r2, #24
 8000db0:	f000 fa3a 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	3318      	adds	r3, #24
 8000db8:	b298      	uxth	r0, r3
 8000dba:	88b9      	ldrh	r1, [r7, #4]
 8000dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc0:	2218      	movs	r2, #24
 8000dc2:	f000 fa58 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Vertical_Line(x + 2 * xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	3330      	adds	r3, #48	@ 0x30
 8000dca:	b298      	uxth	r0, r3
 8000dcc:	88b9      	ldrh	r1, [r7, #4]
 8000dce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dd2:	2218      	movs	r2, #24
 8000dd4:	f000 fa28 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + 2 * xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	3330      	adds	r3, #48	@ 0x30
 8000ddc:	b298      	uxth	r0, r3
 8000dde:	88b9      	ldrh	r1, [r7, #4]
 8000de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de4:	2218      	movs	r2, #24
 8000de6:	f000 fa46 	bl	8001276 <LCD_Draw_Horizontal_Line>

    // Block 4 (Vertical middle block)
    for (uint16_t i = y; i < y + ygrid; i++) {
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	81bb      	strh	r3, [r7, #12]
 8000dee:	e00a      	b.n	8000e06 <spawn_t+0xb8>
        LCD_Draw_Horizontal_Line(x + xgrid, i, xgrid, color); // Vertical middle block
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	3318      	adds	r3, #24
 8000df4:	b298      	uxth	r0, r3
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	89b9      	ldrh	r1, [r7, #12]
 8000dfa:	2218      	movs	r2, #24
 8000dfc:	f000 fa3b 	bl	8001276 <LCD_Draw_Horizontal_Line>
    for (uint16_t i = y; i < y + ygrid; i++) {
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	81bb      	strh	r3, [r7, #12]
 8000e06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e0a:	f103 0217 	add.w	r2, r3, #23
 8000e0e:	89bb      	ldrh	r3, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	daed      	bge.n	8000df0 <spawn_t+0xa2>
    }
    LCD_Draw_Vertical_Line(x + xgrid, y, ygrid, LCD_COLOR_WHITE);
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	3318      	adds	r3, #24
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	88b9      	ldrh	r1, [r7, #4]
 8000e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e20:	2218      	movs	r2, #24
 8000e22:	f000 fa01 	bl	8001228 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y, xgrid, LCD_COLOR_WHITE);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	b298      	uxth	r0, r3
 8000e2c:	88b9      	ldrh	r1, [r7, #4]
 8000e2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e32:	2218      	movs	r2, #24
 8000e34:	f000 fa1f 	bl	8001276 <LCD_Draw_Horizontal_Line>
    LCD_Draw_Horizontal_Line(x + xgrid, y + ygrid, xgrid, LCD_COLOR_WHITE);
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	3318      	adds	r3, #24
 8000e3c:	b298      	uxth	r0, r3
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	3318      	adds	r3, #24
 8000e42:	b299      	uxth	r1, r3
 8000e44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e48:	2218      	movs	r2, #24
 8000e4a:	f000 fa14 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <spawn_block>:


void spawn_block()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint16_t block = RNG_getVal() % 7;
 8000e5e:	f000 fbd5 	bl	800160c <RNG_getVal>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <spawn_block+0xc4>)
 8000e66:	fba3 1302 	umull	r1, r3, r3, r2
 8000e6a:	1ad1      	subs	r1, r2, r3
 8000e6c:	0849      	lsrs	r1, r1, #1
 8000e6e:	440b      	add	r3, r1
 8000e70:	0899      	lsrs	r1, r3, #2
 8000e72:	460b      	mov	r3, r1
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	1a5b      	subs	r3, r3, r1
 8000e78:	1ad1      	subs	r1, r2, r3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80fb      	strh	r3, [r7, #6]
	if(block == square)
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <spawn_block+0x3a>
	{
		spawn_square(xstart2, 0, LCD_COLOR_YELLOW);
 8000e84:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2060      	movs	r0, #96	@ 0x60
 8000e8c:	f7ff fc6a 	bl	8000764 <spawn_square>
	}
	else
	{
		spawn_l(xstart2, 0, LCD_COLOR_CYAN);
	}
}
 8000e90:	e040      	b.n	8000f14 <spawn_block+0xbc>
	else if (block == rect)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <spawn_block+0x4c>
		spawn_rect(xstart2, 0, LCD_COLOR_BLUE);
 8000e98:	221f      	movs	r2, #31
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2060      	movs	r0, #96	@ 0x60
 8000e9e:	f7ff fd08 	bl	80008b2 <spawn_rect>
}
 8000ea2:	e037      	b.n	8000f14 <spawn_block+0xbc>
	else if (block == s_shape)
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d106      	bne.n	8000eb8 <spawn_block+0x60>
		spawn_s(xstart2, 0, LCD_COLOR_RED);
 8000eaa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2060      	movs	r0, #96	@ 0x60
 8000eb2:	f7ff fd62 	bl	800097a <spawn_s>
}
 8000eb6:	e02d      	b.n	8000f14 <spawn_block+0xbc>
	else if (block == z_shape)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d106      	bne.n	8000ecc <spawn_block+0x74>
		spawn_z(xstart2, 0, LCD_COLOR_GREEN);
 8000ebe:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2060      	movs	r0, #96	@ 0x60
 8000ec6:	f7ff fddb 	bl	8000a80 <spawn_z>
}
 8000eca:	e023      	b.n	8000f14 <spawn_block+0xbc>
	else if (block == l_shape)
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d106      	bne.n	8000ee0 <spawn_block+0x88>
		spawn_l(xstart2, 0, LCD_COLOR_CYAN);
 8000ed2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2060      	movs	r0, #96	@ 0x60
 8000eda:	f7ff fe53 	bl	8000b84 <spawn_l>
}
 8000ede:	e019      	b.n	8000f14 <spawn_block+0xbc>
	else if (block == j_shape)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d106      	bne.n	8000ef4 <spawn_block+0x9c>
		spawn_j(xstart2, 0, LCD_COLOR_MAGENTA);
 8000ee6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000eea:	2100      	movs	r1, #0
 8000eec:	2060      	movs	r0, #96	@ 0x60
 8000eee:	f7ff febb 	bl	8000c68 <spawn_j>
}
 8000ef2:	e00f      	b.n	8000f14 <spawn_block+0xbc>
	else if (block == t_shape)
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	d106      	bne.n	8000f08 <spawn_block+0xb0>
		spawn_t(xstart2, 0, LCD_COLOR_BLUE2);
 8000efa:	f240 521f 	movw	r2, #1311	@ 0x51f
 8000efe:	2100      	movs	r1, #0
 8000f00:	2060      	movs	r0, #96	@ 0x60
 8000f02:	f7ff ff24 	bl	8000d4e <spawn_t>
}
 8000f06:	e005      	b.n	8000f14 <spawn_block+0xbc>
		spawn_l(xstart2, 0, LCD_COLOR_CYAN);
 8000f08:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2060      	movs	r0, #96	@ 0x60
 8000f10:	f7ff fe38 	bl	8000b84 <spawn_l>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	24924925 	.word	0x24924925

08000f20 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	@ 0x30
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a59      	ldr	r2, [pc, #356]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b57      	ldr	r3, [pc, #348]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	4b53      	ldr	r3, [pc, #332]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a52      	ldr	r2, [pc, #328]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b50      	ldr	r3, [pc, #320]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b4c      	ldr	r3, [pc, #304]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a4b      	ldr	r2, [pc, #300]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b49      	ldr	r3, [pc, #292]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b45      	ldr	r3, [pc, #276]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a44      	ldr	r2, [pc, #272]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b42      	ldr	r3, [pc, #264]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a36      	ldr	r2, [pc, #216]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fbc:	f043 0320 	orr.w	r3, r3, #32
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <LCD_GPIO_Init+0x174>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000fea:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000fee:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000ffc:	230e      	movs	r3, #14
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4824      	ldr	r0, [pc, #144]	@ (8001098 <LCD_GPIO_Init+0x178>)
 8001008:	f001 feaa 	bl	8002d60 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800100c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001010:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4820      	ldr	r0, [pc, #128]	@ (800109c <LCD_GPIO_Init+0x17c>)
 800101a:	f001 fea1 	bl	8002d60 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800101e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	481d      	ldr	r0, [pc, #116]	@ (80010a0 <LCD_GPIO_Init+0x180>)
 800102c:	f001 fe98 	bl	8002d60 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001030:	2348      	movs	r3, #72	@ 0x48
 8001032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	481a      	ldr	r0, [pc, #104]	@ (80010a4 <LCD_GPIO_Init+0x184>)
 800103c:	f001 fe90 	bl	8002d60 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4816      	ldr	r0, [pc, #88]	@ (80010a8 <LCD_GPIO_Init+0x188>)
 800104e:	f001 fe87 	bl	8002d60 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001052:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001056:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4813      	ldr	r0, [pc, #76]	@ (80010ac <LCD_GPIO_Init+0x18c>)
 8001060:	f001 fe7e 	bl	8002d60 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001064:	2303      	movs	r3, #3
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001068:	2309      	movs	r3, #9
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	@ (800109c <LCD_GPIO_Init+0x17c>)
 8001074:	f001 fe74 	bl	8002d60 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001078:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4809      	ldr	r0, [pc, #36]	@ (80010ac <LCD_GPIO_Init+0x18c>)
 8001086:	f001 fe6b 	bl	8002d60 <HAL_GPIO_Init>
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021400 	.word	0x40021400
 80010ac:	40021800 	.word	0x40021800

080010b0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	@ 0x40
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80010be:	23f0      	movs	r3, #240	@ 0xf0
 80010c0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80010c6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010ca:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80010d0:	23ff      	movs	r3, #255	@ 0xff
 80010d2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80010d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010de:	2305      	movs	r3, #5
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <LTCD_Layer_Init+0x78>)
 80010ea:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80010ec:	23f0      	movs	r3, #240	@ 0xf0
 80010ee:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80010f0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	4806      	ldr	r0, [pc, #24]	@ (800112c <LTCD_Layer_Init+0x7c>)
 8001112:	f003 f9eb 	bl	80044ec <HAL_LTDC_ConfigLayer>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800111c:	f000 fa18 	bl	8001550 <LCD_Error_Handler>
	}
}
 8001120:	bf00      	nop
 8001122:	3740      	adds	r7, #64	@ 0x40
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000188 	.word	0x20000188
 800112c:	200000ac 	.word	0x200000ac

08001130 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001134:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <LTCD__Init+0xb0>)
 8001136:	4a2b      	ldr	r2, [pc, #172]	@ (80011e4 <LTCD__Init+0xb4>)
 8001138:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <LTCD__Init+0xb0>)
 800113c:	2209      	movs	r2, #9
 800113e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <LTCD__Init+0xb0>)
 8001142:	2201      	movs	r2, #1
 8001144:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <LTCD__Init+0xb0>)
 8001148:	221d      	movs	r2, #29
 800114a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <LTCD__Init+0xb0>)
 800114e:	2203      	movs	r2, #3
 8001150:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <LTCD__Init+0xb0>)
 8001154:	f240 120d 	movw	r2, #269	@ 0x10d
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <LTCD__Init+0xb0>)
 800115c:	f240 1243 	movw	r2, #323	@ 0x143
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <LTCD__Init+0xb0>)
 8001164:	f240 1217 	movw	r2, #279	@ 0x117
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <LTCD__Init+0xb0>)
 800116c:	f240 1247 	movw	r2, #327	@ 0x147
 8001170:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <LTCD__Init+0xb0>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <LTCD__Init+0xb0>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <LTCD__Init+0xb0>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <LTCD__Init+0xb8>)
 800118c:	2208      	movs	r2, #8
 800118e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <LTCD__Init+0xb8>)
 8001192:	22c0      	movs	r2, #192	@ 0xc0
 8001194:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <LTCD__Init+0xb8>)
 8001198:	2204      	movs	r2, #4
 800119a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <LTCD__Init+0xb8>)
 800119e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80011a4:	4810      	ldr	r0, [pc, #64]	@ (80011e8 <LTCD__Init+0xb8>)
 80011a6:	f003 fffb 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <LTCD__Init+0xb0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <LTCD__Init+0xb0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <LTCD__Init+0xb0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <LTCD__Init+0xb0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80011c2:	f7ff fead 	bl	8000f20 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <LTCD__Init+0xb0>)
 80011c8:	f003 f8c0 	bl	800434c <HAL_LTDC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80011d2:	f000 f9bd 	bl	8001550 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80011d6:	f000 fa27 	bl	8001628 <ili9341_Init>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000ac 	.word	0x200000ac
 80011e4:	40016800 	.word	0x40016800
 80011e8:	20000154 	.word	0x20000154

080011ec <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
 80011f6:	460b      	mov	r3, r1
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80011fe:	88ba      	ldrh	r2, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	461a      	mov	r2, r3
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4413      	add	r3, r2
 800120e:	4905      	ldr	r1, [pc, #20]	@ (8001224 <LCD_Draw_Pixel+0x38>)
 8001210:	887a      	ldrh	r2, [r7, #2]
 8001212:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000188 	.word	0x20000188

08001228 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	4603      	mov	r3, r0
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
 8001242:	4613      	mov	r3, r2
 8001244:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	81fb      	strh	r3, [r7, #14]
 800124a:	e00b      	b.n	8001264 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800124c:	89fa      	ldrh	r2, [r7, #14]
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	b299      	uxth	r1, r3
 8001254:	883a      	ldrh	r2, [r7, #0]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffc7 	bl	80011ec <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	3301      	adds	r3, #1
 8001262:	81fb      	strh	r3, [r7, #14]
 8001264:	89fa      	ldrh	r2, [r7, #14]
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3ef      	bcc.n	800124c <LCD_Draw_Vertical_Line+0x24>
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}

08001276 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	4604      	mov	r4, r0
 800127e:	4608      	mov	r0, r1
 8001280:	4611      	mov	r1, r2
 8001282:	461a      	mov	r2, r3
 8001284:	4623      	mov	r3, r4
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	4603      	mov	r3, r0
 800128a:	80bb      	strh	r3, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	81fb      	strh	r3, [r7, #14]
 8001298:	e00b      	b.n	80012b2 <LCD_Draw_Horizontal_Line+0x3c>
	 {
		LCD_Draw_Pixel(i+x, y, color);
 800129a:	89fa      	ldrh	r2, [r7, #14]
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	883a      	ldrh	r2, [r7, #0]
 80012a4:	88b9      	ldrh	r1, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffa0 	bl	80011ec <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	3301      	adds	r3, #1
 80012b0:	81fb      	strh	r3, [r7, #14]
 80012b2:	89fa      	ldrh	r2, [r7, #14]
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3ef      	bcc.n	800129a <LCD_Draw_Horizontal_Line+0x24>
	 }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <LCD_DrawGrid>:

//void LCD_Draw_Square()

void LCD_DrawGrid()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_BLACK);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f000 f83f 	bl	8001350 <LCD_Clear>
	int16_t xpos_inc = 24;
 80012d2:	2318      	movs	r3, #24
 80012d4:	80fb      	strh	r3, [r7, #6]
	int16_t ypos_inc = 24;
 80012d6:	2318      	movs	r3, #24
 80012d8:	80bb      	strh	r3, [r7, #4]
	//draw vertical lines
	for(int16_t i =0; i < 9; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	807b      	strh	r3, [r7, #2]
 80012de:	e010      	b.n	8001302 <LCD_DrawGrid+0x3e>
	{
		LCD_Draw_Vertical_Line(xpos_inc ,0,240,LCD_COLOR_WHITE);
 80012e0:	88f8      	ldrh	r0, [r7, #6]
 80012e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e6:	22f0      	movs	r2, #240	@ 0xf0
 80012e8:	2100      	movs	r1, #0
 80012ea:	f7ff ff9d 	bl	8001228 <LCD_Draw_Vertical_Line>
		xpos_inc = xpos_inc + 24;
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	3318      	adds	r3, #24
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	80fb      	strh	r3, [r7, #6]
	for(int16_t i =0; i < 9; i++)
 80012f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	807b      	strh	r3, [r7, #2]
 8001302:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001306:	2b08      	cmp	r3, #8
 8001308:	ddea      	ble.n	80012e0 <LCD_DrawGrid+0x1c>
	}
	//draw horizontal lines
	for(int16_t i =0; i < 10; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	803b      	strh	r3, [r7, #0]
 800130e:	e010      	b.n	8001332 <LCD_DrawGrid+0x6e>
	{
		LCD_Draw_Horizontal_Line(24, ypos_inc, 192, LCD_COLOR_WHITE);
 8001310:	88b9      	ldrh	r1, [r7, #4]
 8001312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001316:	22c0      	movs	r2, #192	@ 0xc0
 8001318:	2018      	movs	r0, #24
 800131a:	f7ff ffac 	bl	8001276 <LCD_Draw_Horizontal_Line>
		ypos_inc = ypos_inc + 24;
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	3318      	adds	r3, #24
 8001322:	b29b      	uxth	r3, r3
 8001324:	80bb      	strh	r3, [r7, #4]
	for(int16_t i =0; i < 10; i++)
 8001326:	f9b7 3000 	ldrsh.w	r3, [r7]
 800132a:	b29b      	uxth	r3, r3
 800132c:	3301      	adds	r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	803b      	strh	r3, [r7, #0]
 8001332:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001336:	2b09      	cmp	r3, #9
 8001338:	ddea      	ble.n	8001310 <LCD_DrawGrid+0x4c>
	}
	LCD_Draw_Horizontal_Line(0,0,10, LCD_COLOR_RED);
 800133a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800133e:	220a      	movs	r2, #10
 8001340:	2100      	movs	r1, #0
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff ff97 	bl	8001276 <LCD_Draw_Horizontal_Line>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	460a      	mov	r2, r1
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10e      	bne.n	8001384 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e007      	b.n	800137c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800136c:	4908      	ldr	r1, [pc, #32]	@ (8001390 <LCD_Clear+0x40>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	88ba      	ldrh	r2, [r7, #4]
 8001372:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001382:	d3f3      	bcc.n	800136c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20000188 	.word	0x20000188

08001394 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800139e:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <LCD_SetTextColor+0x1c>)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	8013      	strh	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	20000000 	.word	0x20000000

080013b4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <LCD_SetFont+0x1c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000184 	.word	0x20000184

080013d4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	603a      	str	r2, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	460b      	mov	r3, r1
 80013e2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e04c      	b.n	800148c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	e03f      	b.n	8001478 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <LCD_Draw_Char+0xd0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <LCD_Draw_Char+0xd4>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	b29b      	uxth	r3, r3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	2280      	movs	r2, #128	@ 0x80
 8001418:	409a      	lsls	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	fa42 f303 	asr.w	r3, r2, r3
 8001420:	400b      	ands	r3, r1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d104      	bne.n	8001430 <LCD_Draw_Char+0x5c>
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <LCD_Draw_Char+0xd0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d920      	bls.n	8001472 <LCD_Draw_Char+0x9e>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	fa42 f303 	asr.w	r3, r2, r3
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <LCD_Draw_Char+0x80>
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <LCD_Draw_Char+0xd0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	889b      	ldrh	r3, [r3, #4]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d80e      	bhi.n	8001472 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	b29a      	uxth	r2, r3
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	4413      	add	r3, r2
 800145c:	b298      	uxth	r0, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	b29a      	uxth	r2, r3
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	b29b      	uxth	r3, r3
 8001468:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <LCD_Draw_Char+0xd8>)
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff febd 	bl	80011ec <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <LCD_Draw_Char+0xd0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	889b      	ldrh	r3, [r3, #4]
 800147e:	461a      	mov	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4293      	cmp	r3, r2
 8001484:	d3b8      	bcc.n	80013f8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <LCD_Draw_Char+0xd0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	88db      	ldrh	r3, [r3, #6]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4293      	cmp	r3, r2
 8001498:	d3ab      	bcc.n	80013f2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000184 	.word	0x20000184
 80014a8:	aaaaaaab 	.word	0xaaaaaaab
 80014ac:	20000000 	.word	0x20000000

080014b0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	460b      	mov	r3, r1
 80014bc:	80bb      	strh	r3, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	3b20      	subs	r3, #32
 80014c6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <LCD_DisplayChar+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	4907      	ldr	r1, [pc, #28]	@ (80014f0 <LCD_DisplayChar+0x40>)
 80014d2:	6809      	ldr	r1, [r1, #0]
 80014d4:	88c9      	ldrh	r1, [r1, #6]
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	441a      	add	r2, r3
 80014de:	88b9      	ldrh	r1, [r7, #4]
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff76 	bl	80013d4 <LCD_Draw_Char>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000184 	.word	0x20000184

080014f4 <LCD_StartScreen>:
	LCD_DisplayChar(130,160,'l');
	LCD_DisplayChar(140,160,'d');
}

void LCD_StartScreen()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 80014f8:	211f      	movs	r1, #31
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff ff28 	bl	8001350 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff ff47 	bl	8001394 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001506:	4811      	ldr	r0, [pc, #68]	@ (800154c <LCD_StartScreen+0x58>)
 8001508:	f7ff ff54 	bl	80013b4 <LCD_SetFont>

	LCD_DisplayChar(85,140,'T');
 800150c:	2254      	movs	r2, #84	@ 0x54
 800150e:	218c      	movs	r1, #140	@ 0x8c
 8001510:	2055      	movs	r0, #85	@ 0x55
 8001512:	f7ff ffcd 	bl	80014b0 <LCD_DisplayChar>
	LCD_DisplayChar(100,140,'e');
 8001516:	2265      	movs	r2, #101	@ 0x65
 8001518:	218c      	movs	r1, #140	@ 0x8c
 800151a:	2064      	movs	r0, #100	@ 0x64
 800151c:	f7ff ffc8 	bl	80014b0 <LCD_DisplayChar>
	LCD_DisplayChar(112.5,140,'t');
 8001520:	2274      	movs	r2, #116	@ 0x74
 8001522:	218c      	movs	r1, #140	@ 0x8c
 8001524:	2070      	movs	r0, #112	@ 0x70
 8001526:	f7ff ffc3 	bl	80014b0 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'r');
 800152a:	2272      	movs	r2, #114	@ 0x72
 800152c:	218c      	movs	r1, #140	@ 0x8c
 800152e:	207d      	movs	r0, #125	@ 0x7d
 8001530:	f7ff ffbe 	bl	80014b0 <LCD_DisplayChar>
	LCD_DisplayChar(135,140,'i');
 8001534:	2269      	movs	r2, #105	@ 0x69
 8001536:	218c      	movs	r1, #140	@ 0x8c
 8001538:	2087      	movs	r0, #135	@ 0x87
 800153a:	f7ff ffb9 	bl	80014b0 <LCD_DisplayChar>
	LCD_DisplayChar(145,140,'s');
 800153e:	2273      	movs	r2, #115	@ 0x73
 8001540:	218c      	movs	r1, #140	@ 0x8c
 8001542:	2091      	movs	r0, #145	@ 0x91
 8001544:	f7ff ffb4 	bl	80014b0 <LCD_DisplayChar>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000004 	.word	0x20000004

08001550 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <LCD_Error_Handler+0x8>

0800155c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001560:	f000 fe16 	bl	8002190 <STMPE811_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b02      	cmp	r3, #2
 8001568:	d001      	beq.n	800156e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800156a:	bf00      	nop
 800156c:	e7fd      	b.n	800156a <InitializeLCDTouch+0xe>
  }
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}

08001572 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fef2 	bl	8002364 <STMPE811_DetermineTouchPosition>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fec2 	bl	800231e <STMPE811_Read>
 800159a:	4603      	mov	r3, r0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fec0 	bl	8002340 <STMPE811_Write>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <RNGInit>:
#include <RNG_Driver.h>

static RNG_HandleTypeDef RNG_1 = {0};

void RNGInit()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <RNGInit+0x38>)
 80015d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <RNGInit+0x38>)
 80015d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <RNGInit+0x38>)
 80015e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
	RNG_1.Instance = RNG;
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <RNGInit+0x3c>)
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <RNGInit+0x40>)
 80015ee:	601a      	str	r2, [r3, #0]
	HAL_RNG_Init(&RNG_1);
 80015f0:	4804      	ldr	r0, [pc, #16]	@ (8001604 <RNGInit+0x3c>)
 80015f2:	f003 ff95 	bl	8005520 <HAL_RNG_Init>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	20025988 	.word	0x20025988
 8001608:	50060800 	.word	0x50060800

0800160c <RNG_getVal>:
uint32_t RNG_getVal()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	uint32_t block_val = HAL_RNG_GetRandomNumber(&RNG_1);
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <RNG_getVal+0x18>)
 8001614:	f004 f804 	bl	8005620 <HAL_RNG_GetRandomNumber>
 8001618:	6078      	str	r0, [r7, #4]
	return block_val;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20025988 	.word	0x20025988

08001628 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800162c:	f000 f9fe 	bl	8001a2c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001630:	20ca      	movs	r0, #202	@ 0xca
 8001632:	f000 f943 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001636:	20c3      	movs	r0, #195	@ 0xc3
 8001638:	f000 f94d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800163c:	2008      	movs	r0, #8
 800163e:	f000 f94a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001642:	2050      	movs	r0, #80	@ 0x50
 8001644:	f000 f947 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001648:	20cf      	movs	r0, #207	@ 0xcf
 800164a:	f000 f937 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f941 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001654:	20c1      	movs	r0, #193	@ 0xc1
 8001656:	f000 f93e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800165a:	2030      	movs	r0, #48	@ 0x30
 800165c:	f000 f93b 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001660:	20ed      	movs	r0, #237	@ 0xed
 8001662:	f000 f92b 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001666:	2064      	movs	r0, #100	@ 0x64
 8001668:	f000 f935 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f932 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001672:	2012      	movs	r0, #18
 8001674:	f000 f92f 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001678:	2081      	movs	r0, #129	@ 0x81
 800167a:	f000 f92c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800167e:	20e8      	movs	r0, #232	@ 0xe8
 8001680:	f000 f91c 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001684:	2085      	movs	r0, #133	@ 0x85
 8001686:	f000 f926 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f923 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001690:	2078      	movs	r0, #120	@ 0x78
 8001692:	f000 f920 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001696:	20cb      	movs	r0, #203	@ 0xcb
 8001698:	f000 f910 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800169c:	2039      	movs	r0, #57	@ 0x39
 800169e:	f000 f91a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80016a2:	202c      	movs	r0, #44	@ 0x2c
 80016a4:	f000 f917 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 f914 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80016ae:	2034      	movs	r0, #52	@ 0x34
 80016b0:	f000 f911 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80016b4:	2002      	movs	r0, #2
 80016b6:	f000 f90e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80016ba:	20f7      	movs	r0, #247	@ 0xf7
 80016bc:	f000 f8fe 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80016c0:	2020      	movs	r0, #32
 80016c2:	f000 f908 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80016c6:	20ea      	movs	r0, #234	@ 0xea
 80016c8:	f000 f8f8 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 f902 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f8ff 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80016d8:	20b1      	movs	r0, #177	@ 0xb1
 80016da:	f000 f8ef 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f8f9 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80016e4:	201b      	movs	r0, #27
 80016e6:	f000 f8f6 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80016ea:	20b6      	movs	r0, #182	@ 0xb6
 80016ec:	f000 f8e6 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f000 f8f0 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80016f6:	20a2      	movs	r0, #162	@ 0xa2
 80016f8:	f000 f8ed 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80016fc:	20c0      	movs	r0, #192	@ 0xc0
 80016fe:	f000 f8dd 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001702:	2010      	movs	r0, #16
 8001704:	f000 f8e7 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001708:	20c1      	movs	r0, #193	@ 0xc1
 800170a:	f000 f8d7 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800170e:	2010      	movs	r0, #16
 8001710:	f000 f8e1 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001714:	20c5      	movs	r0, #197	@ 0xc5
 8001716:	f000 f8d1 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800171a:	2045      	movs	r0, #69	@ 0x45
 800171c:	f000 f8db 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001720:	2015      	movs	r0, #21
 8001722:	f000 f8d8 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001726:	20c7      	movs	r0, #199	@ 0xc7
 8001728:	f000 f8c8 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800172c:	2090      	movs	r0, #144	@ 0x90
 800172e:	f000 f8d2 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001732:	2036      	movs	r0, #54	@ 0x36
 8001734:	f000 f8c2 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001738:	20c8      	movs	r0, #200	@ 0xc8
 800173a:	f000 f8cc 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800173e:	20f2      	movs	r0, #242	@ 0xf2
 8001740:	f000 f8bc 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f8c6 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800174a:	20b0      	movs	r0, #176	@ 0xb0
 800174c:	f000 f8b6 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001750:	20c2      	movs	r0, #194	@ 0xc2
 8001752:	f000 f8c0 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001756:	20b6      	movs	r0, #182	@ 0xb6
 8001758:	f000 f8b0 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800175c:	200a      	movs	r0, #10
 800175e:	f000 f8ba 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001762:	20a7      	movs	r0, #167	@ 0xa7
 8001764:	f000 f8b7 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001768:	2027      	movs	r0, #39	@ 0x27
 800176a:	f000 f8b4 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800176e:	2004      	movs	r0, #4
 8001770:	f000 f8b1 	bl	80018d6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001774:	202a      	movs	r0, #42	@ 0x2a
 8001776:	f000 f8a1 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f8ab 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f8a8 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f8a5 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800178c:	20ef      	movs	r0, #239	@ 0xef
 800178e:	f000 f8a2 	bl	80018d6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001792:	202b      	movs	r0, #43	@ 0x2b
 8001794:	f000 f892 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001798:	2000      	movs	r0, #0
 800179a:	f000 f89c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f899 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f000 f896 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f000 f893 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80017b0:	20f6      	movs	r0, #246	@ 0xf6
 80017b2:	f000 f883 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 f88d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 f88a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80017c2:	2006      	movs	r0, #6
 80017c4:	f000 f887 	bl	80018d6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80017c8:	202c      	movs	r0, #44	@ 0x2c
 80017ca:	f000 f877 	bl	80018bc <ili9341_Write_Reg>
  LCD_Delay(200);
 80017ce:	20c8      	movs	r0, #200	@ 0xc8
 80017d0:	f000 f9e8 	bl	8001ba4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80017d4:	2026      	movs	r0, #38	@ 0x26
 80017d6:	f000 f871 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 f87b 	bl	80018d6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80017e0:	20e0      	movs	r0, #224	@ 0xe0
 80017e2:	f000 f86b 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f875 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80017ec:	2029      	movs	r0, #41	@ 0x29
 80017ee:	f000 f872 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80017f2:	2024      	movs	r0, #36	@ 0x24
 80017f4:	f000 f86f 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80017f8:	200c      	movs	r0, #12
 80017fa:	f000 f86c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80017fe:	200e      	movs	r0, #14
 8001800:	f000 f869 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001804:	2009      	movs	r0, #9
 8001806:	f000 f866 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800180a:	204e      	movs	r0, #78	@ 0x4e
 800180c:	f000 f863 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001810:	2078      	movs	r0, #120	@ 0x78
 8001812:	f000 f860 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001816:	203c      	movs	r0, #60	@ 0x3c
 8001818:	f000 f85d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800181c:	2009      	movs	r0, #9
 800181e:	f000 f85a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001822:	2013      	movs	r0, #19
 8001824:	f000 f857 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001828:	2005      	movs	r0, #5
 800182a:	f000 f854 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800182e:	2017      	movs	r0, #23
 8001830:	f000 f851 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001834:	2011      	movs	r0, #17
 8001836:	f000 f84e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f84b 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001840:	20e1      	movs	r0, #225	@ 0xe1
 8001842:	f000 f83b 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f845 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800184c:	2016      	movs	r0, #22
 800184e:	f000 f842 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001852:	201b      	movs	r0, #27
 8001854:	f000 f83f 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001858:	2004      	movs	r0, #4
 800185a:	f000 f83c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800185e:	2011      	movs	r0, #17
 8001860:	f000 f839 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001864:	2007      	movs	r0, #7
 8001866:	f000 f836 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800186a:	2031      	movs	r0, #49	@ 0x31
 800186c:	f000 f833 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001870:	2033      	movs	r0, #51	@ 0x33
 8001872:	f000 f830 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001876:	2042      	movs	r0, #66	@ 0x42
 8001878:	f000 f82d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800187c:	2005      	movs	r0, #5
 800187e:	f000 f82a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001882:	200c      	movs	r0, #12
 8001884:	f000 f827 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001888:	200a      	movs	r0, #10
 800188a:	f000 f824 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800188e:	2028      	movs	r0, #40	@ 0x28
 8001890:	f000 f821 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001894:	202f      	movs	r0, #47	@ 0x2f
 8001896:	f000 f81e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f81b 	bl	80018d6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80018a0:	2011      	movs	r0, #17
 80018a2:	f000 f80b 	bl	80018bc <ili9341_Write_Reg>
  LCD_Delay(200);
 80018a6:	20c8      	movs	r0, #200	@ 0xc8
 80018a8:	f000 f97c 	bl	8001ba4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80018ac:	2029      	movs	r0, #41	@ 0x29
 80018ae:	f000 f805 	bl	80018bc <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80018b2:	202c      	movs	r0, #44	@ 0x2c
 80018b4:	f000 f802 	bl	80018bc <ili9341_Write_Reg>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f949 	bl	8001b60 <LCD_IO_WriteReg>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f91a 	bl	8001b1c <LCD_IO_WriteData>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80018f4:	4819      	ldr	r0, [pc, #100]	@ (800195c <SPI_Init+0x6c>)
 80018f6:	f004 f89d 	bl	8005a34 <HAL_SPI_GetState>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d12b      	bne.n	8001958 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <SPI_Init+0x6c>)
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <SPI_Init+0x70>)
 8001904:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <SPI_Init+0x6c>)
 8001908:	2218      	movs	r2, #24
 800190a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <SPI_Init+0x6c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <SPI_Init+0x6c>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <SPI_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <SPI_Init+0x6c>)
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <SPI_Init+0x6c>)
 8001926:	2207      	movs	r2, #7
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <SPI_Init+0x6c>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <SPI_Init+0x6c>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <SPI_Init+0x6c>)
 8001938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <SPI_Init+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <SPI_Init+0x6c>)
 8001946:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800194a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <SPI_Init+0x6c>)
 800194e:	f000 f833 	bl	80019b8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001952:	4802      	ldr	r0, [pc, #8]	@ (800195c <SPI_Init+0x6c>)
 8001954:	f003 fe79 	bl	800564a <HAL_SPI_Init>
  }
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20025998 	.word	0x20025998
 8001960:	40015000 	.word	0x40015000

08001964 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <SPI_Write+0x34>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1db9      	adds	r1, r7, #6
 8001978:	2201      	movs	r2, #1
 800197a:	4808      	ldr	r0, [pc, #32]	@ (800199c <SPI_Write+0x38>)
 800197c:	f003 ff16 	bl	80057ac <HAL_SPI_Transmit>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800198a:	f000 f809 	bl	80019a0 <SPI_Error>
  }
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c
 800199c:	20025998 	.word	0x20025998

080019a0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019a4:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <SPI_Error+0x14>)
 80019a6:	f003 fed9 	bl	800575c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80019aa:	f7ff ffa1 	bl	80018f0 <SPI_Init>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20025998 	.word	0x20025998

080019b8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80019f8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <SPI_MspInit+0x70>)
 8001a16:	f001 f9a3 	bl	8002d60 <HAL_GPIO_Init>
}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40021400 	.word	0x40021400

08001a2c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001a32:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <LCD_IO_Init+0xe0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d164      	bne.n	8001b04 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001a3a:	4b34      	ldr	r3, [pc, #208]	@ (8001b0c <LCD_IO_Init+0xe0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	4a31      	ldr	r2, [pc, #196]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a50:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <LCD_IO_Init+0xe8>)
 8001a76:	f001 f973 	bl	8002d60 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <LCD_IO_Init+0xe8>)
 8001ab0:	f001 f956 	bl	8002d60 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <LCD_IO_Init+0xec>)
 8001ae8:	f001 f93a 	bl	8002d60 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001aec:	2200      	movs	r2, #0
 8001aee:	2104      	movs	r1, #4
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <LCD_IO_Init+0xec>)
 8001af2:	f001 fbed 	bl	80032d0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001af6:	2201      	movs	r2, #1
 8001af8:	2104      	movs	r1, #4
 8001afa:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <LCD_IO_Init+0xec>)
 8001afc:	f001 fbe8 	bl	80032d0 <HAL_GPIO_WritePin>

    SPI_Init();
 8001b00:	f7ff fef6 	bl	80018f0 <SPI_Init>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200259f0 	.word	0x200259f0
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	40020800 	.word	0x40020800

08001b1c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b2c:	480a      	ldr	r0, [pc, #40]	@ (8001b58 <LCD_IO_WriteData+0x3c>)
 8001b2e:	f001 fbcf 	bl	80032d0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001b32:	2200      	movs	r2, #0
 8001b34:	2104      	movs	r1, #4
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <LCD_IO_WriteData+0x40>)
 8001b38:	f001 fbca 	bl	80032d0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff10 	bl	8001964 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b44:	2201      	movs	r2, #1
 8001b46:	2104      	movs	r1, #4
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <LCD_IO_WriteData+0x40>)
 8001b4a:	f001 fbc1 	bl	80032d0 <HAL_GPIO_WritePin>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40020800 	.word	0x40020800

08001b60 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b70:	480a      	ldr	r0, [pc, #40]	@ (8001b9c <LCD_IO_WriteReg+0x3c>)
 8001b72:	f001 fbad 	bl	80032d0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4809      	ldr	r0, [pc, #36]	@ (8001ba0 <LCD_IO_WriteReg+0x40>)
 8001b7c:	f001 fba8 	bl	80032d0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff feed 	bl	8001964 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <LCD_IO_WriteReg+0x40>)
 8001b90:	f001 fb9e 	bl	80032d0 <HAL_GPIO_WritePin>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40020800 	.word	0x40020800

08001ba4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 ff2b 	bl	8002a08 <HAL_Delay>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc0:	f000 feb0 	bl	8002924 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8001bc4:	f000 f80e 	bl	8001be4 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001bc8:	f7fe fcda 	bl	8000580 <ApplicationInit>

  LCD_StartScreen();
 8001bcc:	f7ff fc92 	bl	80014f4 <LCD_StartScreen>
  //LCD_Touch_Polling_Demo(); // This function Will not return

 extern uint16_t level;
  while (1)
  {
	  while(level == 2)
 8001bd0:	e001      	b.n	8001bd6 <main+0x1a>
	  {
		  spawnSquare();
 8001bd2:	f7fe fcf5 	bl	80005c0 <spawnSquare>
	  while(level == 2)
 8001bd6:	4b02      	ldr	r3, [pc, #8]	@ (8001be0 <main+0x24>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d0f9      	beq.n	8001bd2 <main+0x16>
 8001bde:	e7fa      	b.n	8001bd6 <main+0x1a>
 8001be0:	20000002 	.word	0x20000002

08001be4 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b092      	sub	sp, #72	@ 0x48
 8001be8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <SystemClockOverride+0x7c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c60 <SystemClockOverride+0x7c>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <SystemClockOverride+0x7c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c0e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c1e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fe32 	bl	8004898 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c34:	230f      	movs	r3, #15
 8001c36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001c4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c50:	2105      	movs	r1, #5
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 f898 	bl	8004d88 <HAL_RCC_ClockConfig>
}
 8001c58:	bf00      	nop
 8001c5a:	3748      	adds	r7, #72	@ 0x48
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <Error_Handler+0x8>

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cae:	2007      	movs	r0, #7
 8001cb0:	f000 ffe0 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a29      	ldr	r2, [pc, #164]	@ (8001d84 <HAL_I2C_MspInit+0xc4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d14b      	bne.n	8001d7a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a27      	ldr	r2, [pc, #156]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a20      	ldr	r2, [pc, #128]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4815      	ldr	r0, [pc, #84]	@ (8001d8c <HAL_I2C_MspInit+0xcc>)
 8001d38:	f001 f812 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d42:	2312      	movs	r3, #18
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <HAL_I2C_MspInit+0xd0>)
 8001d5a:	f001 f801 	bl	8002d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_I2C_MspInit+0xc8>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40005c00 	.word	0x40005c00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09a      	sub	sp, #104	@ 0x68
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db0:	2230      	movs	r2, #48	@ 0x30
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 fa71 	bl	800629c <memset>
  if(hltdc->Instance==LTDC)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a81      	ldr	r2, [pc, #516]	@ (8001fc4 <HAL_LTDC_MspInit+0x230>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 80fa 	bne.w	8001fba <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001dca:	2332      	movs	r3, #50	@ 0x32
 8001dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 f9e0 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001de6:	f7ff ff3d 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
 8001dee:	4b76      	ldr	r3, [pc, #472]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a75      	ldr	r2, [pc, #468]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001df4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b73      	ldr	r3, [pc, #460]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e10:	f043 0320 	orr.w	r3, r3, #32
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	4b68      	ldr	r3, [pc, #416]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a67      	ldr	r2, [pc, #412]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b65      	ldr	r3, [pc, #404]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	4b61      	ldr	r3, [pc, #388]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a60      	ldr	r2, [pc, #384]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a59      	ldr	r2, [pc, #356]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b57      	ldr	r3, [pc, #348]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a52      	ldr	r2, [pc, #328]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b49      	ldr	r3, [pc, #292]	@ (8001fc8 <HAL_LTDC_MspInit+0x234>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eb2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec0:	230e      	movs	r3, #14
 8001ec2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4840      	ldr	r0, [pc, #256]	@ (8001fcc <HAL_LTDC_MspInit+0x238>)
 8001ecc:	f000 ff48 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001ed0:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001ed4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ee2:	230e      	movs	r3, #14
 8001ee4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eea:	4619      	mov	r1, r3
 8001eec:	4838      	ldr	r0, [pc, #224]	@ (8001fd0 <HAL_LTDC_MspInit+0x23c>)
 8001eee:	f000 ff37 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f02:	2309      	movs	r3, #9
 8001f04:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4831      	ldr	r0, [pc, #196]	@ (8001fd4 <HAL_LTDC_MspInit+0x240>)
 8001f0e:	f000 ff27 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001f12:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f24:	230e      	movs	r3, #14
 8001f26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4829      	ldr	r0, [pc, #164]	@ (8001fd4 <HAL_LTDC_MspInit+0x240>)
 8001f30:	f000 ff16 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001f34:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001f38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f46:	230e      	movs	r3, #14
 8001f48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4821      	ldr	r0, [pc, #132]	@ (8001fd8 <HAL_LTDC_MspInit+0x244>)
 8001f52:	f000 ff05 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001f56:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001f5a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f68:	230e      	movs	r3, #14
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f70:	4619      	mov	r1, r3
 8001f72:	481a      	ldr	r0, [pc, #104]	@ (8001fdc <HAL_LTDC_MspInit+0x248>)
 8001f74:	f000 fef4 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001f78:	2348      	movs	r3, #72	@ 0x48
 8001f7a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f88:	230e      	movs	r3, #14
 8001f8a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f90:	4619      	mov	r1, r3
 8001f92:	4813      	ldr	r0, [pc, #76]	@ (8001fe0 <HAL_LTDC_MspInit+0x24c>)
 8001f94:	f000 fee4 	bl	8002d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001faa:	2309      	movs	r3, #9
 8001fac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4808      	ldr	r0, [pc, #32]	@ (8001fd8 <HAL_LTDC_MspInit+0x244>)
 8001fb6:	f000 fed3 	bl	8002d60 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001fba:	bf00      	nop
 8001fbc:	3768      	adds	r7, #104	@ 0x68
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40016800 	.word	0x40016800
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40021400 	.word	0x40021400
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00

08001fe4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8002020 <HAL_RNG_MspInit+0x3c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10d      	bne.n	8002012 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_RNG_MspInit+0x40>)
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffe:	4a09      	ldr	r2, [pc, #36]	@ (8002024 <HAL_RNG_MspInit+0x40>)
 8002000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002004:	6353      	str	r3, [r2, #52]	@ 0x34
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <HAL_RNG_MspInit+0x40>)
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	50060800 	.word	0x50060800
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_SPI_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12c      	bne.n	80020a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_SPI_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002082:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002094:	2305      	movs	r3, #5
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <HAL_SPI_MspInit+0x8c>)
 80020a0:	f000 fe5e 	bl	8002d60 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	@ 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40015000 	.word	0x40015000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40021400 	.word	0x40021400

080020b8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_SPI_MspDeInit+0x30>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10a      	bne.n	80020e0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_SPI_MspDeInit+0x34>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_SPI_MspDeInit+0x34>)
 80020d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80020d6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <HAL_SPI_MspDeInit+0x38>)
 80020dc:	f000 ffec 	bl	80030b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40015000 	.word	0x40015000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40021400 	.word	0x40021400

080020f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <NMI_Handler+0x4>

080020fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <MemManage_Handler+0x4>

0800210c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <UsageFault_Handler+0x4>

0800211c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214a:	f000 fc3d 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	@ (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002196:	f000 f9dd 	bl	8002554 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800219a:	f000 f99d 	bl	80024d8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800219e:	2202      	movs	r2, #2
 80021a0:	2103      	movs	r1, #3
 80021a2:	2082      	movs	r0, #130	@ 0x82
 80021a4:	f000 fa2a 	bl	80025fc <I2C3_Write>
    HAL_Delay(5);
 80021a8:	2005      	movs	r0, #5
 80021aa:	f000 fc2d 	bl	8002a08 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2103      	movs	r1, #3
 80021b2:	2082      	movs	r0, #130	@ 0x82
 80021b4:	f000 fa22 	bl	80025fc <I2C3_Write>
    HAL_Delay(2);
 80021b8:	2002      	movs	r0, #2
 80021ba:	f000 fc25 	bl	8002a08 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80021be:	1cba      	adds	r2, r7, #2
 80021c0:	2302      	movs	r3, #2
 80021c2:	2100      	movs	r1, #0
 80021c4:	2082      	movs	r0, #130	@ 0x82
 80021c6:	f000 fa69 	bl	800269c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4313      	orrs	r3, r2
 80021da:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	f640 0211 	movw	r2, #2065	@ 0x811
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d001      	beq.n	80021ea <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e095      	b.n	8002316 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80021ea:	2202      	movs	r2, #2
 80021ec:	2103      	movs	r1, #3
 80021ee:	2082      	movs	r0, #130	@ 0x82
 80021f0:	f000 fa04 	bl	80025fc <I2C3_Write>
    HAL_Delay(5);
 80021f4:	2005      	movs	r0, #5
 80021f6:	f000 fc07 	bl	8002a08 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2103      	movs	r1, #3
 80021fe:	2082      	movs	r0, #130	@ 0x82
 8002200:	f000 f9fc 	bl	80025fc <I2C3_Write>
    HAL_Delay(2);
 8002204:	2002      	movs	r0, #2
 8002206:	f000 fbff 	bl	8002a08 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800220a:	2004      	movs	r0, #4
 800220c:	f000 f887 	bl	800231e <STMPE811_Read>
 8002210:	4603      	mov	r3, r0
 8002212:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002214:	797b      	ldrb	r3, [r7, #5]
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800221c:	797b      	ldrb	r3, [r7, #5]
 800221e:	461a      	mov	r2, r3
 8002220:	2104      	movs	r1, #4
 8002222:	2082      	movs	r0, #130	@ 0x82
 8002224:	f000 f9ea 	bl	80025fc <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002228:	2004      	movs	r0, #4
 800222a:	f000 f878 	bl	800231e <STMPE811_Read>
 800222e:	4603      	mov	r3, r0
 8002230:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002232:	797b      	ldrb	r3, [r7, #5]
 8002234:	f023 0302 	bic.w	r3, r3, #2
 8002238:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800223a:	797b      	ldrb	r3, [r7, #5]
 800223c:	461a      	mov	r2, r3
 800223e:	2104      	movs	r1, #4
 8002240:	2082      	movs	r0, #130	@ 0x82
 8002242:	f000 f9db 	bl	80025fc <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002246:	2249      	movs	r2, #73	@ 0x49
 8002248:	2120      	movs	r1, #32
 800224a:	2082      	movs	r0, #130	@ 0x82
 800224c:	f000 f9d6 	bl	80025fc <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002250:	2002      	movs	r0, #2
 8002252:	f000 fbd9 	bl	8002a08 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002256:	2201      	movs	r2, #1
 8002258:	2121      	movs	r1, #33	@ 0x21
 800225a:	2082      	movs	r0, #130	@ 0x82
 800225c:	f000 f9ce 	bl	80025fc <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002260:	2017      	movs	r0, #23
 8002262:	f000 f85c 	bl	800231e <STMPE811_Read>
 8002266:	4603      	mov	r3, r0
 8002268:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800226a:	797b      	ldrb	r3, [r7, #5]
 800226c:	f043 031e 	orr.w	r3, r3, #30
 8002270:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002272:	797b      	ldrb	r3, [r7, #5]
 8002274:	461a      	mov	r2, r3
 8002276:	2117      	movs	r1, #23
 8002278:	2082      	movs	r0, #130	@ 0x82
 800227a:	f000 f9bf 	bl	80025fc <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800227e:	229a      	movs	r2, #154	@ 0x9a
 8002280:	2141      	movs	r1, #65	@ 0x41
 8002282:	2082      	movs	r0, #130	@ 0x82
 8002284:	f000 f9ba 	bl	80025fc <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002288:	2201      	movs	r2, #1
 800228a:	214a      	movs	r1, #74	@ 0x4a
 800228c:	2082      	movs	r0, #130	@ 0x82
 800228e:	f000 f9b5 	bl	80025fc <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002292:	2201      	movs	r2, #1
 8002294:	214b      	movs	r1, #75	@ 0x4b
 8002296:	2082      	movs	r0, #130	@ 0x82
 8002298:	f000 f9b0 	bl	80025fc <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800229c:	2200      	movs	r2, #0
 800229e:	214b      	movs	r1, #75	@ 0x4b
 80022a0:	2082      	movs	r0, #130	@ 0x82
 80022a2:	f000 f9ab 	bl	80025fc <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2156      	movs	r1, #86	@ 0x56
 80022aa:	2082      	movs	r0, #130	@ 0x82
 80022ac:	f000 f9a6 	bl	80025fc <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2158      	movs	r1, #88	@ 0x58
 80022b4:	2082      	movs	r0, #130	@ 0x82
 80022b6:	f000 f9a1 	bl	80025fc <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80022ba:	2203      	movs	r2, #3
 80022bc:	2140      	movs	r1, #64	@ 0x40
 80022be:	2082      	movs	r0, #130	@ 0x82
 80022c0:	f000 f99c 	bl	80025fc <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80022c4:	22ff      	movs	r2, #255	@ 0xff
 80022c6:	210b      	movs	r1, #11
 80022c8:	2082      	movs	r0, #130	@ 0x82
 80022ca:	f000 f997 	bl	80025fc <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80022ce:	f000 f8c1 	bl	8002454 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 80022d2:	2009      	movs	r0, #9
 80022d4:	f000 f823 	bl	800231e <STMPE811_Read>
 80022d8:	4603      	mov	r3, r0
 80022da:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80022dc:	797b      	ldrb	r3, [r7, #5]
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 80022e4:	797b      	ldrb	r3, [r7, #5]
 80022e6:	461a      	mov	r2, r3
 80022e8:	2109      	movs	r1, #9
 80022ea:	2082      	movs	r0, #130	@ 0x82
 80022ec:	f000 f986 	bl	80025fc <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 80022f0:	200a      	movs	r0, #10
 80022f2:	f000 f814 	bl	800231e <STMPE811_Read>
 80022f6:	4603      	mov	r3, r0
 80022f8:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 80022fa:	797b      	ldrb	r3, [r7, #5]
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002302:	797b      	ldrb	r3, [r7, #5]
 8002304:	461a      	mov	r2, r3
 8002306:	210a      	movs	r1, #10
 8002308:	2082      	movs	r0, #130	@ 0x82
 800230a:	f000 f977 	bl	80025fc <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800230e:	20c8      	movs	r0, #200	@ 0xc8
 8002310:	f000 fb7a 	bl	8002a08 <HAL_Delay>

    return STMPE811_State_Ok;
 8002314:	2302      	movs	r3, #2

}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002328:	f107 020f 	add.w	r2, r7, #15
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4619      	mov	r1, r3
 8002330:	2082      	movs	r0, #130	@ 0x82
 8002332:	f000 f98d 	bl	8002650 <I2C3_Read>

    return readData;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	460a      	mov	r2, r1
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	4613      	mov	r3, r2
 800234e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002350:	79ba      	ldrb	r2, [r7, #6]
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	4619      	mov	r1, r3
 8002356:	2082      	movs	r0, #130	@ 0x82
 8002358:	f000 f950 	bl	80025fc <I2C3_Write>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	799b      	ldrb	r3, [r3, #6]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d117      	bne.n	80023a4 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f9b1 	bl	80026e0 <TM_STMPE811_ReadX>
 800237e:	4603      	mov	r3, r0
 8002380:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	885b      	ldrh	r3, [r3, #2]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fa04 	bl	800279c <TM_STMPE811_ReadY>
 8002394:	4603      	mov	r3, r0
 8002396:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800239a:	3301      	adds	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	805a      	strh	r2, [r3, #2]
 80023a2:	e048      	b.n	8002436 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	799b      	ldrb	r3, [r3, #6]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d112      	bne.n	80023d2 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f995 	bl	80026e0 <TM_STMPE811_ReadX>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	885b      	ldrh	r3, [r3, #2]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f9ea 	bl	800279c <TM_STMPE811_ReadY>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	805a      	strh	r2, [r3, #2]
 80023d0:	e031      	b.n	8002436 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	799b      	ldrb	r3, [r3, #6]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d115      	bne.n	8002406 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	885b      	ldrh	r3, [r3, #2]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f97e 	bl	80026e0 <TM_STMPE811_ReadX>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f9d3 	bl	800279c <TM_STMPE811_ReadY>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80023fc:	3301      	adds	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	e017      	b.n	8002436 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	799b      	ldrb	r3, [r3, #6]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d113      	bne.n	8002436 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f964 	bl	80026e0 <TM_STMPE811_ReadX>
 8002418:	4603      	mov	r3, r0
 800241a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f9b7 	bl	800279c <TM_STMPE811_ReadY>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002436:	2201      	movs	r2, #1
 8002438:	214b      	movs	r1, #75	@ 0x4b
 800243a:	2082      	movs	r0, #130	@ 0x82
 800243c:	f000 f8de 	bl	80025fc <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002440:	2200      	movs	r2, #0
 8002442:	214b      	movs	r1, #75	@ 0x4b
 8002444:	2082      	movs	r0, #130	@ 0x82
 8002446:	f000 f8d9 	bl	80025fc <I2C3_Write>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <enableInterruptSupportForTouch+0x5c>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <enableInterruptSupportForTouch+0x5c>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <enableInterruptSupportForTouch+0x5c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002484:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002488:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800248a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800248e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002494:	2302      	movs	r3, #2
 8002496:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <enableInterruptSupportForTouch+0x60>)
 800249e:	f000 fc5f 	bl	8002d60 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024a2:	2028      	movs	r0, #40	@ 0x28
 80024a4:	f7ff fe56 	bl	8002154 <__NVIC_EnableIRQ>

}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000

080024b8 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20025a48 	.word	0x20025a48

080024d8 <I2C3_Init>:

static void I2C3_Init()
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <I2C3_Init+0x6c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <I2C3_Init+0x6c>)
 80024e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <I2C3_Init+0x6c>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <I2C3_Init+0x70>)
 80024fc:	4a13      	ldr	r2, [pc, #76]	@ (800254c <I2C3_Init+0x74>)
 80024fe:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002500:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <I2C3_Init+0x70>)
 8002502:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <I2C3_Init+0x78>)
 8002504:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <I2C3_Init+0x70>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800250c:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <I2C3_Init+0x70>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <I2C3_Init+0x70>)
 8002514:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002518:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800251a:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <I2C3_Init+0x70>)
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <I2C3_Init+0x70>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002526:	4808      	ldr	r0, [pc, #32]	@ (8002548 <I2C3_Init+0x70>)
 8002528:	f000 feec 	bl	8003304 <HAL_I2C_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <I2C3_Init+0x5e>
    }
    return;
 800253a:	bf00      	nop
}
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	200259f4 	.word	0x200259f4
 800254c:	40005c00 	.word	0x40005c00
 8002550:	000186a0 	.word	0x000186a0

08002554 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <I2C3_MspInit+0x9c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a1f      	ldr	r2, [pc, #124]	@ (80025f0 <I2C3_MspInit+0x9c>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <I2C3_MspInit+0x9c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <I2C3_MspInit+0x9c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <I2C3_MspInit+0x9c>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <I2C3_MspInit+0x9c>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80025a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	2312      	movs	r3, #18
 80025aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025b4:	2304      	movs	r3, #4
 80025b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <I2C3_MspInit+0xa0>)
 80025c0:	f000 fbce 	bl	8002d60 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80025c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025d6:	2304      	movs	r3, #4
 80025d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	@ (80025f8 <I2C3_MspInit+0xa4>)
 80025e2:	f000 fbbd 	bl	8002d60 <HAL_GPIO_Init>
    
}
 80025e6:	bf00      	nop
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020000 	.word	0x40020000

080025fc <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af04      	add	r7, sp, #16
 8002602:	4603      	mov	r3, r0
 8002604:	80fb      	strh	r3, [r7, #6]
 8002606:	460b      	mov	r3, r1
 8002608:	717b      	strb	r3, [r7, #5]
 800260a:	4613      	mov	r3, r2
 800260c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800260e:	793b      	ldrb	r3, [r7, #4]
 8002610:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002612:	797b      	ldrb	r3, [r7, #5]
 8002614:	b29a      	uxth	r2, r3
 8002616:	88f9      	ldrh	r1, [r7, #6]
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <I2C3_Write+0x48>)
 800261a:	9302      	str	r3, [sp, #8]
 800261c:	2301      	movs	r3, #1
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	f107 030f 	add.w	r3, r7, #15
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2301      	movs	r3, #1
 8002628:	4807      	ldr	r0, [pc, #28]	@ (8002648 <I2C3_Write+0x4c>)
 800262a:	f000 ffaf 	bl	800358c <HAL_I2C_Mem_Write>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <I2C3_Write+0x50>)
 8002634:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002636:	f7ff ff3f 	bl	80024b8 <verifyHAL_I2C_IS_OKAY>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	0003d090 	.word	0x0003d090
 8002648:	200259f4 	.word	0x200259f4
 800264c:	20025a48 	.word	0x20025a48

08002650 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af04      	add	r7, sp, #16
 8002656:	4603      	mov	r3, r0
 8002658:	603a      	str	r2, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	460b      	mov	r3, r1
 800265e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	b299      	uxth	r1, r3
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <I2C3_Read+0x40>)
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2301      	movs	r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	4807      	ldr	r0, [pc, #28]	@ (8002694 <I2C3_Read+0x44>)
 8002678:	f001 f882 	bl	8003780 <HAL_I2C_Mem_Read>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <I2C3_Read+0x48>)
 8002682:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002684:	f7ff ff18 	bl	80024b8 <verifyHAL_I2C_IS_OKAY>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	0003d090 	.word	0x0003d090
 8002694:	200259f4 	.word	0x200259f4
 8002698:	20025a48 	.word	0x20025a48

0800269c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	603a      	str	r2, [r7, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	460b      	mov	r3, r1
 80026ac:	71bb      	strb	r3, [r7, #6]
 80026ae:	4613      	mov	r3, r2
 80026b0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <I2C3_MulitByteRead+0x3c>)
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	88bb      	ldrh	r3, [r7, #4]
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2301      	movs	r3, #1
 80026c8:	4804      	ldr	r0, [pc, #16]	@ (80026dc <I2C3_MulitByteRead+0x40>)
 80026ca:	f001 f859 	bl	8003780 <HAL_I2C_Mem_Read>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0003d090 	.word	0x0003d090
 80026dc:	200259f4 	.word	0x200259f4

080026e0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80026ea:	204d      	movs	r0, #77	@ 0x4d
 80026ec:	f7ff fe17 	bl	800231e <STMPE811_Read>
 80026f0:	4603      	mov	r3, r0
 80026f2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80026f4:	204e      	movs	r0, #78	@ 0x4e
 80026f6:	f7ff fe12 	bl	800231e <STMPE811_Read>
 80026fa:	4603      	mov	r3, r0
 80026fc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80026fe:	7a7b      	ldrb	r3, [r7, #9]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	b21a      	sxth	r2, r3
 8002704:	7a3b      	ldrb	r3, [r7, #8]
 8002706:	b21b      	sxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800270c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002710:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002714:	4293      	cmp	r3, r2
 8002716:	dc06      	bgt.n	8002726 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800271e:	330c      	adds	r3, #12
 8002720:	b29b      	uxth	r3, r3
 8002722:	81fb      	strh	r3, [r7, #14]
 8002724:	e005      	b.n	8002732 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800272c:	3308      	adds	r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002732:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002736:	4a18      	ldr	r2, [pc, #96]	@ (8002798 <TM_STMPE811_ReadX+0xb8>)
 8002738:	fb82 1203 	smull	r1, r2, r2, r3
 800273c:	441a      	add	r2, r3
 800273e:	10d2      	asrs	r2, r2, #3
 8002740:	17db      	asrs	r3, r3, #31
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002746:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800274a:	2bef      	cmp	r3, #239	@ 0xef
 800274c:	dd02      	ble.n	8002754 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800274e:	23ef      	movs	r3, #239	@ 0xef
 8002750:	81fb      	strh	r3, [r7, #14]
 8002752:	e005      	b.n	8002760 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002758:	2b00      	cmp	r3, #0
 800275a:	da01      	bge.n	8002760 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002760:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	429a      	cmp	r2, r3
 8002768:	dd05      	ble.n	8002776 <TM_STMPE811_ReadX+0x96>
 800276a:	89fa      	ldrh	r2, [r7, #14]
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	b29b      	uxth	r3, r3
 8002772:	b21b      	sxth	r3, r3
 8002774:	e004      	b.n	8002780 <TM_STMPE811_ReadX+0xa0>
 8002776:	89fb      	ldrh	r3, [r7, #14]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21b      	sxth	r3, r3
 8002780:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002782:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002786:	2b04      	cmp	r3, #4
 8002788:	dd01      	ble.n	800278e <TM_STMPE811_ReadX+0xae>
        return val;
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	e000      	b.n	8002790 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800278e:	88fb      	ldrh	r3, [r7, #6]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	88888889 	.word	0x88888889

0800279c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80027a6:	204f      	movs	r0, #79	@ 0x4f
 80027a8:	f7ff fdb9 	bl	800231e <STMPE811_Read>
 80027ac:	4603      	mov	r3, r0
 80027ae:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80027b0:	2050      	movs	r0, #80	@ 0x50
 80027b2:	f7ff fdb4 	bl	800231e <STMPE811_Read>
 80027b6:	4603      	mov	r3, r0
 80027b8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80027ba:	7a7b      	ldrb	r3, [r7, #9]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	b21a      	sxth	r2, r3
 80027c0:	7a3b      	ldrb	r3, [r7, #8]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80027d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027d6:	4a19      	ldr	r2, [pc, #100]	@ (800283c <TM_STMPE811_ReadY+0xa0>)
 80027d8:	fb82 1203 	smull	r1, r2, r2, r3
 80027dc:	1052      	asrs	r2, r2, #1
 80027de:	17db      	asrs	r3, r3, #31
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80027e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dc02      	bgt.n	80027f2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	81fb      	strh	r3, [r7, #14]
 80027f0:	e007      	b.n	8002802 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80027f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027fa:	db02      	blt.n	8002802 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80027fc:	f240 133f 	movw	r3, #319	@ 0x13f
 8002800:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002802:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	429a      	cmp	r2, r3
 800280a:	dd05      	ble.n	8002818 <TM_STMPE811_ReadY+0x7c>
 800280c:	89fa      	ldrh	r2, [r7, #14]
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	b29b      	uxth	r3, r3
 8002814:	b21b      	sxth	r3, r3
 8002816:	e004      	b.n	8002822 <TM_STMPE811_ReadY+0x86>
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	b29b      	uxth	r3, r3
 8002820:	b21b      	sxth	r3, r3
 8002822:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002828:	2b04      	cmp	r3, #4
 800282a:	dd01      	ble.n	8002830 <TM_STMPE811_ReadY+0x94>
        return val;
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	e000      	b.n	8002832 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002830:	88fb      	ldrh	r3, [r7, #6]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2e8ba2e9 	.word	0x2e8ba2e9

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f003 fd62 	bl	8006338 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20030000 	.word	0x20030000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	20025a4c 	.word	0x20025a4c
 80028a8:	20025c40 	.word	0x20025c40

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d4:	f7ff ffea 	bl	80028ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028fe:	f003 fd21 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7ff f95b 	bl	8001bbc <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002908:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002914:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 8002918:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800291c:	20025c40 	.word	0x20025c40

08002920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 f991 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff f98a 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f9b7 	bl	8002cfa <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 f971 	bl	8002c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000010 	.word	0x20000010
 80029c0:	20000018 	.word	0x20000018
 80029c4:	20000014 	.word	0x20000014

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000018 	.word	0x20000018
 80029ec:	20025a50 	.word	0x20025a50

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20025a50 	.word	0x20025a50

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000018 	.word	0x20000018

08002a50 <__NVIC_SetPriorityGrouping>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4907      	ldr	r1, [pc, #28]	@ (8002aec <__NVIC_EnableIRQ+0x38>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db12      	blt.n	8002b28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	490a      	ldr	r1, [pc, #40]	@ (8002b34 <__NVIC_DisableIRQ+0x44>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	3320      	adds	r3, #32
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1c:	f3bf 8f4f 	dsb	sy
}
 8002b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b22:	f3bf 8f6f 	isb	sy
}
 8002b26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0c      	blt.n	8002b64 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	@ (8002b70 <__NVIC_ClearPendingIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	3360      	adds	r3, #96	@ 0x60
 8002b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f7ff ff8e 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fee7 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff fefc 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff8e 	bl	8002bc8 <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5d 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff feef 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff feff 	bl	8002af0 <__NVIC_DisableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ff94 	bl	8002c30 <SysTick_Config>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff09 	bl	8002b38 <__NVIC_ClearPendingIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2201      	movs	r2, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_EXTI_ClearPending+0x2c>)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6153      	str	r3, [r2, #20]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e177      	b.n	800306c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f040 8166 	bne.w	8003066 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d005      	beq.n	8002db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d130      	bne.n	8002e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 0201 	and.w	r2, r3, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d017      	beq.n	8002e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d123      	bne.n	8002ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	08da      	lsrs	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3208      	adds	r2, #8
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0203 	and.w	r2, r3, #3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80c0 	beq.w	8003066 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b66      	ldr	r3, [pc, #408]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	4a65      	ldr	r2, [pc, #404]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef6:	4b63      	ldr	r3, [pc, #396]	@ (8003084 <HAL_GPIO_Init+0x324>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f02:	4a61      	ldr	r2, [pc, #388]	@ (8003088 <HAL_GPIO_Init+0x328>)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	220f      	movs	r2, #15
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a58      	ldr	r2, [pc, #352]	@ (800308c <HAL_GPIO_Init+0x32c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d037      	beq.n	8002f9e <HAL_GPIO_Init+0x23e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a57      	ldr	r2, [pc, #348]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d031      	beq.n	8002f9a <HAL_GPIO_Init+0x23a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a56      	ldr	r2, [pc, #344]	@ (8003094 <HAL_GPIO_Init+0x334>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02b      	beq.n	8002f96 <HAL_GPIO_Init+0x236>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a55      	ldr	r2, [pc, #340]	@ (8003098 <HAL_GPIO_Init+0x338>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d025      	beq.n	8002f92 <HAL_GPIO_Init+0x232>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a54      	ldr	r2, [pc, #336]	@ (800309c <HAL_GPIO_Init+0x33c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <HAL_GPIO_Init+0x22e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a53      	ldr	r2, [pc, #332]	@ (80030a0 <HAL_GPIO_Init+0x340>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d019      	beq.n	8002f8a <HAL_GPIO_Init+0x22a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <HAL_GPIO_Init+0x344>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0x226>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a51      	ldr	r2, [pc, #324]	@ (80030a8 <HAL_GPIO_Init+0x348>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00d      	beq.n	8002f82 <HAL_GPIO_Init+0x222>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a50      	ldr	r2, [pc, #320]	@ (80030ac <HAL_GPIO_Init+0x34c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <HAL_GPIO_Init+0x21e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4f      	ldr	r2, [pc, #316]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_GPIO_Init+0x21a>
 8002f76:	2309      	movs	r3, #9
 8002f78:	e012      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f7a:	230a      	movs	r3, #10
 8002f7c:	e010      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e00e      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00c      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f86:	2306      	movs	r3, #6
 8002f88:	e00a      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	e008      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f8e:	2304      	movs	r3, #4
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f92:	2303      	movs	r3, #3
 8002f94:	e004      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e002      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_GPIO_Init+0x240>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	f002 0203 	and.w	r2, r2, #3
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	4093      	lsls	r3, r2
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb0:	4935      	ldr	r1, [pc, #212]	@ (8003088 <HAL_GPIO_Init+0x328>)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe2:	4a34      	ldr	r2, [pc, #208]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe8:	4b32      	ldr	r3, [pc, #200]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800300c:	4a29      	ldr	r2, [pc, #164]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003012:	4b28      	ldr	r3, [pc, #160]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003036:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800303c:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003060:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <HAL_GPIO_Init+0x354>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	f67f ae84 	bls.w	8002d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	40013800 	.word	0x40013800
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40020800 	.word	0x40020800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40021000 	.word	0x40021000
 80030a0:	40021400 	.word	0x40021400
 80030a4:	40021800 	.word	0x40021800
 80030a8:	40021c00 	.word	0x40021c00
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022400 	.word	0x40022400
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e0d9      	b.n	8003288 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	f040 80c9 	bne.w	8003282 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030f0:	4a6b      	ldr	r2, [pc, #428]	@ (80032a0 <HAL_GPIO_DeInit+0x1e8>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a63      	ldr	r2, [pc, #396]	@ (80032a4 <HAL_GPIO_DeInit+0x1ec>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d037      	beq.n	800318a <HAL_GPIO_DeInit+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a62      	ldr	r2, [pc, #392]	@ (80032a8 <HAL_GPIO_DeInit+0x1f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_GPIO_DeInit+0xce>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a61      	ldr	r2, [pc, #388]	@ (80032ac <HAL_GPIO_DeInit+0x1f4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_DeInit+0xca>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a60      	ldr	r2, [pc, #384]	@ (80032b0 <HAL_GPIO_DeInit+0x1f8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d025      	beq.n	800317e <HAL_GPIO_DeInit+0xc6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a5f      	ldr	r2, [pc, #380]	@ (80032b4 <HAL_GPIO_DeInit+0x1fc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <HAL_GPIO_DeInit+0xc2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a5e      	ldr	r2, [pc, #376]	@ (80032b8 <HAL_GPIO_DeInit+0x200>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_DeInit+0xbe>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a5d      	ldr	r2, [pc, #372]	@ (80032bc <HAL_GPIO_DeInit+0x204>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_DeInit+0xba>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a5c      	ldr	r2, [pc, #368]	@ (80032c0 <HAL_GPIO_DeInit+0x208>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_DeInit+0xb6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a5b      	ldr	r2, [pc, #364]	@ (80032c4 <HAL_GPIO_DeInit+0x20c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_DeInit+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a5a      	ldr	r2, [pc, #360]	@ (80032c8 <HAL_GPIO_DeInit+0x210>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_DeInit+0xae>
 8003162:	2309      	movs	r3, #9
 8003164:	e012      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003166:	230a      	movs	r3, #10
 8003168:	e010      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800316a:	2308      	movs	r3, #8
 800316c:	e00e      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800316e:	2307      	movs	r3, #7
 8003170:	e00c      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003172:	2306      	movs	r3, #6
 8003174:	e00a      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003176:	2305      	movs	r3, #5
 8003178:	e008      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800317a:	2304      	movs	r3, #4
 800317c:	e006      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800318a:	2300      	movs	r3, #0
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	429a      	cmp	r2, r3
 800319a:	d132      	bne.n	8003202 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800319c:	4b4b      	ldr	r3, [pc, #300]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4949      	ldr	r1, [pc, #292]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031aa:	4b48      	ldr	r3, [pc, #288]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4946      	ldr	r1, [pc, #280]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031b8:	4b44      	ldr	r3, [pc, #272]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	4942      	ldr	r1, [pc, #264]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031c6:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	493f      	ldr	r1, [pc, #252]	@ (80032cc <HAL_GPIO_DeInit+0x214>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031e4:	4a2e      	ldr	r2, [pc, #184]	@ (80032a0 <HAL_GPIO_DeInit+0x1e8>)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	43da      	mvns	r2, r3
 80031f4:	482a      	ldr	r0, [pc, #168]	@ (80032a0 <HAL_GPIO_DeInit+0x1e8>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	400a      	ands	r2, r1
 80031fc:	3302      	adds	r3, #2
 80031fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2103      	movs	r1, #3
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	401a      	ands	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	220f      	movs	r2, #15
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	08d2      	lsrs	r2, r2, #3
 8003238:	4019      	ands	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2103      	movs	r1, #3
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	401a      	ands	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2103      	movs	r1, #3
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	401a      	ands	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	f67f af22 	bls.w	80030d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40013800 	.word	0x40013800
 80032a4:	40020000 	.word	0x40020000
 80032a8:	40020400 	.word	0x40020400
 80032ac:	40020800 	.word	0x40020800
 80032b0:	40020c00 	.word	0x40020c00
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40021400 	.word	0x40021400
 80032bc:	40021800 	.word	0x40021800
 80032c0:	40021c00 	.word	0x40021c00
 80032c4:	40022000 	.word	0x40022000
 80032c8:	40022400 	.word	0x40022400
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e12b      	b.n	800356e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fcc8 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	@ 0x24
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003368:	f001 ff06 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a81      	ldr	r2, [pc, #516]	@ (8003578 <HAL_I2C_Init+0x274>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d807      	bhi.n	8003388 <HAL_I2C_Init+0x84>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a80      	ldr	r2, [pc, #512]	@ (800357c <HAL_I2C_Init+0x278>)
 800337c:	4293      	cmp	r3, r2
 800337e:	bf94      	ite	ls
 8003380:	2301      	movls	r3, #1
 8003382:	2300      	movhi	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e006      	b.n	8003396 <HAL_I2C_Init+0x92>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a7d      	ldr	r2, [pc, #500]	@ (8003580 <HAL_I2C_Init+0x27c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	bf94      	ite	ls
 8003390:	2301      	movls	r3, #1
 8003392:	2300      	movhi	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0e7      	b.n	800356e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a78      	ldr	r2, [pc, #480]	@ (8003584 <HAL_I2C_Init+0x280>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	0c9b      	lsrs	r3, r3, #18
 80033a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003578 <HAL_I2C_Init+0x274>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d802      	bhi.n	80033d8 <HAL_I2C_Init+0xd4>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3301      	adds	r3, #1
 80033d6:	e009      	b.n	80033ec <HAL_I2C_Init+0xe8>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	4a69      	ldr	r2, [pc, #420]	@ (8003588 <HAL_I2C_Init+0x284>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	3301      	adds	r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	495c      	ldr	r1, [pc, #368]	@ (8003578 <HAL_I2C_Init+0x274>)
 8003408:	428b      	cmp	r3, r1
 800340a:	d819      	bhi.n	8003440 <HAL_I2C_Init+0x13c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1e59      	subs	r1, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fbb1 f3f3 	udiv	r3, r1, r3
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003420:	400b      	ands	r3, r1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_I2C_Init+0x138>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e59      	subs	r1, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fbb1 f3f3 	udiv	r3, r1, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343a:	e051      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 800343c:	2304      	movs	r3, #4
 800343e:	e04f      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d111      	bne.n	800346c <HAL_I2C_Init+0x168>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e012      	b.n	8003492 <HAL_I2C_Init+0x18e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	0099      	lsls	r1, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Init+0x196>
 8003496:	2301      	movs	r3, #1
 8003498:	e022      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10e      	bne.n	80034c0 <HAL_I2C_Init+0x1bc>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e58      	subs	r0, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	440b      	add	r3, r1
 80034b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034be:	e00f      	b.n	80034e0 <HAL_I2C_Init+0x1dc>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	0099      	lsls	r1, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	6809      	ldr	r1, [r1, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800350e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6911      	ldr	r1, [r2, #16]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68d2      	ldr	r2, [r2, #12]
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	430b      	orrs	r3, r1
 8003522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	000186a0 	.word	0x000186a0
 800357c:	001e847f 	.word	0x001e847f
 8003580:	003d08ff 	.word	0x003d08ff
 8003584:	431bde83 	.word	0x431bde83
 8003588:	10624dd3 	.word	0x10624dd3

0800358c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	460b      	mov	r3, r1
 80035a0:	813b      	strh	r3, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a6:	f7ff fa23 	bl	80029f0 <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	f040 80d9 	bne.w	800376c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2319      	movs	r3, #25
 80035c0:	2201      	movs	r2, #1
 80035c2:	496d      	ldr	r1, [pc, #436]	@ (8003778 <HAL_I2C_Mem_Write+0x1ec>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fc8b 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
 80035d2:	e0cc      	b.n	800376e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_I2C_Mem_Write+0x56>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0c5      	b.n	800376e <HAL_I2C_Mem_Write+0x1e2>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d007      	beq.n	8003608 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2221      	movs	r2, #33	@ 0x21
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	@ 0x40
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a4d      	ldr	r2, [pc, #308]	@ (800377c <HAL_I2C_Mem_Write+0x1f0>)
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800364a:	88f8      	ldrh	r0, [r7, #6]
 800364c:	893a      	ldrh	r2, [r7, #8]
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4603      	mov	r3, r0
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fac2 	bl	8003be4 <I2C_RequestMemoryWrite>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d052      	beq.n	800370c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e081      	b.n	800376e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fd50 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	2b04      	cmp	r3, #4
 8003680:	d107      	bne.n	8003692 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003690:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06b      	b.n	800376e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11b      	bne.n	800370c <HAL_I2C_Mem_Write+0x180>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1aa      	bne.n	800366a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fd43 	bl	80041a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	2b04      	cmp	r3, #4
 800372a:	d107      	bne.n	800373c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e016      	b.n	800376e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	00100002 	.word	0x00100002
 800377c:	ffff0000 	.word	0xffff0000

08003780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	@ 0x30
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	4603      	mov	r3, r0
 8003790:	817b      	strh	r3, [r7, #10]
 8003792:	460b      	mov	r3, r1
 8003794:	813b      	strh	r3, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800379a:	f7ff f929 	bl	80029f0 <HAL_GetTick>
 800379e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	f040 8214 	bne.w	8003bd6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2319      	movs	r3, #25
 80037b4:	2201      	movs	r2, #1
 80037b6:	497b      	ldr	r1, [pc, #492]	@ (80039a4 <HAL_I2C_Mem_Read+0x224>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fb91 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
 80037c6:	e207      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_I2C_Mem_Read+0x56>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e200      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d007      	beq.n	80037fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2222      	movs	r2, #34	@ 0x22
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2240      	movs	r2, #64	@ 0x40
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800382c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a5b      	ldr	r2, [pc, #364]	@ (80039a8 <HAL_I2C_Mem_Read+0x228>)
 800383c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800383e:	88f8      	ldrh	r0, [r7, #6]
 8003840:	893a      	ldrh	r2, [r7, #8]
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	4603      	mov	r3, r0
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fa5e 	bl	8003d10 <I2C_RequestMemoryRead>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1bc      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d113      	bne.n	800388e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e190      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11b      	bne.n	80038ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e170      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d11b      	bne.n	800390e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	e150      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003924:	e144      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	2b03      	cmp	r3, #3
 800392c:	f200 80f1 	bhi.w	8003b12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	2b01      	cmp	r3, #1
 8003936:	d123      	bne.n	8003980 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc79 	bl	8004234 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e145      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800397e:	e117      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003984:	2b02      	cmp	r3, #2
 8003986:	d14e      	bne.n	8003a26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398e:	2200      	movs	r2, #0
 8003990:	4906      	ldr	r1, [pc, #24]	@ (80039ac <HAL_I2C_Mem_Read+0x22c>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 faa4 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e11a      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
 80039a2:	bf00      	nop
 80039a4:	00100002 	.word	0x00100002
 80039a8:	ffff0000 	.word	0xffff0000
 80039ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a24:	e0c4      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	496c      	ldr	r1, [pc, #432]	@ (8003be0 <HAL_I2C_Mem_Read+0x460>)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fa55 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0cb      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4955      	ldr	r1, [pc, #340]	@ (8003be0 <HAL_I2C_Mem_Read+0x460>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fa27 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e09d      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b10:	e04e      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fb8c 	bl	8004234 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e058      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d124      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d107      	bne.n	8003b7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f47f aeb6 	bne.w	8003926 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3728      	adds	r7, #40	@ 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	00010004 	.word	0x00010004

08003be4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f960 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c34:	d103      	bne.n	8003c3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e05f      	b.n	8003d02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	492d      	ldr	r1, [pc, #180]	@ (8003d0c <I2C_RequestMemoryWrite+0x128>)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9bb 	bl	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e04c      	b.n	8003d02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c80:	6a39      	ldr	r1, [r7, #32]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fa46 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d107      	bne.n	8003ca6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e02b      	b.n	8003d02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
 8003cba:	e021      	b.n	8003d00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cbc:	893b      	ldrh	r3, [r7, #8]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	6a39      	ldr	r1, [r7, #32]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa20 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00d      	beq.n	8003cf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d107      	bne.n	8003cf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e005      	b.n	8003d02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf6:	893b      	ldrh	r3, [r7, #8]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	00010002 	.word	0x00010002

08003d10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	817b      	strh	r3, [r7, #10]
 8003d22:	460b      	mov	r3, r1
 8003d24:	813b      	strh	r3, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f8c2 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d70:	d103      	bne.n	8003d7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0aa      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	4952      	ldr	r1, [pc, #328]	@ (8003edc <I2C_RequestMemoryRead+0x1cc>)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f91d 	bl	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e097      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f9a8 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e076      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dec:	893b      	ldrh	r3, [r7, #8]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	e021      	b.n	8003e3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f982 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e050      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e32:	893b      	ldrh	r3, [r7, #8]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f967 	bl	8004114 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e035      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f82b 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00d      	beq.n	8003eac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9e:	d103      	bne.n	8003ea8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e013      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003eac:	897b      	ldrh	r3, [r7, #10]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	6a3a      	ldr	r2, [r7, #32]
 8003ec0:	4906      	ldr	r1, [pc, #24]	@ (8003edc <I2C_RequestMemoryRead+0x1cc>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f886 	bl	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	00010002 	.word	0x00010002

08003ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	e048      	b.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d044      	beq.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fe fd79 	bl	80029f0 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d139      	bne.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d10d      	bne.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	43da      	mvns	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	e00c      	b.n	8003f50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d116      	bne.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e023      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10d      	bne.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	e00c      	b.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d093      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fe2:	e071      	b.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff2:	d123      	bne.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004002:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800400c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e067      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d041      	beq.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004044:	f7fe fcd4 	bl	80029f0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d136      	bne.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10c      	bne.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e00b      	b.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e021      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10c      	bne.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e00b      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4013      	ands	r3, r2
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f af6d 	bne.w	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004120:	e034      	b.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f8e3 	bl	80042ee <I2C_IsAcknowledgeFailed>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e034      	b.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d028      	beq.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fe fc59 	bl	80029f0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11d      	bne.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d016      	beq.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d1c3      	bne.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041b0:	e034      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f89b 	bl	80042ee <I2C_IsAcknowledgeFailed>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e034      	b.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d028      	beq.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe fc11 	bl	80029f0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d11d      	bne.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d016      	beq.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e007      	b.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b04      	cmp	r3, #4
 8004228:	d1c3      	bne.n	80041b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004240:	e049      	b.n	80042d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b10      	cmp	r3, #16
 800424e:	d119      	bne.n	8004284 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0210 	mvn.w	r2, #16
 8004258:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e030      	b.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004284:	f7fe fbb4 	bl	80029f0 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11d      	bne.n	80042d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d016      	beq.n	80042d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e007      	b.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d1ae      	bne.n	8004242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004304:	d11b      	bne.n	800433e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800430e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f043 0204 	orr.w	r2, r3, #4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0bf      	b.n	80044de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fd0e 	bl	8001d94 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800438e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b4a      	ldr	r3, [pc, #296]	@ (80044e8 <HAL_LTDC_Init+0x19c>)
 80043c0:	400b      	ands	r3, r1
 80043c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68d9      	ldr	r1, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b3e      	ldr	r3, [pc, #248]	@ (80044e8 <HAL_LTDC_Init+0x19c>)
 80043ee:	400b      	ands	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68d9      	ldr	r1, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6919      	ldr	r1, [r3, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b33      	ldr	r3, [pc, #204]	@ (80044e8 <HAL_LTDC_Init+0x19c>)
 800441c:	400b      	ands	r3, r1
 800441e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6919      	ldr	r1, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6959      	ldr	r1, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b27      	ldr	r3, [pc, #156]	@ (80044e8 <HAL_LTDC_Init+0x19c>)
 800444a:	400b      	ands	r3, r1
 800444c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6959      	ldr	r1, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800448e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0206 	orr.w	r2, r2, #6
 80044ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	f000f800 	.word	0xf000f800

080044ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_LTDC_ConfigLayer+0x1a>
 8004502:	2302      	movs	r3, #2
 8004504:	e02c      	b.n	8004560 <HAL_LTDC_ConfigLayer+0x74>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2134      	movs	r1, #52	@ 0x34
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f811 	bl	8004568 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2201      	movs	r2, #1
 800454c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bdb0      	pop	{r4, r5, r7, pc}

08004568 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	@ 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004584:	4413      	add	r3, r2
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	4413      	add	r3, r2
 8004596:	3384      	adds	r3, #132	@ 0x84
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	4611      	mov	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	01d2      	lsls	r2, r2, #7
 80045a4:	440a      	add	r2, r1
 80045a6:	3284      	adds	r2, #132	@ 0x84
 80045a8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80045ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	01db      	lsls	r3, r3, #7
 80045cc:	440b      	add	r3, r1
 80045ce:	3384      	adds	r3, #132	@ 0x84
 80045d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e6:	4413      	add	r3, r2
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	01db      	lsls	r3, r3, #7
 80045f6:	4413      	add	r3, r2
 80045f8:	3384      	adds	r3, #132	@ 0x84
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4611      	mov	r1, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	01d2      	lsls	r2, r2, #7
 8004606:	440a      	add	r2, r1
 8004608:	3284      	adds	r2, #132	@ 0x84
 800460a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800460e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461e:	4413      	add	r3, r2
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	440b      	add	r3, r1
 800462e:	3384      	adds	r3, #132	@ 0x84
 8004630:	4619      	mov	r1, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	01db      	lsls	r3, r3, #7
 8004642:	4413      	add	r3, r2
 8004644:	3384      	adds	r3, #132	@ 0x84
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	4611      	mov	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	01d2      	lsls	r2, r2, #7
 8004652:	440a      	add	r2, r1
 8004654:	3284      	adds	r2, #132	@ 0x84
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	01db      	lsls	r3, r3, #7
 8004666:	4413      	add	r3, r2
 8004668:	3384      	adds	r3, #132	@ 0x84
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	01db      	lsls	r3, r3, #7
 8004698:	4413      	add	r3, r2
 800469a:	3384      	adds	r3, #132	@ 0x84
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	4413      	add	r3, r2
 80046aa:	3384      	adds	r3, #132	@ 0x84
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046b8:	461a      	mov	r2, r3
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	431a      	orrs	r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	440b      	add	r3, r1
 80046ce:	3384      	adds	r3, #132	@ 0x84
 80046d0:	4619      	mov	r1, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	01db      	lsls	r3, r3, #7
 80046e2:	4413      	add	r3, r2
 80046e4:	3384      	adds	r3, #132	@ 0x84
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4611      	mov	r1, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	01d2      	lsls	r2, r2, #7
 80046f2:	440a      	add	r2, r1
 80046f4:	3284      	adds	r2, #132	@ 0x84
 80046f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3384      	adds	r3, #132	@ 0x84
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	01db      	lsls	r3, r3, #7
 800471c:	4413      	add	r3, r2
 800471e:	3384      	adds	r3, #132	@ 0x84
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	4611      	mov	r1, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	01d2      	lsls	r2, r2, #7
 800472c:	440a      	add	r2, r1
 800472e:	3284      	adds	r2, #132	@ 0x84
 8004730:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004734:	f023 0307 	bic.w	r3, r3, #7
 8004738:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	6809      	ldr	r1, [r1, #0]
 8004746:	4608      	mov	r0, r1
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	01c9      	lsls	r1, r1, #7
 800474c:	4401      	add	r1, r0
 800474e:	3184      	adds	r1, #132	@ 0x84
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	4413      	add	r3, r2
 8004760:	3384      	adds	r3, #132	@ 0x84
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	01db      	lsls	r3, r3, #7
 800476e:	4413      	add	r3, r2
 8004770:	3384      	adds	r3, #132	@ 0x84
 8004772:	461a      	mov	r2, r3
 8004774:	2300      	movs	r3, #0
 8004776:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	3384      	adds	r3, #132	@ 0x84
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004796:	2304      	movs	r3, #4
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e01b      	b.n	80047d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80047a4:	2303      	movs	r3, #3
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	e014      	b.n	80047d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00b      	beq.n	80047ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d007      	beq.n	80047ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d003      	beq.n	80047ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	d102      	bne.n	80047d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047ca:	2302      	movs	r3, #2
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e001      	b.n	80047d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047d0:	2301      	movs	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	01db      	lsls	r3, r3, #7
 80047de:	4413      	add	r3, r2
 80047e0:	3384      	adds	r3, #132	@ 0x84
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	4611      	mov	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	01d2      	lsls	r2, r2, #7
 80047ee:	440a      	add	r2, r1
 80047f0:	3284      	adds	r2, #132	@ 0x84
 80047f2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80047f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6859      	ldr	r1, [r3, #4]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	1acb      	subs	r3, r1, r3
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	6809      	ldr	r1, [r1, #0]
 800481a:	4608      	mov	r0, r1
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	01c9      	lsls	r1, r1, #7
 8004820:	4401      	add	r1, r0
 8004822:	3184      	adds	r1, #132	@ 0x84
 8004824:	4313      	orrs	r3, r2
 8004826:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	01db      	lsls	r3, r3, #7
 8004832:	4413      	add	r3, r2
 8004834:	3384      	adds	r3, #132	@ 0x84
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	4611      	mov	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	01d2      	lsls	r2, r2, #7
 8004842:	440a      	add	r2, r1
 8004844:	3284      	adds	r2, #132	@ 0x84
 8004846:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	4413      	add	r3, r2
 800485c:	3384      	adds	r3, #132	@ 0x84
 800485e:	461a      	mov	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4413      	add	r3, r2
 8004872:	3384      	adds	r3, #132	@ 0x84
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	4611      	mov	r1, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	01d2      	lsls	r2, r2, #7
 8004880:	440a      	add	r2, r1
 8004882:	3284      	adds	r2, #132	@ 0x84
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6013      	str	r3, [r2, #0]
}
 800488a:	bf00      	nop
 800488c:	3724      	adds	r7, #36	@ 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e267      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d075      	beq.n	80049a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048b6:	4b88      	ldr	r3, [pc, #544]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00c      	beq.n	80048dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4b85      	ldr	r3, [pc, #532]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d112      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b82      	ldr	r3, [pc, #520]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048da:	d10b      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d157      	bne.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e242      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x74>
 80048fe:	4b76      	ldr	r3, [pc, #472]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a75      	ldr	r2, [pc, #468]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b70      	ldr	r3, [pc, #448]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b6d      	ldr	r3, [pc, #436]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6c      	ldr	r2, [pc, #432]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 8004930:	4b69      	ldr	r3, [pc, #420]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a68      	ldr	r2, [pc, #416]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b66      	ldr	r3, [pc, #408]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe f84e 	bl	80029f0 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004958:	f7fe f84a 	bl	80029f0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	@ 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e207      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0xc0>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fe f83a 	bl	80029f0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7fe f836 	bl	80029f0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	@ 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1f3      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	4b51      	ldr	r3, [pc, #324]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049ae:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b47      	ldr	r3, [pc, #284]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c6:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	4b41      	ldr	r3, [pc, #260]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e1c7      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4937      	ldr	r1, [pc, #220]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	e03a      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b34      	ldr	r3, [pc, #208]	@ (8004adc <HAL_RCC_OscConfig+0x244>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fd ffef 	bl	80029f0 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fd ffeb 	bl	80029f0 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1a8      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b28      	ldr	r3, [pc, #160]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4925      	ldr	r1, [pc, #148]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_RCC_OscConfig+0x244>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd ffce 	bl	80029f0 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd ffca 	bl	80029f0 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e187      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d036      	beq.n	8004af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ae0 <HAL_RCC_OscConfig+0x248>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fd ffae 	bl	80029f0 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fd ffaa 	bl	80029f0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e167      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <HAL_RCC_OscConfig+0x240>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
 8004ab6:	e01b      	b.n	8004af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <HAL_RCC_OscConfig+0x248>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fd ff97 	bl	80029f0 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e00e      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fd ff93 	bl	80029f0 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d907      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e150      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	42470000 	.word	0x42470000
 8004ae0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae4:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ea      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8097 	beq.w	8004c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b81      	ldr	r3, [pc, #516]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	4b7d      	ldr	r3, [pc, #500]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	4a7c      	ldr	r2, [pc, #496]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2e:	4b77      	ldr	r3, [pc, #476]	@ (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d118      	bne.n	8004b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3a:	4b74      	ldr	r3, [pc, #464]	@ (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a73      	ldr	r2, [pc, #460]	@ (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b46:	f7fd ff53 	bl	80029f0 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7fd ff4f 	bl	80029f0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e10c      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	4b6a      	ldr	r3, [pc, #424]	@ (8004d0c <HAL_RCC_OscConfig+0x474>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <HAL_RCC_OscConfig+0x2ea>
 8004b74:	4b64      	ldr	r3, [pc, #400]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b78:	4a63      	ldr	r2, [pc, #396]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b80:	e01c      	b.n	8004bbc <HAL_RCC_OscConfig+0x324>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x30c>
 8004b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b96:	4b5c      	ldr	r3, [pc, #368]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0x324>
 8004ba4:	4b58      	ldr	r3, [pc, #352]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	4a57      	ldr	r2, [pc, #348]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb0:	4b55      	ldr	r3, [pc, #340]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb4:	4a54      	ldr	r2, [pc, #336]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	f023 0304 	bic.w	r3, r3, #4
 8004bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fd ff14 	bl	80029f0 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f7fd ff10 	bl	80029f0 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e0cb      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be2:	4b49      	ldr	r3, [pc, #292]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ee      	beq.n	8004bcc <HAL_RCC_OscConfig+0x334>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf0:	f7fd fefe 	bl	80029f0 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fefa 	bl	80029f0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e0b5      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ee      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c20:	4b39      	ldr	r3, [pc, #228]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	4a38      	ldr	r2, [pc, #224]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80a1 	beq.w	8004d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c36:	4b34      	ldr	r3, [pc, #208]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d05c      	beq.n	8004cfc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d141      	bne.n	8004cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4a:	4b31      	ldr	r3, [pc, #196]	@ (8004d10 <HAL_RCC_OscConfig+0x478>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd fece 	bl	80029f0 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fd feca 	bl	80029f0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e087      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	041b      	lsls	r3, r3, #16
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	491b      	ldr	r1, [pc, #108]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <HAL_RCC_OscConfig+0x478>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fd fea3 	bl	80029f0 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd fe9f 	bl	80029f0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e05c      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc0:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x416>
 8004ccc:	e054      	b.n	8004d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cce:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <HAL_RCC_OscConfig+0x478>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fe8c 	bl	80029f0 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fe88 	bl	80029f0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e045      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x444>
 8004cfa:	e03d      	b.n	8004d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e038      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40007000 	.word	0x40007000
 8004d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d14:	4b1b      	ldr	r3, [pc, #108]	@ (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d028      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d121      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d11a      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d111      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0cc      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b68      	ldr	r3, [pc, #416]	@ (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d90c      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b65      	ldr	r3, [pc, #404]	@ (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b63      	ldr	r3, [pc, #396]	@ (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b8      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	4b59      	ldr	r3, [pc, #356]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a58      	ldr	r2, [pc, #352]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004de6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df4:	4b53      	ldr	r3, [pc, #332]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a52      	ldr	r2, [pc, #328]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e00:	4b50      	ldr	r3, [pc, #320]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	494d      	ldr	r1, [pc, #308]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d044      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b47      	ldr	r3, [pc, #284]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e07f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e46:	4b3f      	ldr	r3, [pc, #252]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e06f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e56:	4b3b      	ldr	r3, [pc, #236]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e067      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e66:	4b37      	ldr	r3, [pc, #220]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 0203 	bic.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4934      	ldr	r1, [pc, #208]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e78:	f7fd fdba 	bl	80029f0 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e80:	f7fd fdb6 	bl	80029f0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e04f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	4b2b      	ldr	r3, [pc, #172]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 020c 	and.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1eb      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d20c      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b22      	ldr	r3, [pc, #136]	@ (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b20      	ldr	r3, [pc, #128]	@ (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004edc:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4916      	ldr	r1, [pc, #88]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efa:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	490e      	ldr	r1, [pc, #56]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f0e:	f000 f821 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	490a      	ldr	r1, [pc, #40]	@ (8004f48 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	4a09      	ldr	r2, [pc, #36]	@ (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fd fd1a 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023c00 	.word	0x40023c00
 8004f44:	40023800 	.word	0x40023800
 8004f48:	08007fcc 	.word	0x08007fcc
 8004f4c:	20000010 	.word	0x20000010
 8004f50:	20000014 	.word	0x20000014

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f58:	b094      	sub	sp, #80	@ 0x50
 8004f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6c:	4b79      	ldr	r3, [pc, #484]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x40>
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	f200 80e1 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x34>
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f86:	e0db      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f88:	4b73      	ldr	r3, [pc, #460]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f8c:	e0db      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8e:	4b73      	ldr	r3, [pc, #460]	@ (800515c <HAL_RCC_GetSysClockFreq+0x208>)
 8004f90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f92:	e0d8      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f94:	4b6f      	ldr	r3, [pc, #444]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d063      	beq.n	8005072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004faa:	4b6a      	ldr	r3, [pc, #424]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	099b      	lsrs	r3, r3, #6
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	f04f 0000 	mov.w	r0, #0
 8004fce:	f04f 0100 	mov.w	r1, #0
 8004fd2:	0159      	lsls	r1, r3, #5
 8004fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fd8:	0150      	lsls	r0, r2, #5
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4621      	mov	r1, r4
 8004fe0:	1a51      	subs	r1, r2, r1
 8004fe2:	6139      	str	r1, [r7, #16]
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	018b      	lsls	r3, r1, #6
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005002:	4651      	mov	r1, sl
 8005004:	018a      	lsls	r2, r1, #6
 8005006:	4651      	mov	r1, sl
 8005008:	ebb2 0801 	subs.w	r8, r2, r1
 800500c:	4659      	mov	r1, fp
 800500e:	eb63 0901 	sbc.w	r9, r3, r1
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800501e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005026:	4690      	mov	r8, r2
 8005028:	4699      	mov	r9, r3
 800502a:	4623      	mov	r3, r4
 800502c:	eb18 0303 	adds.w	r3, r8, r3
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	462b      	mov	r3, r5
 8005034:	eb49 0303 	adc.w	r3, r9, r3
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005046:	4629      	mov	r1, r5
 8005048:	024b      	lsls	r3, r1, #9
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005050:	4621      	mov	r1, r4
 8005052:	024a      	lsls	r2, r1, #9
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505a:	2200      	movs	r2, #0
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800505e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005064:	f7fb f914 	bl	8000290 <__aeabi_uldivmod>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4613      	mov	r3, r2
 800506e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005070:	e058      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005072:	4b38      	ldr	r3, [pc, #224]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	2200      	movs	r2, #0
 800507a:	4618      	mov	r0, r3
 800507c:	4611      	mov	r1, r2
 800507e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	2300      	movs	r3, #0
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
 8005088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	f04f 0000 	mov.w	r0, #0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	0159      	lsls	r1, r3, #5
 800509a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800509e:	0150      	lsls	r0, r2, #5
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4641      	mov	r1, r8
 80050a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050c4:	ebb2 040a 	subs.w	r4, r2, sl
 80050c8:	eb63 050b 	sbc.w	r5, r3, fp
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	00eb      	lsls	r3, r5, #3
 80050d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050da:	00e2      	lsls	r2, r4, #3
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	18e3      	adds	r3, r4, r3
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	464b      	mov	r3, r9
 80050e8:	eb45 0303 	adc.w	r3, r5, r3
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fa:	4629      	mov	r1, r5
 80050fc:	028b      	lsls	r3, r1, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005104:	4621      	mov	r1, r4
 8005106:	028a      	lsls	r2, r1, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800510e:	2200      	movs	r2, #0
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	61fa      	str	r2, [r7, #28]
 8005114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005118:	f7fb f8ba 	bl	8000290 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005124:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x200>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x204>)
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005148:	4618      	mov	r0, r3
 800514a:	3750      	adds	r7, #80	@ 0x50
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	007a1200 	.word	0x007a1200

08005160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	@ (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000010 	.word	0x20000010

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	@ (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	08007fdc 	.word	0x08007fdc

080051a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d075      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051d4:	4b91      	ldr	r3, [pc, #580]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fd fc09 	bl	80029f0 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051e2:	f7fd fc05 	bl	80029f0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e189      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	019a      	lsls	r2, r3, #6
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	071b      	lsls	r3, r3, #28
 8005218:	4981      	ldr	r1, [pc, #516]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01f      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800522c:	4b7c      	ldr	r3, [pc, #496]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005232:	0f1b      	lsrs	r3, r3, #28
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	019a      	lsls	r2, r3, #6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	431a      	orrs	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	071b      	lsls	r3, r3, #28
 800524c:	4974      	ldr	r1, [pc, #464]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005254:	4b72      	ldr	r3, [pc, #456]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525a:	f023 021f 	bic.w	r2, r3, #31
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	3b01      	subs	r3, #1
 8005264:	496e      	ldr	r1, [pc, #440]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	019a      	lsls	r2, r3, #6
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	061b      	lsls	r3, r3, #24
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	071b      	lsls	r3, r3, #28
 800528c:	4964      	ldr	r1, [pc, #400]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005294:	4b61      	ldr	r3, [pc, #388]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800529a:	f7fd fba9 	bl	80029f0 <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052a0:	e008      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052a2:	f7fd fba5 	bl	80029f0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e129      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d079      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052d8:	4b52      	ldr	r3, [pc, #328]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052de:	f7fd fb87 	bl	80029f0 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052e6:	f7fd fb83 	bl	80029f0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e107      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052f8:	4b49      	ldr	r3, [pc, #292]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005304:	d0ef      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d020      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005312:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005318:	0f1b      	lsrs	r3, r3, #28
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	019a      	lsls	r2, r3, #6
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	431a      	orrs	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	071b      	lsls	r3, r3, #28
 8005332:	493b      	ldr	r1, [pc, #236]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800533a:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005340:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	3b01      	subs	r3, #1
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	4934      	ldr	r1, [pc, #208]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01e      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005360:	4b2f      	ldr	r3, [pc, #188]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005366:	0e1b      	lsrs	r3, r3, #24
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	019a      	lsls	r2, r3, #6
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	071b      	lsls	r3, r3, #28
 8005380:	4927      	ldr	r1, [pc, #156]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005388:	4b25      	ldr	r3, [pc, #148]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800538e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	4922      	ldr	r1, [pc, #136]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800539e:	4b21      	ldr	r3, [pc, #132]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053a4:	f7fd fb24 	bl	80029f0 <HAL_GetTick>
 80053a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053ac:	f7fd fb20 	bl	80029f0 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0a4      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053be:	4b18      	ldr	r3, [pc, #96]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ca:	d1ef      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 808b 	beq.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b10      	ldr	r3, [pc, #64]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005400:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005402:	f7fd faf5 	bl	80029f0 <HAL_GetTick>
 8005406:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005408:	e010      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540a:	f7fd faf1 	bl	80029f0 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d909      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e075      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800541c:	42470068 	.word	0x42470068
 8005420:	40023800 	.word	0x40023800
 8005424:	42470070 	.word	0x42470070
 8005428:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800542c:	4b38      	ldr	r3, [pc, #224]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0e8      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005438:	4b36      	ldr	r3, [pc, #216]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005440:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d02f      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	d028      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005456:	4b2f      	ldr	r3, [pc, #188]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005460:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005466:	4b2c      	ldr	r3, [pc, #176]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800546c:	4a29      	ldr	r2, [pc, #164]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005472:	4b28      	ldr	r3, [pc, #160]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b01      	cmp	r3, #1
 800547c:	d114      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800547e:	f7fd fab7 	bl	80029f0 <HAL_GetTick>
 8005482:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005484:	e00a      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7fd fab3 	bl	80029f0 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e035      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549c:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ee      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b4:	d10d      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80054b6:	4b17      	ldr	r3, [pc, #92]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ca:	4912      	ldr	r1, [pc, #72]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	608b      	str	r3, [r1, #8]
 80054d0:	e005      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80054d2:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054dc:	6093      	str	r3, [r2, #8]
 80054de:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ea:	490a      	ldr	r1, [pc, #40]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005502:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005504:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40007000 	.word	0x40007000
 8005514:	40023800 	.word	0x40023800
 8005518:	42470e40 	.word	0x42470e40
 800551c:	424711e0 	.word	0x424711e0

08005520 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e01c      	b.n	800556c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	795b      	ldrb	r3, [r3, #5]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc fd4e 	bl	8001fe4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0204 	orr.w	r2, r2, #4
 800555c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	791b      	ldrb	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_RNG_GenerateRandomNumber+0x1a>
 800558a:	2302      	movs	r3, #2
 800558c:	e044      	b.n	8005618 <HAL_RNG_GenerateRandomNumber+0xa4>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	795b      	ldrb	r3, [r3, #5]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d133      	bne.n	8005606 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055a4:	f7fd fa24 	bl	80029f0 <HAL_GetTick>
 80055a8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80055aa:	e018      	b.n	80055de <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80055ac:	f7fd fa20 	bl	80029f0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d911      	bls.n	80055de <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d00a      	beq.n	80055de <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e01c      	b.n	8005618 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d1df      	bne.n	80055ac <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	715a      	strb	r2, [r3, #5]
 8005604:	e004      	b.n	8005610 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	711a      	strb	r2, [r3, #4]

  return status;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	330c      	adds	r3, #12
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ffa0 	bl	8005574 <HAL_RNG_GenerateRandomNumber>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	e000      	b.n	8005642 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005640:	2300      	movs	r3, #0
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e07b      	b.n	8005754 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800566c:	d009      	beq.n	8005682 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	61da      	str	r2, [r3, #28]
 8005674:	e005      	b.n	8005682 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fc fcc3 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	ea42 0103 	orr.w	r1, r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	f003 0104 	and.w	r1, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	f003 0210 	and.w	r2, r3, #16
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e01a      	b.n	80057a4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005784:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc fc96 	bl	80020b8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fd f918 	bl	80029f0 <HAL_GetTick>
 80057c0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d001      	beq.n	80057d6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	e12a      	b.n	8005a2c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_Transmit+0x36>
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e122      	b.n	8005a2c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_SPI_Transmit+0x48>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e11b      	b.n	8005a2c <HAL_SPI_Transmit+0x280>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2203      	movs	r2, #3
 8005800:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	88fa      	ldrh	r2, [r7, #6]
 800581a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005842:	d10f      	bne.n	8005864 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586e:	2b40      	cmp	r3, #64	@ 0x40
 8005870:	d007      	beq.n	8005882 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800588a:	d152      	bne.n	8005932 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_Transmit+0xee>
 8005894:	8b7b      	ldrh	r3, [r7, #26]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d145      	bne.n	8005926 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	881a      	ldrh	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	1c9a      	adds	r2, r3, #2
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058be:	e032      	b.n	8005926 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d112      	bne.n	80058f4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058f2:	e018      	b.n	8005926 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f4:	f7fd f87c 	bl	80029f0 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d803      	bhi.n	800590c <HAL_SPI_Transmit+0x160>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Transmit+0x166>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e082      	b.n	8005a2c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1c7      	bne.n	80058c0 <HAL_SPI_Transmit+0x114>
 8005930:	e053      	b.n	80059da <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_SPI_Transmit+0x194>
 800593a:	8b7b      	ldrh	r3, [r7, #26]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d147      	bne.n	80059d0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005966:	e033      	b.n	80059d0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b02      	cmp	r3, #2
 8005974:	d113      	bne.n	800599e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800599c:	e018      	b.n	80059d0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599e:	f7fd f827 	bl	80029f0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_Transmit+0x20a>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Transmit+0x210>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e02d      	b.n	8005a2c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1c6      	bne.n	8005968 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f8be 	bl	8005b60 <SPI_EndRxTxTransaction>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a42:	b2db      	uxtb	r3, r3
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a60:	f7fc ffc6 	bl	80029f0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a70:	f7fc ffbe 	bl	80029f0 <HAL_GetTick>
 8005a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	015b      	lsls	r3, r3, #5
 8005a7c:	0d1b      	lsrs	r3, r3, #20
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a86:	e054      	b.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d050      	beq.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a90:	f7fc ffae 	bl	80029f0 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d902      	bls.n	8005aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d13d      	bne.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005abe:	d111      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ac8:	d004      	beq.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad2:	d107      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aec:	d10f      	bne.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e017      	b.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d19b      	bne.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000010 	.word	0x20000010

08005b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2201      	movs	r2, #1
 8005b74:	2102      	movs	r1, #2
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff ff6a 	bl	8005a50 <SPI_WaitFlagStateUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e032      	b.n	8005bf8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b92:	4b1b      	ldr	r3, [pc, #108]	@ (8005c00 <SPI_EndRxTxTransaction+0xa0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1b      	ldr	r2, [pc, #108]	@ (8005c04 <SPI_EndRxTxTransaction+0xa4>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	0d5b      	lsrs	r3, r3, #21
 8005b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb0:	d112      	bne.n	8005bd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	@ 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ff47 	bl	8005a50 <SPI_WaitFlagStateUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d016      	beq.n	8005bf6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e00f      	b.n	8005bf8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bee:	2b80      	cmp	r3, #128	@ 0x80
 8005bf0:	d0f2      	beq.n	8005bd8 <SPI_EndRxTxTransaction+0x78>
 8005bf2:	e000      	b.n	8005bf6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005bf4:	bf00      	nop
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000010 	.word	0x20000010
 8005c04:	165e9f81 	.word	0x165e9f81

08005c08 <findslot>:
 8005c08:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <findslot+0x2c>)
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	b118      	cbz	r0, 8005c1a <findslot+0x12>
 8005c12:	6a03      	ldr	r3, [r0, #32]
 8005c14:	b90b      	cbnz	r3, 8005c1a <findslot+0x12>
 8005c16:	f000 f9c3 	bl	8005fa0 <__sinit>
 8005c1a:	2c13      	cmp	r4, #19
 8005c1c:	d807      	bhi.n	8005c2e <findslot+0x26>
 8005c1e:	4806      	ldr	r0, [pc, #24]	@ (8005c38 <findslot+0x30>)
 8005c20:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005c24:	3201      	adds	r2, #1
 8005c26:	d002      	beq.n	8005c2e <findslot+0x26>
 8005c28:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005c2c:	bd10      	pop	{r4, pc}
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e7fc      	b.n	8005c2c <findslot+0x24>
 8005c32:	bf00      	nop
 8005c34:	20000028 	.word	0x20000028
 8005c38:	20025a54 	.word	0x20025a54

08005c3c <error>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	4604      	mov	r4, r0
 8005c40:	f000 fb7a 	bl	8006338 <__errno>
 8005c44:	2613      	movs	r6, #19
 8005c46:	4605      	mov	r5, r0
 8005c48:	2700      	movs	r7, #0
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	beab      	bkpt	0x00ab
 8005c50:	4606      	mov	r6, r0
 8005c52:	602e      	str	r6, [r5, #0]
 8005c54:	4620      	mov	r0, r4
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c58 <checkerror>:
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d101      	bne.n	8005c60 <checkerror+0x8>
 8005c5c:	f7ff bfee 	b.w	8005c3c <error>
 8005c60:	4770      	bx	lr

08005c62 <_swiread>:
 8005c62:	b530      	push	{r4, r5, lr}
 8005c64:	b085      	sub	sp, #20
 8005c66:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005c6a:	9203      	str	r2, [sp, #12]
 8005c6c:	2406      	movs	r4, #6
 8005c6e:	ad01      	add	r5, sp, #4
 8005c70:	4620      	mov	r0, r4
 8005c72:	4629      	mov	r1, r5
 8005c74:	beab      	bkpt	0x00ab
 8005c76:	4604      	mov	r4, r0
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f7ff ffed 	bl	8005c58 <checkerror>
 8005c7e:	b005      	add	sp, #20
 8005c80:	bd30      	pop	{r4, r5, pc}

08005c82 <_read>:
 8005c82:	b570      	push	{r4, r5, r6, lr}
 8005c84:	460e      	mov	r6, r1
 8005c86:	4614      	mov	r4, r2
 8005c88:	f7ff ffbe 	bl	8005c08 <findslot>
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	b930      	cbnz	r0, 8005c9e <_read+0x1c>
 8005c90:	f000 fb52 	bl	8006338 <__errno>
 8005c94:	2309      	movs	r3, #9
 8005c96:	6003      	str	r3, [r0, #0]
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	f7ff ffdd 	bl	8005c62 <_swiread>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d0f5      	beq.n	8005c98 <_read+0x16>
 8005cac:	686b      	ldr	r3, [r5, #4]
 8005cae:	1a20      	subs	r0, r4, r0
 8005cb0:	4403      	add	r3, r0
 8005cb2:	606b      	str	r3, [r5, #4]
 8005cb4:	e7f2      	b.n	8005c9c <_read+0x1a>

08005cb6 <_swilseek>:
 8005cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb8:	460c      	mov	r4, r1
 8005cba:	4616      	mov	r6, r2
 8005cbc:	f7ff ffa4 	bl	8005c08 <findslot>
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	b940      	cbnz	r0, 8005cd6 <_swilseek+0x20>
 8005cc4:	f000 fb38 	bl	8006338 <__errno>
 8005cc8:	2309      	movs	r3, #9
 8005cca:	6003      	str	r3, [r0, #0]
 8005ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	b003      	add	sp, #12
 8005cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd6:	2e02      	cmp	r6, #2
 8005cd8:	d903      	bls.n	8005ce2 <_swilseek+0x2c>
 8005cda:	f000 fb2d 	bl	8006338 <__errno>
 8005cde:	2316      	movs	r3, #22
 8005ce0:	e7f3      	b.n	8005cca <_swilseek+0x14>
 8005ce2:	2e01      	cmp	r6, #1
 8005ce4:	d112      	bne.n	8005d0c <_swilseek+0x56>
 8005ce6:	6843      	ldr	r3, [r0, #4]
 8005ce8:	18e4      	adds	r4, r4, r3
 8005cea:	d4f6      	bmi.n	8005cda <_swilseek+0x24>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	260a      	movs	r6, #10
 8005cf0:	e9cd 3400 	strd	r3, r4, [sp]
 8005cf4:	466f      	mov	r7, sp
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	beab      	bkpt	0x00ab
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff ffaa 	bl	8005c58 <checkerror>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	dbe1      	blt.n	8005ccc <_swilseek+0x16>
 8005d08:	606c      	str	r4, [r5, #4]
 8005d0a:	e7e1      	b.n	8005cd0 <_swilseek+0x1a>
 8005d0c:	2e02      	cmp	r6, #2
 8005d0e:	6803      	ldr	r3, [r0, #0]
 8005d10:	d1ec      	bne.n	8005cec <_swilseek+0x36>
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	260c      	movs	r6, #12
 8005d16:	466f      	mov	r7, sp
 8005d18:	4630      	mov	r0, r6
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	beab      	bkpt	0x00ab
 8005d1e:	4606      	mov	r6, r0
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff ff99 	bl	8005c58 <checkerror>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	d0d0      	beq.n	8005ccc <_swilseek+0x16>
 8005d2a:	4404      	add	r4, r0
 8005d2c:	e7de      	b.n	8005cec <_swilseek+0x36>

08005d2e <_lseek>:
 8005d2e:	f7ff bfc2 	b.w	8005cb6 <_swilseek>

08005d32 <_swiwrite>:
 8005d32:	b530      	push	{r4, r5, lr}
 8005d34:	b085      	sub	sp, #20
 8005d36:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005d3a:	9203      	str	r2, [sp, #12]
 8005d3c:	2405      	movs	r4, #5
 8005d3e:	ad01      	add	r5, sp, #4
 8005d40:	4620      	mov	r0, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	beab      	bkpt	0x00ab
 8005d46:	4604      	mov	r4, r0
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f7ff ff85 	bl	8005c58 <checkerror>
 8005d4e:	b005      	add	sp, #20
 8005d50:	bd30      	pop	{r4, r5, pc}

08005d52 <_write>:
 8005d52:	b570      	push	{r4, r5, r6, lr}
 8005d54:	460e      	mov	r6, r1
 8005d56:	4615      	mov	r5, r2
 8005d58:	f7ff ff56 	bl	8005c08 <findslot>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	b930      	cbnz	r0, 8005d6e <_write+0x1c>
 8005d60:	f000 faea 	bl	8006338 <__errno>
 8005d64:	2309      	movs	r3, #9
 8005d66:	6003      	str	r3, [r0, #0]
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	6800      	ldr	r0, [r0, #0]
 8005d70:	462a      	mov	r2, r5
 8005d72:	4631      	mov	r1, r6
 8005d74:	f7ff ffdd 	bl	8005d32 <_swiwrite>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	dbf5      	blt.n	8005d68 <_write+0x16>
 8005d7c:	6862      	ldr	r2, [r4, #4]
 8005d7e:	1ae8      	subs	r0, r5, r3
 8005d80:	4402      	add	r2, r0
 8005d82:	42ab      	cmp	r3, r5
 8005d84:	6062      	str	r2, [r4, #4]
 8005d86:	d1f1      	bne.n	8005d6c <_write+0x1a>
 8005d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7ff bf55 	b.w	8005c3c <error>

08005d92 <_swiclose>:
 8005d92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d94:	2402      	movs	r4, #2
 8005d96:	9001      	str	r0, [sp, #4]
 8005d98:	ad01      	add	r5, sp, #4
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	beab      	bkpt	0x00ab
 8005da0:	4604      	mov	r4, r0
 8005da2:	4620      	mov	r0, r4
 8005da4:	f7ff ff58 	bl	8005c58 <checkerror>
 8005da8:	b003      	add	sp, #12
 8005daa:	bd30      	pop	{r4, r5, pc}

08005dac <_close>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4605      	mov	r5, r0
 8005db0:	f7ff ff2a 	bl	8005c08 <findslot>
 8005db4:	4604      	mov	r4, r0
 8005db6:	b930      	cbnz	r0, 8005dc6 <_close+0x1a>
 8005db8:	f000 fabe 	bl	8006338 <__errno>
 8005dbc:	2309      	movs	r3, #9
 8005dbe:	6003      	str	r3, [r0, #0]
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	3d01      	subs	r5, #1
 8005dc8:	2d01      	cmp	r5, #1
 8005dca:	d809      	bhi.n	8005de0 <_close+0x34>
 8005dcc:	4b07      	ldr	r3, [pc, #28]	@ (8005dec <_close+0x40>)
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d104      	bne.n	8005de0 <_close+0x34>
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e7f1      	b.n	8005dc4 <_close+0x18>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	f7ff ffd6 	bl	8005d92 <_swiclose>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f5      	beq.n	8005dd6 <_close+0x2a>
 8005dea:	e7eb      	b.n	8005dc4 <_close+0x18>
 8005dec:	20025a54 	.word	0x20025a54

08005df0 <_swistat>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	460c      	mov	r4, r1
 8005df4:	f7ff ff08 	bl	8005c08 <findslot>
 8005df8:	4605      	mov	r5, r0
 8005dfa:	b930      	cbnz	r0, 8005e0a <_swistat+0x1a>
 8005dfc:	f000 fa9c 	bl	8006338 <__errno>
 8005e00:	2309      	movs	r3, #9
 8005e02:	6003      	str	r3, [r0, #0]
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005e10:	6063      	str	r3, [r4, #4]
 8005e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e16:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005e18:	260c      	movs	r6, #12
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	beab      	bkpt	0x00ab
 8005e20:	4605      	mov	r5, r0
 8005e22:	4628      	mov	r0, r5
 8005e24:	f7ff ff18 	bl	8005c58 <checkerror>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d0eb      	beq.n	8005e04 <_swistat+0x14>
 8005e2c:	6120      	str	r0, [r4, #16]
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e7ea      	b.n	8005e08 <_swistat+0x18>

08005e32 <_fstat>:
 8005e32:	460b      	mov	r3, r1
 8005e34:	b510      	push	{r4, lr}
 8005e36:	2100      	movs	r1, #0
 8005e38:	4604      	mov	r4, r0
 8005e3a:	2258      	movs	r2, #88	@ 0x58
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fa2d 	bl	800629c <memset>
 8005e42:	4601      	mov	r1, r0
 8005e44:	4620      	mov	r0, r4
 8005e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4a:	f7ff bfd1 	b.w	8005df0 <_swistat>

08005e4e <_isatty>:
 8005e4e:	b570      	push	{r4, r5, r6, lr}
 8005e50:	f7ff feda 	bl	8005c08 <findslot>
 8005e54:	2409      	movs	r4, #9
 8005e56:	4605      	mov	r5, r0
 8005e58:	b920      	cbnz	r0, 8005e64 <_isatty+0x16>
 8005e5a:	f000 fa6d 	bl	8006338 <__errno>
 8005e5e:	6004      	str	r4, [r0, #0]
 8005e60:	2000      	movs	r0, #0
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	4620      	mov	r0, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	beab      	bkpt	0x00ab
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	2c01      	cmp	r4, #1
 8005e6e:	4620      	mov	r0, r4
 8005e70:	d0f7      	beq.n	8005e62 <_isatty+0x14>
 8005e72:	f000 fa61 	bl	8006338 <__errno>
 8005e76:	2513      	movs	r5, #19
 8005e78:	4604      	mov	r4, r0
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	4631      	mov	r1, r6
 8005e80:	beab      	bkpt	0x00ab
 8005e82:	4605      	mov	r5, r0
 8005e84:	6025      	str	r5, [r4, #0]
 8005e86:	e7eb      	b.n	8005e60 <_isatty+0x12>

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	8181      	strh	r1, [r0, #12]
 8005e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e9c:	81c2      	strh	r2, [r0, #14]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	@ 0x5c
 8005ea6:	f000 f9f9 	bl	800629c <memset>
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <std+0x58>)
 8005eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <std+0x5c>)
 8005eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <std+0x60>)
 8005eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <std+0x64>)
 8005eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x68>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d006      	beq.n	8005ed0 <std+0x48>
 8005ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ec6:	4294      	cmp	r4, r2
 8005ec8:	d002      	beq.n	8005ed0 <std+0x48>
 8005eca:	33d0      	adds	r3, #208	@ 0xd0
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d105      	bne.n	8005edc <std+0x54>
 8005ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 ba58 	b.w	800638c <__retarget_lock_init_recursive>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	080060ed 	.word	0x080060ed
 8005ee4:	0800610f 	.word	0x0800610f
 8005ee8:	08006147 	.word	0x08006147
 8005eec:	0800616b 	.word	0x0800616b
 8005ef0:	20025af4 	.word	0x20025af4

08005ef4 <stdio_exit_handler>:
 8005ef4:	4a02      	ldr	r2, [pc, #8]	@ (8005f00 <stdio_exit_handler+0xc>)
 8005ef6:	4903      	ldr	r1, [pc, #12]	@ (8005f04 <stdio_exit_handler+0x10>)
 8005ef8:	4803      	ldr	r0, [pc, #12]	@ (8005f08 <stdio_exit_handler+0x14>)
 8005efa:	f000 b869 	b.w	8005fd0 <_fwalk_sglue>
 8005efe:	bf00      	nop
 8005f00:	2000001c 	.word	0x2000001c
 8005f04:	08006c2d 	.word	0x08006c2d
 8005f08:	2000002c 	.word	0x2000002c

08005f0c <cleanup_stdio>:
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <cleanup_stdio+0x34>)
 8005f10:	4299      	cmp	r1, r3
 8005f12:	b510      	push	{r4, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	d001      	beq.n	8005f1c <cleanup_stdio+0x10>
 8005f18:	f000 fe88 	bl	8006c2c <_fflush_r>
 8005f1c:	68a1      	ldr	r1, [r4, #8]
 8005f1e:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <cleanup_stdio+0x38>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <cleanup_stdio+0x1e>
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fe81 	bl	8006c2c <_fflush_r>
 8005f2a:	68e1      	ldr	r1, [r4, #12]
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <cleanup_stdio+0x3c>)
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	d004      	beq.n	8005f3c <cleanup_stdio+0x30>
 8005f32:	4620      	mov	r0, r4
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f000 be78 	b.w	8006c2c <_fflush_r>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	bf00      	nop
 8005f40:	20025af4 	.word	0x20025af4
 8005f44:	20025b5c 	.word	0x20025b5c
 8005f48:	20025bc4 	.word	0x20025bc4

08005f4c <global_stdio_init.part.0>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <global_stdio_init.part.0+0x30>)
 8005f50:	4c0b      	ldr	r4, [pc, #44]	@ (8005f80 <global_stdio_init.part.0+0x34>)
 8005f52:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <global_stdio_init.part.0+0x38>)
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	4620      	mov	r0, r4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	f7ff ff94 	bl	8005e88 <std>
 8005f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f64:	2201      	movs	r2, #1
 8005f66:	2109      	movs	r1, #9
 8005f68:	f7ff ff8e 	bl	8005e88 <std>
 8005f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f70:	2202      	movs	r2, #2
 8005f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff bf86 	b.w	8005e88 <std>
 8005f7c:	20025c2c 	.word	0x20025c2c
 8005f80:	20025af4 	.word	0x20025af4
 8005f84:	08005ef5 	.word	0x08005ef5

08005f88 <__sfp_lock_acquire>:
 8005f88:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <__sfp_lock_acquire+0x8>)
 8005f8a:	f000 ba00 	b.w	800638e <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20025c35 	.word	0x20025c35

08005f94 <__sfp_lock_release>:
 8005f94:	4801      	ldr	r0, [pc, #4]	@ (8005f9c <__sfp_lock_release+0x8>)
 8005f96:	f000 b9fb 	b.w	8006390 <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20025c35 	.word	0x20025c35

08005fa0 <__sinit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f7ff fff0 	bl	8005f88 <__sfp_lock_acquire>
 8005fa8:	6a23      	ldr	r3, [r4, #32]
 8005faa:	b11b      	cbz	r3, 8005fb4 <__sinit+0x14>
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f7ff bff0 	b.w	8005f94 <__sfp_lock_release>
 8005fb4:	4b04      	ldr	r3, [pc, #16]	@ (8005fc8 <__sinit+0x28>)
 8005fb6:	6223      	str	r3, [r4, #32]
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <__sinit+0x2c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f5      	bne.n	8005fac <__sinit+0xc>
 8005fc0:	f7ff ffc4 	bl	8005f4c <global_stdio_init.part.0>
 8005fc4:	e7f2      	b.n	8005fac <__sinit+0xc>
 8005fc6:	bf00      	nop
 8005fc8:	08005f0d 	.word	0x08005f0d
 8005fcc:	20025c2c 	.word	0x20025c2c

08005fd0 <_fwalk_sglue>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe4:	d505      	bpl.n	8005ff2 <_fwalk_sglue+0x22>
 8005fe6:	6824      	ldr	r4, [r4, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d1f7      	bne.n	8005fdc <_fwalk_sglue+0xc>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d907      	bls.n	8006008 <_fwalk_sglue+0x38>
 8005ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d003      	beq.n	8006008 <_fwalk_sglue+0x38>
 8006000:	4629      	mov	r1, r5
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	4306      	orrs	r6, r0
 8006008:	3568      	adds	r5, #104	@ 0x68
 800600a:	e7e9      	b.n	8005fe0 <_fwalk_sglue+0x10>

0800600c <iprintf>:
 800600c:	b40f      	push	{r0, r1, r2, r3}
 800600e:	b507      	push	{r0, r1, r2, lr}
 8006010:	4906      	ldr	r1, [pc, #24]	@ (800602c <iprintf+0x20>)
 8006012:	ab04      	add	r3, sp, #16
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	f853 2b04 	ldr.w	r2, [r3], #4
 800601a:	6881      	ldr	r1, [r0, #8]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	f000 fadb 	bl	80065d8 <_vfiprintf_r>
 8006022:	b003      	add	sp, #12
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b004      	add	sp, #16
 800602a:	4770      	bx	lr
 800602c:	20000028 	.word	0x20000028

08006030 <_puts_r>:
 8006030:	6a03      	ldr	r3, [r0, #32]
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	6884      	ldr	r4, [r0, #8]
 8006036:	4605      	mov	r5, r0
 8006038:	460e      	mov	r6, r1
 800603a:	b90b      	cbnz	r3, 8006040 <_puts_r+0x10>
 800603c:	f7ff ffb0 	bl	8005fa0 <__sinit>
 8006040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d405      	bmi.n	8006052 <_puts_r+0x22>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	0598      	lsls	r0, r3, #22
 800604a:	d402      	bmi.n	8006052 <_puts_r+0x22>
 800604c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800604e:	f000 f99e 	bl	800638e <__retarget_lock_acquire_recursive>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0719      	lsls	r1, r3, #28
 8006056:	d502      	bpl.n	800605e <_puts_r+0x2e>
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d135      	bne.n	80060ca <_puts_r+0x9a>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f8c5 	bl	80061f0 <__swsetup_r>
 8006066:	b380      	cbz	r0, 80060ca <_puts_r+0x9a>
 8006068:	f04f 35ff 	mov.w	r5, #4294967295
 800606c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d405      	bmi.n	800607e <_puts_r+0x4e>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	059b      	lsls	r3, r3, #22
 8006076:	d402      	bmi.n	800607e <_puts_r+0x4e>
 8006078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800607a:	f000 f989 	bl	8006390 <__retarget_lock_release_recursive>
 800607e:	4628      	mov	r0, r5
 8006080:	bd70      	pop	{r4, r5, r6, pc}
 8006082:	2b00      	cmp	r3, #0
 8006084:	da04      	bge.n	8006090 <_puts_r+0x60>
 8006086:	69a2      	ldr	r2, [r4, #24]
 8006088:	429a      	cmp	r2, r3
 800608a:	dc17      	bgt.n	80060bc <_puts_r+0x8c>
 800608c:	290a      	cmp	r1, #10
 800608e:	d015      	beq.n	80060bc <_puts_r+0x8c>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	7019      	strb	r1, [r3, #0]
 8006098:	68a3      	ldr	r3, [r4, #8]
 800609a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800609e:	3b01      	subs	r3, #1
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	2900      	cmp	r1, #0
 80060a4:	d1ed      	bne.n	8006082 <_puts_r+0x52>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da11      	bge.n	80060ce <_puts_r+0x9e>
 80060aa:	4622      	mov	r2, r4
 80060ac:	210a      	movs	r1, #10
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f85f 	bl	8006172 <__swbuf_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0d7      	beq.n	8006068 <_puts_r+0x38>
 80060b8:	250a      	movs	r5, #10
 80060ba:	e7d7      	b.n	800606c <_puts_r+0x3c>
 80060bc:	4622      	mov	r2, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 f857 	bl	8006172 <__swbuf_r>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d1e7      	bne.n	8006098 <_puts_r+0x68>
 80060c8:	e7ce      	b.n	8006068 <_puts_r+0x38>
 80060ca:	3e01      	subs	r6, #1
 80060cc:	e7e4      	b.n	8006098 <_puts_r+0x68>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	220a      	movs	r2, #10
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e7ee      	b.n	80060b8 <_puts_r+0x88>
	...

080060dc <puts>:
 80060dc:	4b02      	ldr	r3, [pc, #8]	@ (80060e8 <puts+0xc>)
 80060de:	4601      	mov	r1, r0
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f7ff bfa5 	b.w	8006030 <_puts_r>
 80060e6:	bf00      	nop
 80060e8:	20000028 	.word	0x20000028

080060ec <__sread>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f000 f8fc 	bl	80062f0 <_read_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	bfab      	itete	ge
 80060fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006100:	181b      	addge	r3, r3, r0
 8006102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006106:	bfac      	ite	ge
 8006108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800610a:	81a3      	strhlt	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__swrite>:
 800610e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006112:	461f      	mov	r7, r3
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	05db      	lsls	r3, r3, #23
 8006118:	4605      	mov	r5, r0
 800611a:	460c      	mov	r4, r1
 800611c:	4616      	mov	r6, r2
 800611e:	d505      	bpl.n	800612c <__swrite+0x1e>
 8006120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006124:	2302      	movs	r3, #2
 8006126:	2200      	movs	r2, #0
 8006128:	f000 f8d0 	bl	80062cc <_lseek_r>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	4628      	mov	r0, r5
 800613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	f000 b8e7 	b.w	8006314 <_write_r>

08006146 <__sseek>:
 8006146:	b510      	push	{r4, lr}
 8006148:	460c      	mov	r4, r1
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 f8bd 	bl	80062cc <_lseek_r>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	bf15      	itete	ne
 8006158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800615a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800615e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006162:	81a3      	strheq	r3, [r4, #12]
 8006164:	bf18      	it	ne
 8006166:	81a3      	strhne	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__sclose>:
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 b89d 	b.w	80062ac <_close_r>

08006172 <__swbuf_r>:
 8006172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006174:	460e      	mov	r6, r1
 8006176:	4614      	mov	r4, r2
 8006178:	4605      	mov	r5, r0
 800617a:	b118      	cbz	r0, 8006184 <__swbuf_r+0x12>
 800617c:	6a03      	ldr	r3, [r0, #32]
 800617e:	b90b      	cbnz	r3, 8006184 <__swbuf_r+0x12>
 8006180:	f7ff ff0e 	bl	8005fa0 <__sinit>
 8006184:	69a3      	ldr	r3, [r4, #24]
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	071a      	lsls	r2, r3, #28
 800618c:	d501      	bpl.n	8006192 <__swbuf_r+0x20>
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	b943      	cbnz	r3, 80061a4 <__swbuf_r+0x32>
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f82b 	bl	80061f0 <__swsetup_r>
 800619a:	b118      	cbz	r0, 80061a4 <__swbuf_r+0x32>
 800619c:	f04f 37ff 	mov.w	r7, #4294967295
 80061a0:	4638      	mov	r0, r7
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	6922      	ldr	r2, [r4, #16]
 80061a8:	1a98      	subs	r0, r3, r2
 80061aa:	6963      	ldr	r3, [r4, #20]
 80061ac:	b2f6      	uxtb	r6, r6
 80061ae:	4283      	cmp	r3, r0
 80061b0:	4637      	mov	r7, r6
 80061b2:	dc05      	bgt.n	80061c0 <__swbuf_r+0x4e>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fd38 	bl	8006c2c <_fflush_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d1ed      	bne.n	800619c <__swbuf_r+0x2a>
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	60a3      	str	r3, [r4, #8]
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	701e      	strb	r6, [r3, #0]
 80061ce:	6962      	ldr	r2, [r4, #20]
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d004      	beq.n	80061e0 <__swbuf_r+0x6e>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	07db      	lsls	r3, r3, #31
 80061da:	d5e1      	bpl.n	80061a0 <__swbuf_r+0x2e>
 80061dc:	2e0a      	cmp	r6, #10
 80061de:	d1df      	bne.n	80061a0 <__swbuf_r+0x2e>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 fd22 	bl	8006c2c <_fflush_r>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0d9      	beq.n	80061a0 <__swbuf_r+0x2e>
 80061ec:	e7d6      	b.n	800619c <__swbuf_r+0x2a>
	...

080061f0 <__swsetup_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <__swsetup_r+0xa8>)
 80061f4:	4605      	mov	r5, r0
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	460c      	mov	r4, r1
 80061fa:	b118      	cbz	r0, 8006204 <__swsetup_r+0x14>
 80061fc:	6a03      	ldr	r3, [r0, #32]
 80061fe:	b90b      	cbnz	r3, 8006204 <__swsetup_r+0x14>
 8006200:	f7ff fece 	bl	8005fa0 <__sinit>
 8006204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006208:	0719      	lsls	r1, r3, #28
 800620a:	d422      	bmi.n	8006252 <__swsetup_r+0x62>
 800620c:	06da      	lsls	r2, r3, #27
 800620e:	d407      	bmi.n	8006220 <__swsetup_r+0x30>
 8006210:	2209      	movs	r2, #9
 8006212:	602a      	str	r2, [r5, #0]
 8006214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	f04f 30ff 	mov.w	r0, #4294967295
 800621e:	e033      	b.n	8006288 <__swsetup_r+0x98>
 8006220:	0758      	lsls	r0, r3, #29
 8006222:	d512      	bpl.n	800624a <__swsetup_r+0x5a>
 8006224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006226:	b141      	cbz	r1, 800623a <__swsetup_r+0x4a>
 8006228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800622c:	4299      	cmp	r1, r3
 800622e:	d002      	beq.n	8006236 <__swsetup_r+0x46>
 8006230:	4628      	mov	r0, r5
 8006232:	f000 f8af 	bl	8006394 <_free_r>
 8006236:	2300      	movs	r3, #0
 8006238:	6363      	str	r3, [r4, #52]	@ 0x34
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	2300      	movs	r3, #0
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0308 	orr.w	r3, r3, #8
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	b94b      	cbnz	r3, 800626a <__swsetup_r+0x7a>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800625c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006260:	d003      	beq.n	800626a <__swsetup_r+0x7a>
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f000 fd2f 	bl	8006cc8 <__smakebuf_r>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	f013 0201 	ands.w	r2, r3, #1
 8006272:	d00a      	beq.n	800628a <__swsetup_r+0x9a>
 8006274:	2200      	movs	r2, #0
 8006276:	60a2      	str	r2, [r4, #8]
 8006278:	6962      	ldr	r2, [r4, #20]
 800627a:	4252      	negs	r2, r2
 800627c:	61a2      	str	r2, [r4, #24]
 800627e:	6922      	ldr	r2, [r4, #16]
 8006280:	b942      	cbnz	r2, 8006294 <__swsetup_r+0xa4>
 8006282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006286:	d1c5      	bne.n	8006214 <__swsetup_r+0x24>
 8006288:	bd38      	pop	{r3, r4, r5, pc}
 800628a:	0799      	lsls	r1, r3, #30
 800628c:	bf58      	it	pl
 800628e:	6962      	ldrpl	r2, [r4, #20]
 8006290:	60a2      	str	r2, [r4, #8]
 8006292:	e7f4      	b.n	800627e <__swsetup_r+0x8e>
 8006294:	2000      	movs	r0, #0
 8006296:	e7f7      	b.n	8006288 <__swsetup_r+0x98>
 8006298:	20000028 	.word	0x20000028

0800629c <memset>:
 800629c:	4402      	add	r2, r0
 800629e:	4603      	mov	r3, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <_close_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d06      	ldr	r5, [pc, #24]	@ (80062c8 <_close_r+0x1c>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7ff fd78 	bl	8005dac <_close>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_close_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_close_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20025c30 	.word	0x20025c30

080062cc <_lseek_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	@ (80062ec <_lseek_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7ff fd27 	bl	8005d2e <_lseek>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_lseek_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_lseek_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20025c30 	.word	0x20025c30

080062f0 <_read_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	@ (8006310 <_read_r+0x20>)
 80062f4:	4604      	mov	r4, r0
 80062f6:	4608      	mov	r0, r1
 80062f8:	4611      	mov	r1, r2
 80062fa:	2200      	movs	r2, #0
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	f7ff fcbf 	bl	8005c82 <_read>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_read_r+0x1e>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_read_r+0x1e>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	20025c30 	.word	0x20025c30

08006314 <_write_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4d07      	ldr	r5, [pc, #28]	@ (8006334 <_write_r+0x20>)
 8006318:	4604      	mov	r4, r0
 800631a:	4608      	mov	r0, r1
 800631c:	4611      	mov	r1, r2
 800631e:	2200      	movs	r2, #0
 8006320:	602a      	str	r2, [r5, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	f7ff fd15 	bl	8005d52 <_write>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_write_r+0x1e>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_write_r+0x1e>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	20025c30 	.word	0x20025c30

08006338 <__errno>:
 8006338:	4b01      	ldr	r3, [pc, #4]	@ (8006340 <__errno+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000028 	.word	0x20000028

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	@ (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	@ (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	@ (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	@ (8006388 <__libc_init_array+0x44>)
 8006358:	f000 fd24 	bl	8006da4 <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	08008020 	.word	0x08008020
 8006380:	08008020 	.word	0x08008020
 8006384:	08008020 	.word	0x08008020
 8006388:	08008024 	.word	0x08008024

0800638c <__retarget_lock_init_recursive>:
 800638c:	4770      	bx	lr

0800638e <__retarget_lock_acquire_recursive>:
 800638e:	4770      	bx	lr

08006390 <__retarget_lock_release_recursive>:
 8006390:	4770      	bx	lr
	...

08006394 <_free_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4605      	mov	r5, r0
 8006398:	2900      	cmp	r1, #0
 800639a:	d041      	beq.n	8006420 <_free_r+0x8c>
 800639c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a0:	1f0c      	subs	r4, r1, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bfb8      	it	lt
 80063a6:	18e4      	addlt	r4, r4, r3
 80063a8:	f000 f8e0 	bl	800656c <__malloc_lock>
 80063ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <_free_r+0x90>)
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	b933      	cbnz	r3, 80063c0 <_free_r+0x2c>
 80063b2:	6063      	str	r3, [r4, #4]
 80063b4:	6014      	str	r4, [r2, #0]
 80063b6:	4628      	mov	r0, r5
 80063b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063bc:	f000 b8dc 	b.w	8006578 <__malloc_unlock>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d908      	bls.n	80063d6 <_free_r+0x42>
 80063c4:	6820      	ldr	r0, [r4, #0]
 80063c6:	1821      	adds	r1, r4, r0
 80063c8:	428b      	cmp	r3, r1
 80063ca:	bf01      	itttt	eq
 80063cc:	6819      	ldreq	r1, [r3, #0]
 80063ce:	685b      	ldreq	r3, [r3, #4]
 80063d0:	1809      	addeq	r1, r1, r0
 80063d2:	6021      	streq	r1, [r4, #0]
 80063d4:	e7ed      	b.n	80063b2 <_free_r+0x1e>
 80063d6:	461a      	mov	r2, r3
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b10b      	cbz	r3, 80063e0 <_free_r+0x4c>
 80063dc:	42a3      	cmp	r3, r4
 80063de:	d9fa      	bls.n	80063d6 <_free_r+0x42>
 80063e0:	6811      	ldr	r1, [r2, #0]
 80063e2:	1850      	adds	r0, r2, r1
 80063e4:	42a0      	cmp	r0, r4
 80063e6:	d10b      	bne.n	8006400 <_free_r+0x6c>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	4401      	add	r1, r0
 80063ec:	1850      	adds	r0, r2, r1
 80063ee:	4283      	cmp	r3, r0
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	d1e0      	bne.n	80063b6 <_free_r+0x22>
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	6053      	str	r3, [r2, #4]
 80063fa:	4408      	add	r0, r1
 80063fc:	6010      	str	r0, [r2, #0]
 80063fe:	e7da      	b.n	80063b6 <_free_r+0x22>
 8006400:	d902      	bls.n	8006408 <_free_r+0x74>
 8006402:	230c      	movs	r3, #12
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	e7d6      	b.n	80063b6 <_free_r+0x22>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	1821      	adds	r1, r4, r0
 800640c:	428b      	cmp	r3, r1
 800640e:	bf04      	itt	eq
 8006410:	6819      	ldreq	r1, [r3, #0]
 8006412:	685b      	ldreq	r3, [r3, #4]
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	bf04      	itt	eq
 8006418:	1809      	addeq	r1, r1, r0
 800641a:	6021      	streq	r1, [r4, #0]
 800641c:	6054      	str	r4, [r2, #4]
 800641e:	e7ca      	b.n	80063b6 <_free_r+0x22>
 8006420:	bd38      	pop	{r3, r4, r5, pc}
 8006422:	bf00      	nop
 8006424:	20025c3c 	.word	0x20025c3c

08006428 <sbrk_aligned>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4e0f      	ldr	r6, [pc, #60]	@ (8006468 <sbrk_aligned+0x40>)
 800642c:	460c      	mov	r4, r1
 800642e:	6831      	ldr	r1, [r6, #0]
 8006430:	4605      	mov	r5, r0
 8006432:	b911      	cbnz	r1, 800643a <sbrk_aligned+0x12>
 8006434:	f000 fca6 	bl	8006d84 <_sbrk_r>
 8006438:	6030      	str	r0, [r6, #0]
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f000 fca1 	bl	8006d84 <_sbrk_r>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d103      	bne.n	800644e <sbrk_aligned+0x26>
 8006446:	f04f 34ff 	mov.w	r4, #4294967295
 800644a:	4620      	mov	r0, r4
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	1cc4      	adds	r4, r0, #3
 8006450:	f024 0403 	bic.w	r4, r4, #3
 8006454:	42a0      	cmp	r0, r4
 8006456:	d0f8      	beq.n	800644a <sbrk_aligned+0x22>
 8006458:	1a21      	subs	r1, r4, r0
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fc92 	bl	8006d84 <_sbrk_r>
 8006460:	3001      	adds	r0, #1
 8006462:	d1f2      	bne.n	800644a <sbrk_aligned+0x22>
 8006464:	e7ef      	b.n	8006446 <sbrk_aligned+0x1e>
 8006466:	bf00      	nop
 8006468:	20025c38 	.word	0x20025c38

0800646c <_malloc_r>:
 800646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006470:	1ccd      	adds	r5, r1, #3
 8006472:	f025 0503 	bic.w	r5, r5, #3
 8006476:	3508      	adds	r5, #8
 8006478:	2d0c      	cmp	r5, #12
 800647a:	bf38      	it	cc
 800647c:	250c      	movcc	r5, #12
 800647e:	2d00      	cmp	r5, #0
 8006480:	4606      	mov	r6, r0
 8006482:	db01      	blt.n	8006488 <_malloc_r+0x1c>
 8006484:	42a9      	cmp	r1, r5
 8006486:	d904      	bls.n	8006492 <_malloc_r+0x26>
 8006488:	230c      	movs	r3, #12
 800648a:	6033      	str	r3, [r6, #0]
 800648c:	2000      	movs	r0, #0
 800648e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006568 <_malloc_r+0xfc>
 8006496:	f000 f869 	bl	800656c <__malloc_lock>
 800649a:	f8d8 3000 	ldr.w	r3, [r8]
 800649e:	461c      	mov	r4, r3
 80064a0:	bb44      	cbnz	r4, 80064f4 <_malloc_r+0x88>
 80064a2:	4629      	mov	r1, r5
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffbf 	bl	8006428 <sbrk_aligned>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	4604      	mov	r4, r0
 80064ae:	d158      	bne.n	8006562 <_malloc_r+0xf6>
 80064b0:	f8d8 4000 	ldr.w	r4, [r8]
 80064b4:	4627      	mov	r7, r4
 80064b6:	2f00      	cmp	r7, #0
 80064b8:	d143      	bne.n	8006542 <_malloc_r+0xd6>
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	d04b      	beq.n	8006556 <_malloc_r+0xea>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	4639      	mov	r1, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	eb04 0903 	add.w	r9, r4, r3
 80064c8:	f000 fc5c 	bl	8006d84 <_sbrk_r>
 80064cc:	4581      	cmp	r9, r0
 80064ce:	d142      	bne.n	8006556 <_malloc_r+0xea>
 80064d0:	6821      	ldr	r1, [r4, #0]
 80064d2:	1a6d      	subs	r5, r5, r1
 80064d4:	4629      	mov	r1, r5
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ffa6 	bl	8006428 <sbrk_aligned>
 80064dc:	3001      	adds	r0, #1
 80064de:	d03a      	beq.n	8006556 <_malloc_r+0xea>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	442b      	add	r3, r5
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	bb62      	cbnz	r2, 8006548 <_malloc_r+0xdc>
 80064ee:	f8c8 7000 	str.w	r7, [r8]
 80064f2:	e00f      	b.n	8006514 <_malloc_r+0xa8>
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	1b52      	subs	r2, r2, r5
 80064f8:	d420      	bmi.n	800653c <_malloc_r+0xd0>
 80064fa:	2a0b      	cmp	r2, #11
 80064fc:	d917      	bls.n	800652e <_malloc_r+0xc2>
 80064fe:	1961      	adds	r1, r4, r5
 8006500:	42a3      	cmp	r3, r4
 8006502:	6025      	str	r5, [r4, #0]
 8006504:	bf18      	it	ne
 8006506:	6059      	strne	r1, [r3, #4]
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	bf08      	it	eq
 800650c:	f8c8 1000 	streq.w	r1, [r8]
 8006510:	5162      	str	r2, [r4, r5]
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	4630      	mov	r0, r6
 8006516:	f000 f82f 	bl	8006578 <__malloc_unlock>
 800651a:	f104 000b 	add.w	r0, r4, #11
 800651e:	1d23      	adds	r3, r4, #4
 8006520:	f020 0007 	bic.w	r0, r0, #7
 8006524:	1ac2      	subs	r2, r0, r3
 8006526:	bf1c      	itt	ne
 8006528:	1a1b      	subne	r3, r3, r0
 800652a:	50a3      	strne	r3, [r4, r2]
 800652c:	e7af      	b.n	800648e <_malloc_r+0x22>
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	42a3      	cmp	r3, r4
 8006532:	bf0c      	ite	eq
 8006534:	f8c8 2000 	streq.w	r2, [r8]
 8006538:	605a      	strne	r2, [r3, #4]
 800653a:	e7eb      	b.n	8006514 <_malloc_r+0xa8>
 800653c:	4623      	mov	r3, r4
 800653e:	6864      	ldr	r4, [r4, #4]
 8006540:	e7ae      	b.n	80064a0 <_malloc_r+0x34>
 8006542:	463c      	mov	r4, r7
 8006544:	687f      	ldr	r7, [r7, #4]
 8006546:	e7b6      	b.n	80064b6 <_malloc_r+0x4a>
 8006548:	461a      	mov	r2, r3
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	42a3      	cmp	r3, r4
 800654e:	d1fb      	bne.n	8006548 <_malloc_r+0xdc>
 8006550:	2300      	movs	r3, #0
 8006552:	6053      	str	r3, [r2, #4]
 8006554:	e7de      	b.n	8006514 <_malloc_r+0xa8>
 8006556:	230c      	movs	r3, #12
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f80c 	bl	8006578 <__malloc_unlock>
 8006560:	e794      	b.n	800648c <_malloc_r+0x20>
 8006562:	6005      	str	r5, [r0, #0]
 8006564:	e7d6      	b.n	8006514 <_malloc_r+0xa8>
 8006566:	bf00      	nop
 8006568:	20025c3c 	.word	0x20025c3c

0800656c <__malloc_lock>:
 800656c:	4801      	ldr	r0, [pc, #4]	@ (8006574 <__malloc_lock+0x8>)
 800656e:	f7ff bf0e 	b.w	800638e <__retarget_lock_acquire_recursive>
 8006572:	bf00      	nop
 8006574:	20025c34 	.word	0x20025c34

08006578 <__malloc_unlock>:
 8006578:	4801      	ldr	r0, [pc, #4]	@ (8006580 <__malloc_unlock+0x8>)
 800657a:	f7ff bf09 	b.w	8006390 <__retarget_lock_release_recursive>
 800657e:	bf00      	nop
 8006580:	20025c34 	.word	0x20025c34

08006584 <__sfputc_r>:
 8006584:	6893      	ldr	r3, [r2, #8]
 8006586:	3b01      	subs	r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	b410      	push	{r4}
 800658c:	6093      	str	r3, [r2, #8]
 800658e:	da08      	bge.n	80065a2 <__sfputc_r+0x1e>
 8006590:	6994      	ldr	r4, [r2, #24]
 8006592:	42a3      	cmp	r3, r4
 8006594:	db01      	blt.n	800659a <__sfputc_r+0x16>
 8006596:	290a      	cmp	r1, #10
 8006598:	d103      	bne.n	80065a2 <__sfputc_r+0x1e>
 800659a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659e:	f7ff bde8 	b.w	8006172 <__swbuf_r>
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	1c58      	adds	r0, r3, #1
 80065a6:	6010      	str	r0, [r2, #0]
 80065a8:	7019      	strb	r1, [r3, #0]
 80065aa:	4608      	mov	r0, r1
 80065ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <__sfputs_r>:
 80065b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	18d5      	adds	r5, r2, r3
 80065bc:	42ac      	cmp	r4, r5
 80065be:	d101      	bne.n	80065c4 <__sfputs_r+0x12>
 80065c0:	2000      	movs	r0, #0
 80065c2:	e007      	b.n	80065d4 <__sfputs_r+0x22>
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	463a      	mov	r2, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ffda 	bl	8006584 <__sfputc_r>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d1f3      	bne.n	80065bc <__sfputs_r+0xa>
 80065d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065d8 <_vfiprintf_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	460d      	mov	r5, r1
 80065de:	b09d      	sub	sp, #116	@ 0x74
 80065e0:	4614      	mov	r4, r2
 80065e2:	4698      	mov	r8, r3
 80065e4:	4606      	mov	r6, r0
 80065e6:	b118      	cbz	r0, 80065f0 <_vfiprintf_r+0x18>
 80065e8:	6a03      	ldr	r3, [r0, #32]
 80065ea:	b90b      	cbnz	r3, 80065f0 <_vfiprintf_r+0x18>
 80065ec:	f7ff fcd8 	bl	8005fa0 <__sinit>
 80065f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_vfiprintf_r+0x2a>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	059a      	lsls	r2, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_vfiprintf_r+0x2a>
 80065fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065fe:	f7ff fec6 	bl	800638e <__retarget_lock_acquire_recursive>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	071b      	lsls	r3, r3, #28
 8006606:	d501      	bpl.n	800660c <_vfiprintf_r+0x34>
 8006608:	692b      	ldr	r3, [r5, #16]
 800660a:	b99b      	cbnz	r3, 8006634 <_vfiprintf_r+0x5c>
 800660c:	4629      	mov	r1, r5
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff fdee 	bl	80061f0 <__swsetup_r>
 8006614:	b170      	cbz	r0, 8006634 <_vfiprintf_r+0x5c>
 8006616:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006618:	07dc      	lsls	r4, r3, #31
 800661a:	d504      	bpl.n	8006626 <_vfiprintf_r+0x4e>
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	b01d      	add	sp, #116	@ 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	0598      	lsls	r0, r3, #22
 800662a:	d4f7      	bmi.n	800661c <_vfiprintf_r+0x44>
 800662c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800662e:	f7ff feaf 	bl	8006390 <__retarget_lock_release_recursive>
 8006632:	e7f3      	b.n	800661c <_vfiprintf_r+0x44>
 8006634:	2300      	movs	r3, #0
 8006636:	9309      	str	r3, [sp, #36]	@ 0x24
 8006638:	2320      	movs	r3, #32
 800663a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800663e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006642:	2330      	movs	r3, #48	@ 0x30
 8006644:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067f4 <_vfiprintf_r+0x21c>
 8006648:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800664c:	f04f 0901 	mov.w	r9, #1
 8006650:	4623      	mov	r3, r4
 8006652:	469a      	mov	sl, r3
 8006654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006658:	b10a      	cbz	r2, 800665e <_vfiprintf_r+0x86>
 800665a:	2a25      	cmp	r2, #37	@ 0x25
 800665c:	d1f9      	bne.n	8006652 <_vfiprintf_r+0x7a>
 800665e:	ebba 0b04 	subs.w	fp, sl, r4
 8006662:	d00b      	beq.n	800667c <_vfiprintf_r+0xa4>
 8006664:	465b      	mov	r3, fp
 8006666:	4622      	mov	r2, r4
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff ffa1 	bl	80065b2 <__sfputs_r>
 8006670:	3001      	adds	r0, #1
 8006672:	f000 80a7 	beq.w	80067c4 <_vfiprintf_r+0x1ec>
 8006676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006678:	445a      	add	r2, fp
 800667a:	9209      	str	r2, [sp, #36]	@ 0x24
 800667c:	f89a 3000 	ldrb.w	r3, [sl]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 809f 	beq.w	80067c4 <_vfiprintf_r+0x1ec>
 8006686:	2300      	movs	r3, #0
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006690:	f10a 0a01 	add.w	sl, sl, #1
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800669c:	931a      	str	r3, [sp, #104]	@ 0x68
 800669e:	4654      	mov	r4, sl
 80066a0:	2205      	movs	r2, #5
 80066a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a6:	4853      	ldr	r0, [pc, #332]	@ (80067f4 <_vfiprintf_r+0x21c>)
 80066a8:	f7f9 fda2 	bl	80001f0 <memchr>
 80066ac:	9a04      	ldr	r2, [sp, #16]
 80066ae:	b9d8      	cbnz	r0, 80066e8 <_vfiprintf_r+0x110>
 80066b0:	06d1      	lsls	r1, r2, #27
 80066b2:	bf44      	itt	mi
 80066b4:	2320      	movmi	r3, #32
 80066b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ba:	0713      	lsls	r3, r2, #28
 80066bc:	bf44      	itt	mi
 80066be:	232b      	movmi	r3, #43	@ 0x2b
 80066c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c4:	f89a 3000 	ldrb.w	r3, [sl]
 80066c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ca:	d015      	beq.n	80066f8 <_vfiprintf_r+0x120>
 80066cc:	9a07      	ldr	r2, [sp, #28]
 80066ce:	4654      	mov	r4, sl
 80066d0:	2000      	movs	r0, #0
 80066d2:	f04f 0c0a 	mov.w	ip, #10
 80066d6:	4621      	mov	r1, r4
 80066d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066dc:	3b30      	subs	r3, #48	@ 0x30
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d94b      	bls.n	800677a <_vfiprintf_r+0x1a2>
 80066e2:	b1b0      	cbz	r0, 8006712 <_vfiprintf_r+0x13a>
 80066e4:	9207      	str	r2, [sp, #28]
 80066e6:	e014      	b.n	8006712 <_vfiprintf_r+0x13a>
 80066e8:	eba0 0308 	sub.w	r3, r0, r8
 80066ec:	fa09 f303 	lsl.w	r3, r9, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	9304      	str	r3, [sp, #16]
 80066f4:	46a2      	mov	sl, r4
 80066f6:	e7d2      	b.n	800669e <_vfiprintf_r+0xc6>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	1d19      	adds	r1, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	9103      	str	r1, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfbb      	ittet	lt
 8006704:	425b      	neglt	r3, r3
 8006706:	f042 0202 	orrlt.w	r2, r2, #2
 800670a:	9307      	strge	r3, [sp, #28]
 800670c:	9307      	strlt	r3, [sp, #28]
 800670e:	bfb8      	it	lt
 8006710:	9204      	strlt	r2, [sp, #16]
 8006712:	7823      	ldrb	r3, [r4, #0]
 8006714:	2b2e      	cmp	r3, #46	@ 0x2e
 8006716:	d10a      	bne.n	800672e <_vfiprintf_r+0x156>
 8006718:	7863      	ldrb	r3, [r4, #1]
 800671a:	2b2a      	cmp	r3, #42	@ 0x2a
 800671c:	d132      	bne.n	8006784 <_vfiprintf_r+0x1ac>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	1d1a      	adds	r2, r3, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	9203      	str	r2, [sp, #12]
 8006726:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800672a:	3402      	adds	r4, #2
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006804 <_vfiprintf_r+0x22c>
 8006732:	7821      	ldrb	r1, [r4, #0]
 8006734:	2203      	movs	r2, #3
 8006736:	4650      	mov	r0, sl
 8006738:	f7f9 fd5a 	bl	80001f0 <memchr>
 800673c:	b138      	cbz	r0, 800674e <_vfiprintf_r+0x176>
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	eba0 000a 	sub.w	r0, r0, sl
 8006744:	2240      	movs	r2, #64	@ 0x40
 8006746:	4082      	lsls	r2, r0
 8006748:	4313      	orrs	r3, r2
 800674a:	3401      	adds	r4, #1
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006752:	4829      	ldr	r0, [pc, #164]	@ (80067f8 <_vfiprintf_r+0x220>)
 8006754:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006758:	2206      	movs	r2, #6
 800675a:	f7f9 fd49 	bl	80001f0 <memchr>
 800675e:	2800      	cmp	r0, #0
 8006760:	d03f      	beq.n	80067e2 <_vfiprintf_r+0x20a>
 8006762:	4b26      	ldr	r3, [pc, #152]	@ (80067fc <_vfiprintf_r+0x224>)
 8006764:	bb1b      	cbnz	r3, 80067ae <_vfiprintf_r+0x1d6>
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	3307      	adds	r3, #7
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	3308      	adds	r3, #8
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006774:	443b      	add	r3, r7
 8006776:	9309      	str	r3, [sp, #36]	@ 0x24
 8006778:	e76a      	b.n	8006650 <_vfiprintf_r+0x78>
 800677a:	fb0c 3202 	mla	r2, ip, r2, r3
 800677e:	460c      	mov	r4, r1
 8006780:	2001      	movs	r0, #1
 8006782:	e7a8      	b.n	80066d6 <_vfiprintf_r+0xfe>
 8006784:	2300      	movs	r3, #0
 8006786:	3401      	adds	r4, #1
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0c0a 	mov.w	ip, #10
 8006790:	4620      	mov	r0, r4
 8006792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006796:	3a30      	subs	r2, #48	@ 0x30
 8006798:	2a09      	cmp	r2, #9
 800679a:	d903      	bls.n	80067a4 <_vfiprintf_r+0x1cc>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0c6      	beq.n	800672e <_vfiprintf_r+0x156>
 80067a0:	9105      	str	r1, [sp, #20]
 80067a2:	e7c4      	b.n	800672e <_vfiprintf_r+0x156>
 80067a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a8:	4604      	mov	r4, r0
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7f0      	b.n	8006790 <_vfiprintf_r+0x1b8>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <_vfiprintf_r+0x228>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4630      	mov	r0, r6
 80067ba:	f3af 8000 	nop.w
 80067be:	4607      	mov	r7, r0
 80067c0:	1c78      	adds	r0, r7, #1
 80067c2:	d1d6      	bne.n	8006772 <_vfiprintf_r+0x19a>
 80067c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067c6:	07d9      	lsls	r1, r3, #31
 80067c8:	d405      	bmi.n	80067d6 <_vfiprintf_r+0x1fe>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	059a      	lsls	r2, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_vfiprintf_r+0x1fe>
 80067d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067d2:	f7ff fddd 	bl	8006390 <__retarget_lock_release_recursive>
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	065b      	lsls	r3, r3, #25
 80067da:	f53f af1f 	bmi.w	800661c <_vfiprintf_r+0x44>
 80067de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067e0:	e71e      	b.n	8006620 <_vfiprintf_r+0x48>
 80067e2:	ab03      	add	r3, sp, #12
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	462a      	mov	r2, r5
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <_vfiprintf_r+0x228>)
 80067ea:	a904      	add	r1, sp, #16
 80067ec:	4630      	mov	r0, r6
 80067ee:	f000 f879 	bl	80068e4 <_printf_i>
 80067f2:	e7e4      	b.n	80067be <_vfiprintf_r+0x1e6>
 80067f4:	08007fe4 	.word	0x08007fe4
 80067f8:	08007fee 	.word	0x08007fee
 80067fc:	00000000 	.word	0x00000000
 8006800:	080065b3 	.word	0x080065b3
 8006804:	08007fea 	.word	0x08007fea

08006808 <_printf_common>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	4616      	mov	r6, r2
 800680e:	4698      	mov	r8, r3
 8006810:	688a      	ldr	r2, [r1, #8]
 8006812:	690b      	ldr	r3, [r1, #16]
 8006814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006818:	4293      	cmp	r3, r2
 800681a:	bfb8      	it	lt
 800681c:	4613      	movlt	r3, r2
 800681e:	6033      	str	r3, [r6, #0]
 8006820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006824:	4607      	mov	r7, r0
 8006826:	460c      	mov	r4, r1
 8006828:	b10a      	cbz	r2, 800682e <_printf_common+0x26>
 800682a:	3301      	adds	r3, #1
 800682c:	6033      	str	r3, [r6, #0]
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	0699      	lsls	r1, r3, #26
 8006832:	bf42      	ittt	mi
 8006834:	6833      	ldrmi	r3, [r6, #0]
 8006836:	3302      	addmi	r3, #2
 8006838:	6033      	strmi	r3, [r6, #0]
 800683a:	6825      	ldr	r5, [r4, #0]
 800683c:	f015 0506 	ands.w	r5, r5, #6
 8006840:	d106      	bne.n	8006850 <_printf_common+0x48>
 8006842:	f104 0a19 	add.w	sl, r4, #25
 8006846:	68e3      	ldr	r3, [r4, #12]
 8006848:	6832      	ldr	r2, [r6, #0]
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	42ab      	cmp	r3, r5
 800684e:	dc26      	bgt.n	800689e <_printf_common+0x96>
 8006850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	3b00      	subs	r3, #0
 8006858:	bf18      	it	ne
 800685a:	2301      	movne	r3, #1
 800685c:	0692      	lsls	r2, r2, #26
 800685e:	d42b      	bmi.n	80068b8 <_printf_common+0xb0>
 8006860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006864:	4641      	mov	r1, r8
 8006866:	4638      	mov	r0, r7
 8006868:	47c8      	blx	r9
 800686a:	3001      	adds	r0, #1
 800686c:	d01e      	beq.n	80068ac <_printf_common+0xa4>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6922      	ldr	r2, [r4, #16]
 8006872:	f003 0306 	and.w	r3, r3, #6
 8006876:	2b04      	cmp	r3, #4
 8006878:	bf02      	ittt	eq
 800687a:	68e5      	ldreq	r5, [r4, #12]
 800687c:	6833      	ldreq	r3, [r6, #0]
 800687e:	1aed      	subeq	r5, r5, r3
 8006880:	68a3      	ldr	r3, [r4, #8]
 8006882:	bf0c      	ite	eq
 8006884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006888:	2500      	movne	r5, #0
 800688a:	4293      	cmp	r3, r2
 800688c:	bfc4      	itt	gt
 800688e:	1a9b      	subgt	r3, r3, r2
 8006890:	18ed      	addgt	r5, r5, r3
 8006892:	2600      	movs	r6, #0
 8006894:	341a      	adds	r4, #26
 8006896:	42b5      	cmp	r5, r6
 8006898:	d11a      	bne.n	80068d0 <_printf_common+0xc8>
 800689a:	2000      	movs	r0, #0
 800689c:	e008      	b.n	80068b0 <_printf_common+0xa8>
 800689e:	2301      	movs	r3, #1
 80068a0:	4652      	mov	r2, sl
 80068a2:	4641      	mov	r1, r8
 80068a4:	4638      	mov	r0, r7
 80068a6:	47c8      	blx	r9
 80068a8:	3001      	adds	r0, #1
 80068aa:	d103      	bne.n	80068b4 <_printf_common+0xac>
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b4:	3501      	adds	r5, #1
 80068b6:	e7c6      	b.n	8006846 <_printf_common+0x3e>
 80068b8:	18e1      	adds	r1, r4, r3
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	2030      	movs	r0, #48	@ 0x30
 80068be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068c2:	4422      	add	r2, r4
 80068c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068cc:	3302      	adds	r3, #2
 80068ce:	e7c7      	b.n	8006860 <_printf_common+0x58>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4622      	mov	r2, r4
 80068d4:	4641      	mov	r1, r8
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c8      	blx	r9
 80068da:	3001      	adds	r0, #1
 80068dc:	d0e6      	beq.n	80068ac <_printf_common+0xa4>
 80068de:	3601      	adds	r6, #1
 80068e0:	e7d9      	b.n	8006896 <_printf_common+0x8e>
	...

080068e4 <_printf_i>:
 80068e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	7e0f      	ldrb	r7, [r1, #24]
 80068ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068ec:	2f78      	cmp	r7, #120	@ 0x78
 80068ee:	4691      	mov	r9, r2
 80068f0:	4680      	mov	r8, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	469a      	mov	sl, r3
 80068f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068fa:	d807      	bhi.n	800690c <_printf_i+0x28>
 80068fc:	2f62      	cmp	r7, #98	@ 0x62
 80068fe:	d80a      	bhi.n	8006916 <_printf_i+0x32>
 8006900:	2f00      	cmp	r7, #0
 8006902:	f000 80d2 	beq.w	8006aaa <_printf_i+0x1c6>
 8006906:	2f58      	cmp	r7, #88	@ 0x58
 8006908:	f000 80b9 	beq.w	8006a7e <_printf_i+0x19a>
 800690c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006914:	e03a      	b.n	800698c <_printf_i+0xa8>
 8006916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800691a:	2b15      	cmp	r3, #21
 800691c:	d8f6      	bhi.n	800690c <_printf_i+0x28>
 800691e:	a101      	add	r1, pc, #4	@ (adr r1, 8006924 <_printf_i+0x40>)
 8006920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006924:	0800697d 	.word	0x0800697d
 8006928:	08006991 	.word	0x08006991
 800692c:	0800690d 	.word	0x0800690d
 8006930:	0800690d 	.word	0x0800690d
 8006934:	0800690d 	.word	0x0800690d
 8006938:	0800690d 	.word	0x0800690d
 800693c:	08006991 	.word	0x08006991
 8006940:	0800690d 	.word	0x0800690d
 8006944:	0800690d 	.word	0x0800690d
 8006948:	0800690d 	.word	0x0800690d
 800694c:	0800690d 	.word	0x0800690d
 8006950:	08006a91 	.word	0x08006a91
 8006954:	080069bb 	.word	0x080069bb
 8006958:	08006a4b 	.word	0x08006a4b
 800695c:	0800690d 	.word	0x0800690d
 8006960:	0800690d 	.word	0x0800690d
 8006964:	08006ab3 	.word	0x08006ab3
 8006968:	0800690d 	.word	0x0800690d
 800696c:	080069bb 	.word	0x080069bb
 8006970:	0800690d 	.word	0x0800690d
 8006974:	0800690d 	.word	0x0800690d
 8006978:	08006a53 	.word	0x08006a53
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	1d1a      	adds	r2, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6032      	str	r2, [r6, #0]
 8006984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800698c:	2301      	movs	r3, #1
 800698e:	e09d      	b.n	8006acc <_printf_i+0x1e8>
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	1d19      	adds	r1, r3, #4
 8006996:	6031      	str	r1, [r6, #0]
 8006998:	0606      	lsls	r6, r0, #24
 800699a:	d501      	bpl.n	80069a0 <_printf_i+0xbc>
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	e003      	b.n	80069a8 <_printf_i+0xc4>
 80069a0:	0645      	lsls	r5, r0, #25
 80069a2:	d5fb      	bpl.n	800699c <_printf_i+0xb8>
 80069a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	da03      	bge.n	80069b4 <_printf_i+0xd0>
 80069ac:	232d      	movs	r3, #45	@ 0x2d
 80069ae:	426d      	negs	r5, r5
 80069b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b4:	4859      	ldr	r0, [pc, #356]	@ (8006b1c <_printf_i+0x238>)
 80069b6:	230a      	movs	r3, #10
 80069b8:	e011      	b.n	80069de <_printf_i+0xfa>
 80069ba:	6821      	ldr	r1, [r4, #0]
 80069bc:	6833      	ldr	r3, [r6, #0]
 80069be:	0608      	lsls	r0, r1, #24
 80069c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80069c4:	d402      	bmi.n	80069cc <_printf_i+0xe8>
 80069c6:	0649      	lsls	r1, r1, #25
 80069c8:	bf48      	it	mi
 80069ca:	b2ad      	uxthmi	r5, r5
 80069cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80069ce:	4853      	ldr	r0, [pc, #332]	@ (8006b1c <_printf_i+0x238>)
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	bf14      	ite	ne
 80069d4:	230a      	movne	r3, #10
 80069d6:	2308      	moveq	r3, #8
 80069d8:	2100      	movs	r1, #0
 80069da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069de:	6866      	ldr	r6, [r4, #4]
 80069e0:	60a6      	str	r6, [r4, #8]
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	bfa2      	ittt	ge
 80069e6:	6821      	ldrge	r1, [r4, #0]
 80069e8:	f021 0104 	bicge.w	r1, r1, #4
 80069ec:	6021      	strge	r1, [r4, #0]
 80069ee:	b90d      	cbnz	r5, 80069f4 <_printf_i+0x110>
 80069f0:	2e00      	cmp	r6, #0
 80069f2:	d04b      	beq.n	8006a8c <_printf_i+0x1a8>
 80069f4:	4616      	mov	r6, r2
 80069f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069fa:	fb03 5711 	mls	r7, r3, r1, r5
 80069fe:	5dc7      	ldrb	r7, [r0, r7]
 8006a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a04:	462f      	mov	r7, r5
 8006a06:	42bb      	cmp	r3, r7
 8006a08:	460d      	mov	r5, r1
 8006a0a:	d9f4      	bls.n	80069f6 <_printf_i+0x112>
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d10b      	bne.n	8006a28 <_printf_i+0x144>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	07df      	lsls	r7, r3, #31
 8006a14:	d508      	bpl.n	8006a28 <_printf_i+0x144>
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	bfde      	ittt	le
 8006a1e:	2330      	movle	r3, #48	@ 0x30
 8006a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a28:	1b92      	subs	r2, r2, r6
 8006a2a:	6122      	str	r2, [r4, #16]
 8006a2c:	f8cd a000 	str.w	sl, [sp]
 8006a30:	464b      	mov	r3, r9
 8006a32:	aa03      	add	r2, sp, #12
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fee6 	bl	8006808 <_printf_common>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d14a      	bne.n	8006ad6 <_printf_i+0x1f2>
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	b004      	add	sp, #16
 8006a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	f043 0320 	orr.w	r3, r3, #32
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	4833      	ldr	r0, [pc, #204]	@ (8006b20 <_printf_i+0x23c>)
 8006a54:	2778      	movs	r7, #120	@ 0x78
 8006a56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	6831      	ldr	r1, [r6, #0]
 8006a5e:	061f      	lsls	r7, r3, #24
 8006a60:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a64:	d402      	bmi.n	8006a6c <_printf_i+0x188>
 8006a66:	065f      	lsls	r7, r3, #25
 8006a68:	bf48      	it	mi
 8006a6a:	b2ad      	uxthmi	r5, r5
 8006a6c:	6031      	str	r1, [r6, #0]
 8006a6e:	07d9      	lsls	r1, r3, #31
 8006a70:	bf44      	itt	mi
 8006a72:	f043 0320 	orrmi.w	r3, r3, #32
 8006a76:	6023      	strmi	r3, [r4, #0]
 8006a78:	b11d      	cbz	r5, 8006a82 <_printf_i+0x19e>
 8006a7a:	2310      	movs	r3, #16
 8006a7c:	e7ac      	b.n	80069d8 <_printf_i+0xf4>
 8006a7e:	4827      	ldr	r0, [pc, #156]	@ (8006b1c <_printf_i+0x238>)
 8006a80:	e7e9      	b.n	8006a56 <_printf_i+0x172>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	e7f6      	b.n	8006a7a <_printf_i+0x196>
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	e7bd      	b.n	8006a0c <_printf_i+0x128>
 8006a90:	6833      	ldr	r3, [r6, #0]
 8006a92:	6825      	ldr	r5, [r4, #0]
 8006a94:	6961      	ldr	r1, [r4, #20]
 8006a96:	1d18      	adds	r0, r3, #4
 8006a98:	6030      	str	r0, [r6, #0]
 8006a9a:	062e      	lsls	r6, r5, #24
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	d501      	bpl.n	8006aa4 <_printf_i+0x1c0>
 8006aa0:	6019      	str	r1, [r3, #0]
 8006aa2:	e002      	b.n	8006aaa <_printf_i+0x1c6>
 8006aa4:	0668      	lsls	r0, r5, #25
 8006aa6:	d5fb      	bpl.n	8006aa0 <_printf_i+0x1bc>
 8006aa8:	8019      	strh	r1, [r3, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	4616      	mov	r6, r2
 8006ab0:	e7bc      	b.n	8006a2c <_printf_i+0x148>
 8006ab2:	6833      	ldr	r3, [r6, #0]
 8006ab4:	1d1a      	adds	r2, r3, #4
 8006ab6:	6032      	str	r2, [r6, #0]
 8006ab8:	681e      	ldr	r6, [r3, #0]
 8006aba:	6862      	ldr	r2, [r4, #4]
 8006abc:	2100      	movs	r1, #0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7f9 fb96 	bl	80001f0 <memchr>
 8006ac4:	b108      	cbz	r0, 8006aca <_printf_i+0x1e6>
 8006ac6:	1b80      	subs	r0, r0, r6
 8006ac8:	6060      	str	r0, [r4, #4]
 8006aca:	6863      	ldr	r3, [r4, #4]
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad4:	e7aa      	b.n	8006a2c <_printf_i+0x148>
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4649      	mov	r1, r9
 8006adc:	4640      	mov	r0, r8
 8006ade:	47d0      	blx	sl
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d0ad      	beq.n	8006a40 <_printf_i+0x15c>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	079b      	lsls	r3, r3, #30
 8006ae8:	d413      	bmi.n	8006b12 <_printf_i+0x22e>
 8006aea:	68e0      	ldr	r0, [r4, #12]
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	4298      	cmp	r0, r3
 8006af0:	bfb8      	it	lt
 8006af2:	4618      	movlt	r0, r3
 8006af4:	e7a6      	b.n	8006a44 <_printf_i+0x160>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4632      	mov	r2, r6
 8006afa:	4649      	mov	r1, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	47d0      	blx	sl
 8006b00:	3001      	adds	r0, #1
 8006b02:	d09d      	beq.n	8006a40 <_printf_i+0x15c>
 8006b04:	3501      	adds	r5, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	9903      	ldr	r1, [sp, #12]
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	42ab      	cmp	r3, r5
 8006b0e:	dcf2      	bgt.n	8006af6 <_printf_i+0x212>
 8006b10:	e7eb      	b.n	8006aea <_printf_i+0x206>
 8006b12:	2500      	movs	r5, #0
 8006b14:	f104 0619 	add.w	r6, r4, #25
 8006b18:	e7f5      	b.n	8006b06 <_printf_i+0x222>
 8006b1a:	bf00      	nop
 8006b1c:	08007ff5 	.word	0x08007ff5
 8006b20:	08008006 	.word	0x08008006

08006b24 <__sflush_r>:
 8006b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	0716      	lsls	r6, r2, #28
 8006b2e:	4605      	mov	r5, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	d454      	bmi.n	8006bde <__sflush_r+0xba>
 8006b34:	684b      	ldr	r3, [r1, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	dc02      	bgt.n	8006b40 <__sflush_r+0x1c>
 8006b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dd48      	ble.n	8006bd2 <__sflush_r+0xae>
 8006b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d045      	beq.n	8006bd2 <__sflush_r+0xae>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b4c:	682f      	ldr	r7, [r5, #0]
 8006b4e:	6a21      	ldr	r1, [r4, #32]
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	d030      	beq.n	8006bb6 <__sflush_r+0x92>
 8006b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	0759      	lsls	r1, r3, #29
 8006b5a:	d505      	bpl.n	8006b68 <__sflush_r+0x44>
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b62:	b10b      	cbz	r3, 8006b68 <__sflush_r+0x44>
 8006b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b66:	1ad2      	subs	r2, r2, r3
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b6c:	6a21      	ldr	r1, [r4, #32]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b0      	blx	r6
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	d106      	bne.n	8006b86 <__sflush_r+0x62>
 8006b78:	6829      	ldr	r1, [r5, #0]
 8006b7a:	291d      	cmp	r1, #29
 8006b7c:	d82b      	bhi.n	8006bd6 <__sflush_r+0xb2>
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c28 <__sflush_r+0x104>)
 8006b80:	410a      	asrs	r2, r1
 8006b82:	07d6      	lsls	r6, r2, #31
 8006b84:	d427      	bmi.n	8006bd6 <__sflush_r+0xb2>
 8006b86:	2200      	movs	r2, #0
 8006b88:	6062      	str	r2, [r4, #4]
 8006b8a:	04d9      	lsls	r1, r3, #19
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	d504      	bpl.n	8006b9c <__sflush_r+0x78>
 8006b92:	1c42      	adds	r2, r0, #1
 8006b94:	d101      	bne.n	8006b9a <__sflush_r+0x76>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	b903      	cbnz	r3, 8006b9c <__sflush_r+0x78>
 8006b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b9e:	602f      	str	r7, [r5, #0]
 8006ba0:	b1b9      	cbz	r1, 8006bd2 <__sflush_r+0xae>
 8006ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	d002      	beq.n	8006bb0 <__sflush_r+0x8c>
 8006baa:	4628      	mov	r0, r5
 8006bac:	f7ff fbf2 	bl	8006394 <_free_r>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bb4:	e00d      	b.n	8006bd2 <__sflush_r+0xae>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b0      	blx	r6
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	1c50      	adds	r0, r2, #1
 8006bc0:	d1c9      	bne.n	8006b56 <__sflush_r+0x32>
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0c6      	beq.n	8006b56 <__sflush_r+0x32>
 8006bc8:	2b1d      	cmp	r3, #29
 8006bca:	d001      	beq.n	8006bd0 <__sflush_r+0xac>
 8006bcc:	2b16      	cmp	r3, #22
 8006bce:	d11e      	bne.n	8006c0e <__sflush_r+0xea>
 8006bd0:	602f      	str	r7, [r5, #0]
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e022      	b.n	8006c1c <__sflush_r+0xf8>
 8006bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	e01b      	b.n	8006c16 <__sflush_r+0xf2>
 8006bde:	690f      	ldr	r7, [r1, #16]
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	d0f6      	beq.n	8006bd2 <__sflush_r+0xae>
 8006be4:	0793      	lsls	r3, r2, #30
 8006be6:	680e      	ldr	r6, [r1, #0]
 8006be8:	bf08      	it	eq
 8006bea:	694b      	ldreq	r3, [r1, #20]
 8006bec:	600f      	str	r7, [r1, #0]
 8006bee:	bf18      	it	ne
 8006bf0:	2300      	movne	r3, #0
 8006bf2:	eba6 0807 	sub.w	r8, r6, r7
 8006bf6:	608b      	str	r3, [r1, #8]
 8006bf8:	f1b8 0f00 	cmp.w	r8, #0
 8006bfc:	dde9      	ble.n	8006bd2 <__sflush_r+0xae>
 8006bfe:	6a21      	ldr	r1, [r4, #32]
 8006c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c02:	4643      	mov	r3, r8
 8006c04:	463a      	mov	r2, r7
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b0      	blx	r6
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	dc08      	bgt.n	8006c20 <__sflush_r+0xfc>
 8006c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c20:	4407      	add	r7, r0
 8006c22:	eba8 0800 	sub.w	r8, r8, r0
 8006c26:	e7e7      	b.n	8006bf8 <__sflush_r+0xd4>
 8006c28:	dfbffffe 	.word	0xdfbffffe

08006c2c <_fflush_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	690b      	ldr	r3, [r1, #16]
 8006c30:	4605      	mov	r5, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	b913      	cbnz	r3, 8006c3c <_fflush_r+0x10>
 8006c36:	2500      	movs	r5, #0
 8006c38:	4628      	mov	r0, r5
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	b118      	cbz	r0, 8006c46 <_fflush_r+0x1a>
 8006c3e:	6a03      	ldr	r3, [r0, #32]
 8006c40:	b90b      	cbnz	r3, 8006c46 <_fflush_r+0x1a>
 8006c42:	f7ff f9ad 	bl	8005fa0 <__sinit>
 8006c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f3      	beq.n	8006c36 <_fflush_r+0xa>
 8006c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c50:	07d0      	lsls	r0, r2, #31
 8006c52:	d404      	bmi.n	8006c5e <_fflush_r+0x32>
 8006c54:	0599      	lsls	r1, r3, #22
 8006c56:	d402      	bmi.n	8006c5e <_fflush_r+0x32>
 8006c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c5a:	f7ff fb98 	bl	800638e <__retarget_lock_acquire_recursive>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4621      	mov	r1, r4
 8006c62:	f7ff ff5f 	bl	8006b24 <__sflush_r>
 8006c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c68:	07da      	lsls	r2, r3, #31
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	d4e4      	bmi.n	8006c38 <_fflush_r+0xc>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	059b      	lsls	r3, r3, #22
 8006c72:	d4e1      	bmi.n	8006c38 <_fflush_r+0xc>
 8006c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c76:	f7ff fb8b 	bl	8006390 <__retarget_lock_release_recursive>
 8006c7a:	e7dd      	b.n	8006c38 <_fflush_r+0xc>

08006c7c <__swhatbuf_r>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	2900      	cmp	r1, #0
 8006c86:	b096      	sub	sp, #88	@ 0x58
 8006c88:	4615      	mov	r5, r2
 8006c8a:	461e      	mov	r6, r3
 8006c8c:	da0d      	bge.n	8006caa <__swhatbuf_r+0x2e>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c94:	f04f 0100 	mov.w	r1, #0
 8006c98:	bf14      	ite	ne
 8006c9a:	2340      	movne	r3, #64	@ 0x40
 8006c9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	b016      	add	sp, #88	@ 0x58
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	466a      	mov	r2, sp
 8006cac:	f000 f848 	bl	8006d40 <_fstat_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	dbec      	blt.n	8006c8e <__swhatbuf_r+0x12>
 8006cb4:	9901      	ldr	r1, [sp, #4]
 8006cb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006cba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006cbe:	4259      	negs	r1, r3
 8006cc0:	4159      	adcs	r1, r3
 8006cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cc6:	e7eb      	b.n	8006ca0 <__swhatbuf_r+0x24>

08006cc8 <__smakebuf_r>:
 8006cc8:	898b      	ldrh	r3, [r1, #12]
 8006cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ccc:	079d      	lsls	r5, r3, #30
 8006cce:	4606      	mov	r6, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	d507      	bpl.n	8006ce4 <__smakebuf_r+0x1c>
 8006cd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	6163      	str	r3, [r4, #20]
 8006ce0:	b003      	add	sp, #12
 8006ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce4:	ab01      	add	r3, sp, #4
 8006ce6:	466a      	mov	r2, sp
 8006ce8:	f7ff ffc8 	bl	8006c7c <__swhatbuf_r>
 8006cec:	9f00      	ldr	r7, [sp, #0]
 8006cee:	4605      	mov	r5, r0
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff fbba 	bl	800646c <_malloc_r>
 8006cf8:	b948      	cbnz	r0, 8006d0e <__smakebuf_r+0x46>
 8006cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfe:	059a      	lsls	r2, r3, #22
 8006d00:	d4ee      	bmi.n	8006ce0 <__smakebuf_r+0x18>
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	e7e2      	b.n	8006cd4 <__smakebuf_r+0xc>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	6020      	str	r0, [r4, #0]
 8006d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d1e:	b15b      	cbz	r3, 8006d38 <__smakebuf_r+0x70>
 8006d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 f81d 	bl	8006d64 <_isatty_r>
 8006d2a:	b128      	cbz	r0, 8006d38 <__smakebuf_r+0x70>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	431d      	orrs	r5, r3
 8006d3c:	81a5      	strh	r5, [r4, #12]
 8006d3e:	e7cf      	b.n	8006ce0 <__smakebuf_r+0x18>

08006d40 <_fstat_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	@ (8006d60 <_fstat_r+0x20>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	f7ff f870 	bl	8005e32 <_fstat>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d102      	bne.n	8006d5c <_fstat_r+0x1c>
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	b103      	cbz	r3, 8006d5c <_fstat_r+0x1c>
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	bf00      	nop
 8006d60:	20025c30 	.word	0x20025c30

08006d64 <_isatty_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d06      	ldr	r5, [pc, #24]	@ (8006d80 <_isatty_r+0x1c>)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	f7ff f86d 	bl	8005e4e <_isatty>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_isatty_r+0x1a>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_isatty_r+0x1a>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	20025c30 	.word	0x20025c30

08006d84 <_sbrk_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	@ (8006da0 <_sbrk_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fb fd56 	bl	8002840 <_sbrk>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_sbrk_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_sbrk_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	20025c30 	.word	0x20025c30

08006da4 <_init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr

08006db0 <_fini>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr
